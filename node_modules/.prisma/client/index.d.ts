
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Semestre
 * 
 */
export type Semestre = $Result.DefaultSelection<Prisma.$SemestrePayload>
/**
 * Model Curso
 * 
 */
export type Curso = $Result.DefaultSelection<Prisma.$CursoPayload>
/**
 * Model Disciplina
 * 
 */
export type Disciplina = $Result.DefaultSelection<Prisma.$DisciplinaPayload>
/**
 * Model Turma
 * 
 */
export type Turma = $Result.DefaultSelection<Prisma.$TurmaPayload>
/**
 * Model TurmaDisciplinas
 * 
 */
export type TurmaDisciplinas = $Result.DefaultSelection<Prisma.$TurmaDisciplinasPayload>
/**
 * Model TurmaAlunos
 * 
 */
export type TurmaAlunos = $Result.DefaultSelection<Prisma.$TurmaAlunosPayload>
/**
 * Model Chamada
 * 
 */
export type Chamada = $Result.DefaultSelection<Prisma.$ChamadaPayload>
/**
 * Model ChamadaAlunos
 * 
 */
export type ChamadaAlunos = $Result.DefaultSelection<Prisma.$ChamadaAlunosPayload>
/**
 * Model SemestreProfessorDisciplinas
 * 
 */
export type SemestreProfessorDisciplinas = $Result.DefaultSelection<Prisma.$SemestreProfessorDisciplinasPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.semestre`: Exposes CRUD operations for the **Semestre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Semestres
    * const semestres = await prisma.semestre.findMany()
    * ```
    */
  get semestre(): Prisma.SemestreDelegate<ExtArgs>;

  /**
   * `prisma.curso`: Exposes CRUD operations for the **Curso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cursos
    * const cursos = await prisma.curso.findMany()
    * ```
    */
  get curso(): Prisma.CursoDelegate<ExtArgs>;

  /**
   * `prisma.disciplina`: Exposes CRUD operations for the **Disciplina** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplinas
    * const disciplinas = await prisma.disciplina.findMany()
    * ```
    */
  get disciplina(): Prisma.DisciplinaDelegate<ExtArgs>;

  /**
   * `prisma.turma`: Exposes CRUD operations for the **Turma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turmas
    * const turmas = await prisma.turma.findMany()
    * ```
    */
  get turma(): Prisma.TurmaDelegate<ExtArgs>;

  /**
   * `prisma.turmaDisciplinas`: Exposes CRUD operations for the **TurmaDisciplinas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TurmaDisciplinas
    * const turmaDisciplinas = await prisma.turmaDisciplinas.findMany()
    * ```
    */
  get turmaDisciplinas(): Prisma.TurmaDisciplinasDelegate<ExtArgs>;

  /**
   * `prisma.turmaAlunos`: Exposes CRUD operations for the **TurmaAlunos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TurmaAlunos
    * const turmaAlunos = await prisma.turmaAlunos.findMany()
    * ```
    */
  get turmaAlunos(): Prisma.TurmaAlunosDelegate<ExtArgs>;

  /**
   * `prisma.chamada`: Exposes CRUD operations for the **Chamada** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chamadas
    * const chamadas = await prisma.chamada.findMany()
    * ```
    */
  get chamada(): Prisma.ChamadaDelegate<ExtArgs>;

  /**
   * `prisma.chamadaAlunos`: Exposes CRUD operations for the **ChamadaAlunos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChamadaAlunos
    * const chamadaAlunos = await prisma.chamadaAlunos.findMany()
    * ```
    */
  get chamadaAlunos(): Prisma.ChamadaAlunosDelegate<ExtArgs>;

  /**
   * `prisma.semestreProfessorDisciplinas`: Exposes CRUD operations for the **SemestreProfessorDisciplinas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SemestreProfessorDisciplinas
    * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.findMany()
    * ```
    */
  get semestreProfessorDisciplinas(): Prisma.SemestreProfessorDisciplinasDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.0
   * Query Engine version: 08713a93b99d58f31485621c634b04983ae01d95
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Semestre: 'Semestre',
    Curso: 'Curso',
    Disciplina: 'Disciplina',
    Turma: 'Turma',
    TurmaDisciplinas: 'TurmaDisciplinas',
    TurmaAlunos: 'TurmaAlunos',
    Chamada: 'Chamada',
    ChamadaAlunos: 'ChamadaAlunos',
    SemestreProfessorDisciplinas: 'SemestreProfessorDisciplinas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "semestre" | "curso" | "disciplina" | "turma" | "turmaDisciplinas" | "turmaAlunos" | "chamada" | "chamadaAlunos" | "semestreProfessorDisciplinas"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Semestre: {
        payload: Prisma.$SemestrePayload<ExtArgs>
        fields: Prisma.SemestreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SemestreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SemestreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload>
          }
          findFirst: {
            args: Prisma.SemestreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SemestreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload>
          }
          findMany: {
            args: Prisma.SemestreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload>[]
          }
          create: {
            args: Prisma.SemestreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload>
          }
          createMany: {
            args: Prisma.SemestreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SemestreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload>[]
          }
          delete: {
            args: Prisma.SemestreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload>
          }
          update: {
            args: Prisma.SemestreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload>
          }
          deleteMany: {
            args: Prisma.SemestreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SemestreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SemestreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestrePayload>
          }
          aggregate: {
            args: Prisma.SemestreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSemestre>
          }
          groupBy: {
            args: Prisma.SemestreGroupByArgs<ExtArgs>
            result: $Utils.Optional<SemestreGroupByOutputType>[]
          }
          count: {
            args: Prisma.SemestreCountArgs<ExtArgs>
            result: $Utils.Optional<SemestreCountAggregateOutputType> | number
          }
        }
      }
      Curso: {
        payload: Prisma.$CursoPayload<ExtArgs>
        fields: Prisma.CursoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CursoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CursoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          findFirst: {
            args: Prisma.CursoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CursoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          findMany: {
            args: Prisma.CursoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>[]
          }
          create: {
            args: Prisma.CursoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          createMany: {
            args: Prisma.CursoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CursoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>[]
          }
          delete: {
            args: Prisma.CursoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          update: {
            args: Prisma.CursoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          deleteMany: {
            args: Prisma.CursoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CursoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CursoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CursoPayload>
          }
          aggregate: {
            args: Prisma.CursoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCurso>
          }
          groupBy: {
            args: Prisma.CursoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CursoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CursoCountArgs<ExtArgs>
            result: $Utils.Optional<CursoCountAggregateOutputType> | number
          }
        }
      }
      Disciplina: {
        payload: Prisma.$DisciplinaPayload<ExtArgs>
        fields: Prisma.DisciplinaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisciplinaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisciplinaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload>
          }
          findFirst: {
            args: Prisma.DisciplinaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisciplinaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload>
          }
          findMany: {
            args: Prisma.DisciplinaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload>[]
          }
          create: {
            args: Prisma.DisciplinaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload>
          }
          createMany: {
            args: Prisma.DisciplinaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DisciplinaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload>[]
          }
          delete: {
            args: Prisma.DisciplinaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload>
          }
          update: {
            args: Prisma.DisciplinaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload>
          }
          deleteMany: {
            args: Prisma.DisciplinaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DisciplinaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DisciplinaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinaPayload>
          }
          aggregate: {
            args: Prisma.DisciplinaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDisciplina>
          }
          groupBy: {
            args: Prisma.DisciplinaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DisciplinaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisciplinaCountArgs<ExtArgs>
            result: $Utils.Optional<DisciplinaCountAggregateOutputType> | number
          }
        }
      }
      Turma: {
        payload: Prisma.$TurmaPayload<ExtArgs>
        fields: Prisma.TurmaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurmaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurmaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          findFirst: {
            args: Prisma.TurmaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurmaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          findMany: {
            args: Prisma.TurmaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>[]
          }
          create: {
            args: Prisma.TurmaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          createMany: {
            args: Prisma.TurmaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TurmaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>[]
          }
          delete: {
            args: Prisma.TurmaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          update: {
            args: Prisma.TurmaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          deleteMany: {
            args: Prisma.TurmaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TurmaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TurmaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaPayload>
          }
          aggregate: {
            args: Prisma.TurmaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTurma>
          }
          groupBy: {
            args: Prisma.TurmaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TurmaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurmaCountArgs<ExtArgs>
            result: $Utils.Optional<TurmaCountAggregateOutputType> | number
          }
        }
      }
      TurmaDisciplinas: {
        payload: Prisma.$TurmaDisciplinasPayload<ExtArgs>
        fields: Prisma.TurmaDisciplinasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurmaDisciplinasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurmaDisciplinasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload>
          }
          findFirst: {
            args: Prisma.TurmaDisciplinasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurmaDisciplinasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload>
          }
          findMany: {
            args: Prisma.TurmaDisciplinasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload>[]
          }
          create: {
            args: Prisma.TurmaDisciplinasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload>
          }
          createMany: {
            args: Prisma.TurmaDisciplinasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TurmaDisciplinasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload>[]
          }
          delete: {
            args: Prisma.TurmaDisciplinasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload>
          }
          update: {
            args: Prisma.TurmaDisciplinasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload>
          }
          deleteMany: {
            args: Prisma.TurmaDisciplinasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TurmaDisciplinasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TurmaDisciplinasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaDisciplinasPayload>
          }
          aggregate: {
            args: Prisma.TurmaDisciplinasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTurmaDisciplinas>
          }
          groupBy: {
            args: Prisma.TurmaDisciplinasGroupByArgs<ExtArgs>
            result: $Utils.Optional<TurmaDisciplinasGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurmaDisciplinasCountArgs<ExtArgs>
            result: $Utils.Optional<TurmaDisciplinasCountAggregateOutputType> | number
          }
        }
      }
      TurmaAlunos: {
        payload: Prisma.$TurmaAlunosPayload<ExtArgs>
        fields: Prisma.TurmaAlunosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurmaAlunosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurmaAlunosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload>
          }
          findFirst: {
            args: Prisma.TurmaAlunosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurmaAlunosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload>
          }
          findMany: {
            args: Prisma.TurmaAlunosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload>[]
          }
          create: {
            args: Prisma.TurmaAlunosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload>
          }
          createMany: {
            args: Prisma.TurmaAlunosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TurmaAlunosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload>[]
          }
          delete: {
            args: Prisma.TurmaAlunosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload>
          }
          update: {
            args: Prisma.TurmaAlunosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload>
          }
          deleteMany: {
            args: Prisma.TurmaAlunosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TurmaAlunosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TurmaAlunosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurmaAlunosPayload>
          }
          aggregate: {
            args: Prisma.TurmaAlunosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTurmaAlunos>
          }
          groupBy: {
            args: Prisma.TurmaAlunosGroupByArgs<ExtArgs>
            result: $Utils.Optional<TurmaAlunosGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurmaAlunosCountArgs<ExtArgs>
            result: $Utils.Optional<TurmaAlunosCountAggregateOutputType> | number
          }
        }
      }
      Chamada: {
        payload: Prisma.$ChamadaPayload<ExtArgs>
        fields: Prisma.ChamadaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChamadaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChamadaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload>
          }
          findFirst: {
            args: Prisma.ChamadaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChamadaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload>
          }
          findMany: {
            args: Prisma.ChamadaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload>[]
          }
          create: {
            args: Prisma.ChamadaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload>
          }
          createMany: {
            args: Prisma.ChamadaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChamadaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload>[]
          }
          delete: {
            args: Prisma.ChamadaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload>
          }
          update: {
            args: Prisma.ChamadaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload>
          }
          deleteMany: {
            args: Prisma.ChamadaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChamadaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChamadaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaPayload>
          }
          aggregate: {
            args: Prisma.ChamadaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChamada>
          }
          groupBy: {
            args: Prisma.ChamadaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChamadaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChamadaCountArgs<ExtArgs>
            result: $Utils.Optional<ChamadaCountAggregateOutputType> | number
          }
        }
      }
      ChamadaAlunos: {
        payload: Prisma.$ChamadaAlunosPayload<ExtArgs>
        fields: Prisma.ChamadaAlunosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChamadaAlunosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChamadaAlunosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload>
          }
          findFirst: {
            args: Prisma.ChamadaAlunosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChamadaAlunosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload>
          }
          findMany: {
            args: Prisma.ChamadaAlunosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload>[]
          }
          create: {
            args: Prisma.ChamadaAlunosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload>
          }
          createMany: {
            args: Prisma.ChamadaAlunosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChamadaAlunosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload>[]
          }
          delete: {
            args: Prisma.ChamadaAlunosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload>
          }
          update: {
            args: Prisma.ChamadaAlunosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload>
          }
          deleteMany: {
            args: Prisma.ChamadaAlunosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChamadaAlunosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChamadaAlunosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChamadaAlunosPayload>
          }
          aggregate: {
            args: Prisma.ChamadaAlunosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChamadaAlunos>
          }
          groupBy: {
            args: Prisma.ChamadaAlunosGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChamadaAlunosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChamadaAlunosCountArgs<ExtArgs>
            result: $Utils.Optional<ChamadaAlunosCountAggregateOutputType> | number
          }
        }
      }
      SemestreProfessorDisciplinas: {
        payload: Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>
        fields: Prisma.SemestreProfessorDisciplinasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SemestreProfessorDisciplinasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SemestreProfessorDisciplinasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload>
          }
          findFirst: {
            args: Prisma.SemestreProfessorDisciplinasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SemestreProfessorDisciplinasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload>
          }
          findMany: {
            args: Prisma.SemestreProfessorDisciplinasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload>[]
          }
          create: {
            args: Prisma.SemestreProfessorDisciplinasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload>
          }
          createMany: {
            args: Prisma.SemestreProfessorDisciplinasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SemestreProfessorDisciplinasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload>[]
          }
          delete: {
            args: Prisma.SemestreProfessorDisciplinasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload>
          }
          update: {
            args: Prisma.SemestreProfessorDisciplinasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload>
          }
          deleteMany: {
            args: Prisma.SemestreProfessorDisciplinasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SemestreProfessorDisciplinasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SemestreProfessorDisciplinasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SemestreProfessorDisciplinasPayload>
          }
          aggregate: {
            args: Prisma.SemestreProfessorDisciplinasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSemestreProfessorDisciplinas>
          }
          groupBy: {
            args: Prisma.SemestreProfessorDisciplinasGroupByArgs<ExtArgs>
            result: $Utils.Optional<SemestreProfessorDisciplinasGroupByOutputType>[]
          }
          count: {
            args: Prisma.SemestreProfessorDisciplinasCountArgs<ExtArgs>
            result: $Utils.Optional<SemestreProfessorDisciplinasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    TurmaAluno: number
    ChamadaProfessor: number
    ChamadaAluno: number
    SemestreDisciplinaProfessor: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TurmaAluno?: boolean | UsuarioCountOutputTypeCountTurmaAlunoArgs
    ChamadaProfessor?: boolean | UsuarioCountOutputTypeCountChamadaProfessorArgs
    ChamadaAluno?: boolean | UsuarioCountOutputTypeCountChamadaAlunoArgs
    SemestreDisciplinaProfessor?: boolean | UsuarioCountOutputTypeCountSemestreDisciplinaProfessorArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountTurmaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaAlunosWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountChamadaProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChamadaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountChamadaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChamadaAlunosWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountSemestreDisciplinaProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SemestreProfessorDisciplinasWhereInput
  }


  /**
   * Count Type SemestreCountOutputType
   */

  export type SemestreCountOutputType = {
    TurmaDisciplinas: number
    Chamada: number
    SemestreDisciplinaProfessor: number
  }

  export type SemestreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TurmaDisciplinas?: boolean | SemestreCountOutputTypeCountTurmaDisciplinasArgs
    Chamada?: boolean | SemestreCountOutputTypeCountChamadaArgs
    SemestreDisciplinaProfessor?: boolean | SemestreCountOutputTypeCountSemestreDisciplinaProfessorArgs
  }

  // Custom InputTypes
  /**
   * SemestreCountOutputType without action
   */
  export type SemestreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreCountOutputType
     */
    select?: SemestreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SemestreCountOutputType without action
   */
  export type SemestreCountOutputTypeCountTurmaDisciplinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaDisciplinasWhereInput
  }

  /**
   * SemestreCountOutputType without action
   */
  export type SemestreCountOutputTypeCountChamadaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChamadaWhereInput
  }

  /**
   * SemestreCountOutputType without action
   */
  export type SemestreCountOutputTypeCountSemestreDisciplinaProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SemestreProfessorDisciplinasWhereInput
  }


  /**
   * Count Type CursoCountOutputType
   */

  export type CursoCountOutputType = {
    Disciplina: number
    Turma: number
  }

  export type CursoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Disciplina?: boolean | CursoCountOutputTypeCountDisciplinaArgs
    Turma?: boolean | CursoCountOutputTypeCountTurmaArgs
  }

  // Custom InputTypes
  /**
   * CursoCountOutputType without action
   */
  export type CursoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CursoCountOutputType
     */
    select?: CursoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CursoCountOutputType without action
   */
  export type CursoCountOutputTypeCountDisciplinaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplinaWhereInput
  }

  /**
   * CursoCountOutputType without action
   */
  export type CursoCountOutputTypeCountTurmaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaWhereInput
  }


  /**
   * Count Type DisciplinaCountOutputType
   */

  export type DisciplinaCountOutputType = {
    TurmaDisciplinas: number
    Chamada: number
    SemestreDisciplinaProfessor: number
  }

  export type DisciplinaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TurmaDisciplinas?: boolean | DisciplinaCountOutputTypeCountTurmaDisciplinasArgs
    Chamada?: boolean | DisciplinaCountOutputTypeCountChamadaArgs
    SemestreDisciplinaProfessor?: boolean | DisciplinaCountOutputTypeCountSemestreDisciplinaProfessorArgs
  }

  // Custom InputTypes
  /**
   * DisciplinaCountOutputType without action
   */
  export type DisciplinaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinaCountOutputType
     */
    select?: DisciplinaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DisciplinaCountOutputType without action
   */
  export type DisciplinaCountOutputTypeCountTurmaDisciplinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaDisciplinasWhereInput
  }

  /**
   * DisciplinaCountOutputType without action
   */
  export type DisciplinaCountOutputTypeCountChamadaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChamadaWhereInput
  }

  /**
   * DisciplinaCountOutputType without action
   */
  export type DisciplinaCountOutputTypeCountSemestreDisciplinaProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SemestreProfessorDisciplinasWhereInput
  }


  /**
   * Count Type TurmaCountOutputType
   */

  export type TurmaCountOutputType = {
    TurmaDisciplinas: number
    TurmaAluno: number
  }

  export type TurmaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TurmaDisciplinas?: boolean | TurmaCountOutputTypeCountTurmaDisciplinasArgs
    TurmaAluno?: boolean | TurmaCountOutputTypeCountTurmaAlunoArgs
  }

  // Custom InputTypes
  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaCountOutputType
     */
    select?: TurmaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeCountTurmaDisciplinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaDisciplinasWhereInput
  }

  /**
   * TurmaCountOutputType without action
   */
  export type TurmaCountOutputTypeCountTurmaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaAlunosWhereInput
  }


  /**
   * Count Type ChamadaCountOutputType
   */

  export type ChamadaCountOutputType = {
    ChamadaAluno: number
  }

  export type ChamadaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ChamadaAluno?: boolean | ChamadaCountOutputTypeCountChamadaAlunoArgs
  }

  // Custom InputTypes
  /**
   * ChamadaCountOutputType without action
   */
  export type ChamadaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaCountOutputType
     */
    select?: ChamadaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChamadaCountOutputType without action
   */
  export type ChamadaCountOutputTypeCountChamadaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChamadaAlunosWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
    tipo: number | null
    status: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
    tipo: number | null
    status: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    ra: string | null
    cpf: string | null
    senha: string | null
    email: string | null
    imei: string | null
    tipo: number | null
    status: number | null
    data_cadastro: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    ra: string | null
    cpf: string | null
    senha: string | null
    email: string | null
    imei: string | null
    tipo: number | null
    status: number | null
    data_cadastro: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    ra: number
    cpf: number
    senha: number
    email: number
    imei: number
    tipo: number
    status: number
    data_cadastro: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
    tipo?: true
    status?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
    tipo?: true
    status?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    ra?: true
    cpf?: true
    senha?: true
    email?: true
    imei?: true
    tipo?: true
    status?: true
    data_cadastro?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    ra?: true
    cpf?: true
    senha?: true
    email?: true
    imei?: true
    tipo?: true
    status?: true
    data_cadastro?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    ra?: true
    cpf?: true
    senha?: true
    email?: true
    imei?: true
    tipo?: true
    status?: true
    data_cadastro?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    ra: string | null
    cpf: string
    senha: string
    email: string
    imei: string | null
    tipo: number
    status: number
    data_cadastro: Date
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    ra?: boolean
    cpf?: boolean
    senha?: boolean
    email?: boolean
    imei?: boolean
    tipo?: boolean
    status?: boolean
    data_cadastro?: boolean
    TurmaAluno?: boolean | Usuario$TurmaAlunoArgs<ExtArgs>
    ChamadaProfessor?: boolean | Usuario$ChamadaProfessorArgs<ExtArgs>
    ChamadaAluno?: boolean | Usuario$ChamadaAlunoArgs<ExtArgs>
    SemestreDisciplinaProfessor?: boolean | Usuario$SemestreDisciplinaProfessorArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    ra?: boolean
    cpf?: boolean
    senha?: boolean
    email?: boolean
    imei?: boolean
    tipo?: boolean
    status?: boolean
    data_cadastro?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    ra?: boolean
    cpf?: boolean
    senha?: boolean
    email?: boolean
    imei?: boolean
    tipo?: boolean
    status?: boolean
    data_cadastro?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TurmaAluno?: boolean | Usuario$TurmaAlunoArgs<ExtArgs>
    ChamadaProfessor?: boolean | Usuario$ChamadaProfessorArgs<ExtArgs>
    ChamadaAluno?: boolean | Usuario$ChamadaAlunoArgs<ExtArgs>
    SemestreDisciplinaProfessor?: boolean | Usuario$SemestreDisciplinaProfessorArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      TurmaAluno: Prisma.$TurmaAlunosPayload<ExtArgs>[]
      ChamadaProfessor: Prisma.$ChamadaPayload<ExtArgs>[]
      ChamadaAluno: Prisma.$ChamadaAlunosPayload<ExtArgs>[]
      SemestreDisciplinaProfessor: Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      ra: string | null
      cpf: string
      senha: string
      email: string
      imei: string | null
      tipo: number
      status: number
      data_cadastro: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    TurmaAluno<T extends Usuario$TurmaAlunoArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$TurmaAlunoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "findMany"> | Null>
    ChamadaProfessor<T extends Usuario$ChamadaProfessorArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$ChamadaProfessorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findMany"> | Null>
    ChamadaAluno<T extends Usuario$ChamadaAlunoArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$ChamadaAlunoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "findMany"> | Null>
    SemestreDisciplinaProfessor<T extends Usuario$SemestreDisciplinaProfessorArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$SemestreDisciplinaProfessorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly ra: FieldRef<"Usuario", 'String'>
    readonly cpf: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly imei: FieldRef<"Usuario", 'String'>
    readonly tipo: FieldRef<"Usuario", 'Int'>
    readonly status: FieldRef<"Usuario", 'Int'>
    readonly data_cadastro: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.TurmaAluno
   */
  export type Usuario$TurmaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    where?: TurmaAlunosWhereInput
    orderBy?: TurmaAlunosOrderByWithRelationInput | TurmaAlunosOrderByWithRelationInput[]
    cursor?: TurmaAlunosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaAlunosScalarFieldEnum | TurmaAlunosScalarFieldEnum[]
  }

  /**
   * Usuario.ChamadaProfessor
   */
  export type Usuario$ChamadaProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    where?: ChamadaWhereInput
    orderBy?: ChamadaOrderByWithRelationInput | ChamadaOrderByWithRelationInput[]
    cursor?: ChamadaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChamadaScalarFieldEnum | ChamadaScalarFieldEnum[]
  }

  /**
   * Usuario.ChamadaAluno
   */
  export type Usuario$ChamadaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    where?: ChamadaAlunosWhereInput
    orderBy?: ChamadaAlunosOrderByWithRelationInput | ChamadaAlunosOrderByWithRelationInput[]
    cursor?: ChamadaAlunosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChamadaAlunosScalarFieldEnum | ChamadaAlunosScalarFieldEnum[]
  }

  /**
   * Usuario.SemestreDisciplinaProfessor
   */
  export type Usuario$SemestreDisciplinaProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    where?: SemestreProfessorDisciplinasWhereInput
    orderBy?: SemestreProfessorDisciplinasOrderByWithRelationInput | SemestreProfessorDisciplinasOrderByWithRelationInput[]
    cursor?: SemestreProfessorDisciplinasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SemestreProfessorDisciplinasScalarFieldEnum | SemestreProfessorDisciplinasScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Semestre
   */

  export type AggregateSemestre = {
    _count: SemestreCountAggregateOutputType | null
    _avg: SemestreAvgAggregateOutputType | null
    _sum: SemestreSumAggregateOutputType | null
    _min: SemestreMinAggregateOutputType | null
    _max: SemestreMaxAggregateOutputType | null
  }

  export type SemestreAvgAggregateOutputType = {
    id: number | null
    padrao: number | null
  }

  export type SemestreSumAggregateOutputType = {
    id: number | null
    padrao: number | null
  }

  export type SemestreMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    data_inicio: Date | null
    data_final: Date | null
    padrao: number | null
  }

  export type SemestreMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    data_inicio: Date | null
    data_final: Date | null
    padrao: number | null
  }

  export type SemestreCountAggregateOutputType = {
    id: number
    descricao: number
    data_inicio: number
    data_final: number
    padrao: number
    _all: number
  }


  export type SemestreAvgAggregateInputType = {
    id?: true
    padrao?: true
  }

  export type SemestreSumAggregateInputType = {
    id?: true
    padrao?: true
  }

  export type SemestreMinAggregateInputType = {
    id?: true
    descricao?: true
    data_inicio?: true
    data_final?: true
    padrao?: true
  }

  export type SemestreMaxAggregateInputType = {
    id?: true
    descricao?: true
    data_inicio?: true
    data_final?: true
    padrao?: true
  }

  export type SemestreCountAggregateInputType = {
    id?: true
    descricao?: true
    data_inicio?: true
    data_final?: true
    padrao?: true
    _all?: true
  }

  export type SemestreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Semestre to aggregate.
     */
    where?: SemestreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Semestres to fetch.
     */
    orderBy?: SemestreOrderByWithRelationInput | SemestreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SemestreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Semestres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Semestres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Semestres
    **/
    _count?: true | SemestreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SemestreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SemestreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SemestreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SemestreMaxAggregateInputType
  }

  export type GetSemestreAggregateType<T extends SemestreAggregateArgs> = {
        [P in keyof T & keyof AggregateSemestre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSemestre[P]>
      : GetScalarType<T[P], AggregateSemestre[P]>
  }




  export type SemestreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SemestreWhereInput
    orderBy?: SemestreOrderByWithAggregationInput | SemestreOrderByWithAggregationInput[]
    by: SemestreScalarFieldEnum[] | SemestreScalarFieldEnum
    having?: SemestreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SemestreCountAggregateInputType | true
    _avg?: SemestreAvgAggregateInputType
    _sum?: SemestreSumAggregateInputType
    _min?: SemestreMinAggregateInputType
    _max?: SemestreMaxAggregateInputType
  }

  export type SemestreGroupByOutputType = {
    id: number
    descricao: string
    data_inicio: Date | null
    data_final: Date | null
    padrao: number
    _count: SemestreCountAggregateOutputType | null
    _avg: SemestreAvgAggregateOutputType | null
    _sum: SemestreSumAggregateOutputType | null
    _min: SemestreMinAggregateOutputType | null
    _max: SemestreMaxAggregateOutputType | null
  }

  type GetSemestreGroupByPayload<T extends SemestreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SemestreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SemestreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SemestreGroupByOutputType[P]>
            : GetScalarType<T[P], SemestreGroupByOutputType[P]>
        }
      >
    >


  export type SemestreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    data_inicio?: boolean
    data_final?: boolean
    padrao?: boolean
    TurmaDisciplinas?: boolean | Semestre$TurmaDisciplinasArgs<ExtArgs>
    Chamada?: boolean | Semestre$ChamadaArgs<ExtArgs>
    SemestreDisciplinaProfessor?: boolean | Semestre$SemestreDisciplinaProfessorArgs<ExtArgs>
    _count?: boolean | SemestreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["semestre"]>

  export type SemestreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    data_inicio?: boolean
    data_final?: boolean
    padrao?: boolean
  }, ExtArgs["result"]["semestre"]>

  export type SemestreSelectScalar = {
    id?: boolean
    descricao?: boolean
    data_inicio?: boolean
    data_final?: boolean
    padrao?: boolean
  }

  export type SemestreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TurmaDisciplinas?: boolean | Semestre$TurmaDisciplinasArgs<ExtArgs>
    Chamada?: boolean | Semestre$ChamadaArgs<ExtArgs>
    SemestreDisciplinaProfessor?: boolean | Semestre$SemestreDisciplinaProfessorArgs<ExtArgs>
    _count?: boolean | SemestreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SemestreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SemestrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Semestre"
    objects: {
      TurmaDisciplinas: Prisma.$TurmaDisciplinasPayload<ExtArgs>[]
      Chamada: Prisma.$ChamadaPayload<ExtArgs>[]
      SemestreDisciplinaProfessor: Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
      data_inicio: Date | null
      data_final: Date | null
      padrao: number
    }, ExtArgs["result"]["semestre"]>
    composites: {}
  }

  type SemestreGetPayload<S extends boolean | null | undefined | SemestreDefaultArgs> = $Result.GetResult<Prisma.$SemestrePayload, S>

  type SemestreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SemestreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SemestreCountAggregateInputType | true
    }

  export interface SemestreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Semestre'], meta: { name: 'Semestre' } }
    /**
     * Find zero or one Semestre that matches the filter.
     * @param {SemestreFindUniqueArgs} args - Arguments to find a Semestre
     * @example
     * // Get one Semestre
     * const semestre = await prisma.semestre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SemestreFindUniqueArgs>(args: SelectSubset<T, SemestreFindUniqueArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Semestre that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SemestreFindUniqueOrThrowArgs} args - Arguments to find a Semestre
     * @example
     * // Get one Semestre
     * const semestre = await prisma.semestre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SemestreFindUniqueOrThrowArgs>(args: SelectSubset<T, SemestreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Semestre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreFindFirstArgs} args - Arguments to find a Semestre
     * @example
     * // Get one Semestre
     * const semestre = await prisma.semestre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SemestreFindFirstArgs>(args?: SelectSubset<T, SemestreFindFirstArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Semestre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreFindFirstOrThrowArgs} args - Arguments to find a Semestre
     * @example
     * // Get one Semestre
     * const semestre = await prisma.semestre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SemestreFindFirstOrThrowArgs>(args?: SelectSubset<T, SemestreFindFirstOrThrowArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Semestres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Semestres
     * const semestres = await prisma.semestre.findMany()
     * 
     * // Get first 10 Semestres
     * const semestres = await prisma.semestre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const semestreWithIdOnly = await prisma.semestre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SemestreFindManyArgs>(args?: SelectSubset<T, SemestreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Semestre.
     * @param {SemestreCreateArgs} args - Arguments to create a Semestre.
     * @example
     * // Create one Semestre
     * const Semestre = await prisma.semestre.create({
     *   data: {
     *     // ... data to create a Semestre
     *   }
     * })
     * 
     */
    create<T extends SemestreCreateArgs>(args: SelectSubset<T, SemestreCreateArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Semestres.
     * @param {SemestreCreateManyArgs} args - Arguments to create many Semestres.
     * @example
     * // Create many Semestres
     * const semestre = await prisma.semestre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SemestreCreateManyArgs>(args?: SelectSubset<T, SemestreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Semestres and returns the data saved in the database.
     * @param {SemestreCreateManyAndReturnArgs} args - Arguments to create many Semestres.
     * @example
     * // Create many Semestres
     * const semestre = await prisma.semestre.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Semestres and only return the `id`
     * const semestreWithIdOnly = await prisma.semestre.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SemestreCreateManyAndReturnArgs>(args?: SelectSubset<T, SemestreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Semestre.
     * @param {SemestreDeleteArgs} args - Arguments to delete one Semestre.
     * @example
     * // Delete one Semestre
     * const Semestre = await prisma.semestre.delete({
     *   where: {
     *     // ... filter to delete one Semestre
     *   }
     * })
     * 
     */
    delete<T extends SemestreDeleteArgs>(args: SelectSubset<T, SemestreDeleteArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Semestre.
     * @param {SemestreUpdateArgs} args - Arguments to update one Semestre.
     * @example
     * // Update one Semestre
     * const semestre = await prisma.semestre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SemestreUpdateArgs>(args: SelectSubset<T, SemestreUpdateArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Semestres.
     * @param {SemestreDeleteManyArgs} args - Arguments to filter Semestres to delete.
     * @example
     * // Delete a few Semestres
     * const { count } = await prisma.semestre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SemestreDeleteManyArgs>(args?: SelectSubset<T, SemestreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Semestres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Semestres
     * const semestre = await prisma.semestre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SemestreUpdateManyArgs>(args: SelectSubset<T, SemestreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Semestre.
     * @param {SemestreUpsertArgs} args - Arguments to update or create a Semestre.
     * @example
     * // Update or create a Semestre
     * const semestre = await prisma.semestre.upsert({
     *   create: {
     *     // ... data to create a Semestre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Semestre we want to update
     *   }
     * })
     */
    upsert<T extends SemestreUpsertArgs>(args: SelectSubset<T, SemestreUpsertArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Semestres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreCountArgs} args - Arguments to filter Semestres to count.
     * @example
     * // Count the number of Semestres
     * const count = await prisma.semestre.count({
     *   where: {
     *     // ... the filter for the Semestres we want to count
     *   }
     * })
    **/
    count<T extends SemestreCountArgs>(
      args?: Subset<T, SemestreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SemestreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Semestre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SemestreAggregateArgs>(args: Subset<T, SemestreAggregateArgs>): Prisma.PrismaPromise<GetSemestreAggregateType<T>>

    /**
     * Group by Semestre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SemestreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SemestreGroupByArgs['orderBy'] }
        : { orderBy?: SemestreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SemestreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSemestreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Semestre model
   */
  readonly fields: SemestreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Semestre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SemestreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    TurmaDisciplinas<T extends Semestre$TurmaDisciplinasArgs<ExtArgs> = {}>(args?: Subset<T, Semestre$TurmaDisciplinasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "findMany"> | Null>
    Chamada<T extends Semestre$ChamadaArgs<ExtArgs> = {}>(args?: Subset<T, Semestre$ChamadaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findMany"> | Null>
    SemestreDisciplinaProfessor<T extends Semestre$SemestreDisciplinaProfessorArgs<ExtArgs> = {}>(args?: Subset<T, Semestre$SemestreDisciplinaProfessorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Semestre model
   */ 
  interface SemestreFieldRefs {
    readonly id: FieldRef<"Semestre", 'Int'>
    readonly descricao: FieldRef<"Semestre", 'String'>
    readonly data_inicio: FieldRef<"Semestre", 'DateTime'>
    readonly data_final: FieldRef<"Semestre", 'DateTime'>
    readonly padrao: FieldRef<"Semestre", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Semestre findUnique
   */
  export type SemestreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * Filter, which Semestre to fetch.
     */
    where: SemestreWhereUniqueInput
  }

  /**
   * Semestre findUniqueOrThrow
   */
  export type SemestreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * Filter, which Semestre to fetch.
     */
    where: SemestreWhereUniqueInput
  }

  /**
   * Semestre findFirst
   */
  export type SemestreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * Filter, which Semestre to fetch.
     */
    where?: SemestreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Semestres to fetch.
     */
    orderBy?: SemestreOrderByWithRelationInput | SemestreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Semestres.
     */
    cursor?: SemestreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Semestres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Semestres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Semestres.
     */
    distinct?: SemestreScalarFieldEnum | SemestreScalarFieldEnum[]
  }

  /**
   * Semestre findFirstOrThrow
   */
  export type SemestreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * Filter, which Semestre to fetch.
     */
    where?: SemestreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Semestres to fetch.
     */
    orderBy?: SemestreOrderByWithRelationInput | SemestreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Semestres.
     */
    cursor?: SemestreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Semestres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Semestres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Semestres.
     */
    distinct?: SemestreScalarFieldEnum | SemestreScalarFieldEnum[]
  }

  /**
   * Semestre findMany
   */
  export type SemestreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * Filter, which Semestres to fetch.
     */
    where?: SemestreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Semestres to fetch.
     */
    orderBy?: SemestreOrderByWithRelationInput | SemestreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Semestres.
     */
    cursor?: SemestreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Semestres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Semestres.
     */
    skip?: number
    distinct?: SemestreScalarFieldEnum | SemestreScalarFieldEnum[]
  }

  /**
   * Semestre create
   */
  export type SemestreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * The data needed to create a Semestre.
     */
    data: XOR<SemestreCreateInput, SemestreUncheckedCreateInput>
  }

  /**
   * Semestre createMany
   */
  export type SemestreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Semestres.
     */
    data: SemestreCreateManyInput | SemestreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Semestre createManyAndReturn
   */
  export type SemestreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Semestres.
     */
    data: SemestreCreateManyInput | SemestreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Semestre update
   */
  export type SemestreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * The data needed to update a Semestre.
     */
    data: XOR<SemestreUpdateInput, SemestreUncheckedUpdateInput>
    /**
     * Choose, which Semestre to update.
     */
    where: SemestreWhereUniqueInput
  }

  /**
   * Semestre updateMany
   */
  export type SemestreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Semestres.
     */
    data: XOR<SemestreUpdateManyMutationInput, SemestreUncheckedUpdateManyInput>
    /**
     * Filter which Semestres to update
     */
    where?: SemestreWhereInput
  }

  /**
   * Semestre upsert
   */
  export type SemestreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * The filter to search for the Semestre to update in case it exists.
     */
    where: SemestreWhereUniqueInput
    /**
     * In case the Semestre found by the `where` argument doesn't exist, create a new Semestre with this data.
     */
    create: XOR<SemestreCreateInput, SemestreUncheckedCreateInput>
    /**
     * In case the Semestre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SemestreUpdateInput, SemestreUncheckedUpdateInput>
  }

  /**
   * Semestre delete
   */
  export type SemestreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
    /**
     * Filter which Semestre to delete.
     */
    where: SemestreWhereUniqueInput
  }

  /**
   * Semestre deleteMany
   */
  export type SemestreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Semestres to delete
     */
    where?: SemestreWhereInput
  }

  /**
   * Semestre.TurmaDisciplinas
   */
  export type Semestre$TurmaDisciplinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    where?: TurmaDisciplinasWhereInput
    orderBy?: TurmaDisciplinasOrderByWithRelationInput | TurmaDisciplinasOrderByWithRelationInput[]
    cursor?: TurmaDisciplinasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaDisciplinasScalarFieldEnum | TurmaDisciplinasScalarFieldEnum[]
  }

  /**
   * Semestre.Chamada
   */
  export type Semestre$ChamadaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    where?: ChamadaWhereInput
    orderBy?: ChamadaOrderByWithRelationInput | ChamadaOrderByWithRelationInput[]
    cursor?: ChamadaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChamadaScalarFieldEnum | ChamadaScalarFieldEnum[]
  }

  /**
   * Semestre.SemestreDisciplinaProfessor
   */
  export type Semestre$SemestreDisciplinaProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    where?: SemestreProfessorDisciplinasWhereInput
    orderBy?: SemestreProfessorDisciplinasOrderByWithRelationInput | SemestreProfessorDisciplinasOrderByWithRelationInput[]
    cursor?: SemestreProfessorDisciplinasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SemestreProfessorDisciplinasScalarFieldEnum | SemestreProfessorDisciplinasScalarFieldEnum[]
  }

  /**
   * Semestre without action
   */
  export type SemestreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Semestre
     */
    select?: SemestreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreInclude<ExtArgs> | null
  }


  /**
   * Model Curso
   */

  export type AggregateCurso = {
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  export type CursoAvgAggregateOutputType = {
    id: number | null
  }

  export type CursoSumAggregateOutputType = {
    id: number | null
  }

  export type CursoMinAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type CursoMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
  }

  export type CursoCountAggregateOutputType = {
    id: number
    descricao: number
    _all: number
  }


  export type CursoAvgAggregateInputType = {
    id?: true
  }

  export type CursoSumAggregateInputType = {
    id?: true
  }

  export type CursoMinAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type CursoMaxAggregateInputType = {
    id?: true
    descricao?: true
  }

  export type CursoCountAggregateInputType = {
    id?: true
    descricao?: true
    _all?: true
  }

  export type CursoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Curso to aggregate.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cursos
    **/
    _count?: true | CursoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CursoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CursoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursoMaxAggregateInputType
  }

  export type GetCursoAggregateType<T extends CursoAggregateArgs> = {
        [P in keyof T & keyof AggregateCurso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurso[P]>
      : GetScalarType<T[P], AggregateCurso[P]>
  }




  export type CursoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CursoWhereInput
    orderBy?: CursoOrderByWithAggregationInput | CursoOrderByWithAggregationInput[]
    by: CursoScalarFieldEnum[] | CursoScalarFieldEnum
    having?: CursoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursoCountAggregateInputType | true
    _avg?: CursoAvgAggregateInputType
    _sum?: CursoSumAggregateInputType
    _min?: CursoMinAggregateInputType
    _max?: CursoMaxAggregateInputType
  }

  export type CursoGroupByOutputType = {
    id: number
    descricao: string
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  type GetCursoGroupByPayload<T extends CursoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CursoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CursoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CursoGroupByOutputType[P]>
            : GetScalarType<T[P], CursoGroupByOutputType[P]>
        }
      >
    >


  export type CursoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    Disciplina?: boolean | Curso$DisciplinaArgs<ExtArgs>
    Turma?: boolean | Curso$TurmaArgs<ExtArgs>
    _count?: boolean | CursoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["curso"]>

  export type CursoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["curso"]>

  export type CursoSelectScalar = {
    id?: boolean
    descricao?: boolean
  }

  export type CursoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Disciplina?: boolean | Curso$DisciplinaArgs<ExtArgs>
    Turma?: boolean | Curso$TurmaArgs<ExtArgs>
    _count?: boolean | CursoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CursoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CursoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Curso"
    objects: {
      Disciplina: Prisma.$DisciplinaPayload<ExtArgs>[]
      Turma: Prisma.$TurmaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
    }, ExtArgs["result"]["curso"]>
    composites: {}
  }

  type CursoGetPayload<S extends boolean | null | undefined | CursoDefaultArgs> = $Result.GetResult<Prisma.$CursoPayload, S>

  type CursoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CursoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CursoCountAggregateInputType | true
    }

  export interface CursoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Curso'], meta: { name: 'Curso' } }
    /**
     * Find zero or one Curso that matches the filter.
     * @param {CursoFindUniqueArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CursoFindUniqueArgs>(args: SelectSubset<T, CursoFindUniqueArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Curso that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CursoFindUniqueOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CursoFindUniqueOrThrowArgs>(args: SelectSubset<T, CursoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Curso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindFirstArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CursoFindFirstArgs>(args?: SelectSubset<T, CursoFindFirstArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Curso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindFirstOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CursoFindFirstOrThrowArgs>(args?: SelectSubset<T, CursoFindFirstOrThrowArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cursos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cursos
     * const cursos = await prisma.curso.findMany()
     * 
     * // Get first 10 Cursos
     * const cursos = await prisma.curso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cursoWithIdOnly = await prisma.curso.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CursoFindManyArgs>(args?: SelectSubset<T, CursoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Curso.
     * @param {CursoCreateArgs} args - Arguments to create a Curso.
     * @example
     * // Create one Curso
     * const Curso = await prisma.curso.create({
     *   data: {
     *     // ... data to create a Curso
     *   }
     * })
     * 
     */
    create<T extends CursoCreateArgs>(args: SelectSubset<T, CursoCreateArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cursos.
     * @param {CursoCreateManyArgs} args - Arguments to create many Cursos.
     * @example
     * // Create many Cursos
     * const curso = await prisma.curso.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CursoCreateManyArgs>(args?: SelectSubset<T, CursoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cursos and returns the data saved in the database.
     * @param {CursoCreateManyAndReturnArgs} args - Arguments to create many Cursos.
     * @example
     * // Create many Cursos
     * const curso = await prisma.curso.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cursos and only return the `id`
     * const cursoWithIdOnly = await prisma.curso.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CursoCreateManyAndReturnArgs>(args?: SelectSubset<T, CursoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Curso.
     * @param {CursoDeleteArgs} args - Arguments to delete one Curso.
     * @example
     * // Delete one Curso
     * const Curso = await prisma.curso.delete({
     *   where: {
     *     // ... filter to delete one Curso
     *   }
     * })
     * 
     */
    delete<T extends CursoDeleteArgs>(args: SelectSubset<T, CursoDeleteArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Curso.
     * @param {CursoUpdateArgs} args - Arguments to update one Curso.
     * @example
     * // Update one Curso
     * const curso = await prisma.curso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CursoUpdateArgs>(args: SelectSubset<T, CursoUpdateArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cursos.
     * @param {CursoDeleteManyArgs} args - Arguments to filter Cursos to delete.
     * @example
     * // Delete a few Cursos
     * const { count } = await prisma.curso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CursoDeleteManyArgs>(args?: SelectSubset<T, CursoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cursos
     * const curso = await prisma.curso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CursoUpdateManyArgs>(args: SelectSubset<T, CursoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Curso.
     * @param {CursoUpsertArgs} args - Arguments to update or create a Curso.
     * @example
     * // Update or create a Curso
     * const curso = await prisma.curso.upsert({
     *   create: {
     *     // ... data to create a Curso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curso we want to update
     *   }
     * })
     */
    upsert<T extends CursoUpsertArgs>(args: SelectSubset<T, CursoUpsertArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoCountArgs} args - Arguments to filter Cursos to count.
     * @example
     * // Count the number of Cursos
     * const count = await prisma.curso.count({
     *   where: {
     *     // ... the filter for the Cursos we want to count
     *   }
     * })
    **/
    count<T extends CursoCountArgs>(
      args?: Subset<T, CursoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursoAggregateArgs>(args: Subset<T, CursoAggregateArgs>): Prisma.PrismaPromise<GetCursoAggregateType<T>>

    /**
     * Group by Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CursoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CursoGroupByArgs['orderBy'] }
        : { orderBy?: CursoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CursoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Curso model
   */
  readonly fields: CursoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Curso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CursoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Disciplina<T extends Curso$DisciplinaArgs<ExtArgs> = {}>(args?: Subset<T, Curso$DisciplinaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findMany"> | Null>
    Turma<T extends Curso$TurmaArgs<ExtArgs> = {}>(args?: Subset<T, Curso$TurmaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Curso model
   */ 
  interface CursoFieldRefs {
    readonly id: FieldRef<"Curso", 'Int'>
    readonly descricao: FieldRef<"Curso", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Curso findUnique
   */
  export type CursoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where: CursoWhereUniqueInput
  }

  /**
   * Curso findUniqueOrThrow
   */
  export type CursoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where: CursoWhereUniqueInput
  }

  /**
   * Curso findFirst
   */
  export type CursoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursos.
     */
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }

  /**
   * Curso findFirstOrThrow
   */
  export type CursoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Curso to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cursos.
     */
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }

  /**
   * Curso findMany
   */
  export type CursoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter, which Cursos to fetch.
     */
    where?: CursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cursos to fetch.
     */
    orderBy?: CursoOrderByWithRelationInput | CursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cursos.
     */
    cursor?: CursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cursos.
     */
    skip?: number
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }

  /**
   * Curso create
   */
  export type CursoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * The data needed to create a Curso.
     */
    data: XOR<CursoCreateInput, CursoUncheckedCreateInput>
  }

  /**
   * Curso createMany
   */
  export type CursoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cursos.
     */
    data: CursoCreateManyInput | CursoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Curso createManyAndReturn
   */
  export type CursoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cursos.
     */
    data: CursoCreateManyInput | CursoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Curso update
   */
  export type CursoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * The data needed to update a Curso.
     */
    data: XOR<CursoUpdateInput, CursoUncheckedUpdateInput>
    /**
     * Choose, which Curso to update.
     */
    where: CursoWhereUniqueInput
  }

  /**
   * Curso updateMany
   */
  export type CursoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cursos.
     */
    data: XOR<CursoUpdateManyMutationInput, CursoUncheckedUpdateManyInput>
    /**
     * Filter which Cursos to update
     */
    where?: CursoWhereInput
  }

  /**
   * Curso upsert
   */
  export type CursoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * The filter to search for the Curso to update in case it exists.
     */
    where: CursoWhereUniqueInput
    /**
     * In case the Curso found by the `where` argument doesn't exist, create a new Curso with this data.
     */
    create: XOR<CursoCreateInput, CursoUncheckedCreateInput>
    /**
     * In case the Curso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CursoUpdateInput, CursoUncheckedUpdateInput>
  }

  /**
   * Curso delete
   */
  export type CursoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
    /**
     * Filter which Curso to delete.
     */
    where: CursoWhereUniqueInput
  }

  /**
   * Curso deleteMany
   */
  export type CursoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cursos to delete
     */
    where?: CursoWhereInput
  }

  /**
   * Curso.Disciplina
   */
  export type Curso$DisciplinaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    where?: DisciplinaWhereInput
    orderBy?: DisciplinaOrderByWithRelationInput | DisciplinaOrderByWithRelationInput[]
    cursor?: DisciplinaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisciplinaScalarFieldEnum | DisciplinaScalarFieldEnum[]
  }

  /**
   * Curso.Turma
   */
  export type Curso$TurmaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    where?: TurmaWhereInput
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    cursor?: TurmaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * Curso without action
   */
  export type CursoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Curso
     */
    select?: CursoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CursoInclude<ExtArgs> | null
  }


  /**
   * Model Disciplina
   */

  export type AggregateDisciplina = {
    _count: DisciplinaCountAggregateOutputType | null
    _avg: DisciplinaAvgAggregateOutputType | null
    _sum: DisciplinaSumAggregateOutputType | null
    _min: DisciplinaMinAggregateOutputType | null
    _max: DisciplinaMaxAggregateOutputType | null
  }

  export type DisciplinaAvgAggregateOutputType = {
    id: number | null
    id_curso: number | null
    carga_horario: number | null
  }

  export type DisciplinaSumAggregateOutputType = {
    id: number | null
    id_curso: number | null
    carga_horario: number | null
  }

  export type DisciplinaMinAggregateOutputType = {
    id: number | null
    descricao: string | null
    id_curso: number | null
    carga_horario: number | null
  }

  export type DisciplinaMaxAggregateOutputType = {
    id: number | null
    descricao: string | null
    id_curso: number | null
    carga_horario: number | null
  }

  export type DisciplinaCountAggregateOutputType = {
    id: number
    descricao: number
    id_curso: number
    carga_horario: number
    _all: number
  }


  export type DisciplinaAvgAggregateInputType = {
    id?: true
    id_curso?: true
    carga_horario?: true
  }

  export type DisciplinaSumAggregateInputType = {
    id?: true
    id_curso?: true
    carga_horario?: true
  }

  export type DisciplinaMinAggregateInputType = {
    id?: true
    descricao?: true
    id_curso?: true
    carga_horario?: true
  }

  export type DisciplinaMaxAggregateInputType = {
    id?: true
    descricao?: true
    id_curso?: true
    carga_horario?: true
  }

  export type DisciplinaCountAggregateInputType = {
    id?: true
    descricao?: true
    id_curso?: true
    carga_horario?: true
    _all?: true
  }

  export type DisciplinaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Disciplina to aggregate.
     */
    where?: DisciplinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplinas to fetch.
     */
    orderBy?: DisciplinaOrderByWithRelationInput | DisciplinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisciplinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disciplinas
    **/
    _count?: true | DisciplinaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisciplinaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisciplinaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplinaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplinaMaxAggregateInputType
  }

  export type GetDisciplinaAggregateType<T extends DisciplinaAggregateArgs> = {
        [P in keyof T & keyof AggregateDisciplina]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisciplina[P]>
      : GetScalarType<T[P], AggregateDisciplina[P]>
  }




  export type DisciplinaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplinaWhereInput
    orderBy?: DisciplinaOrderByWithAggregationInput | DisciplinaOrderByWithAggregationInput[]
    by: DisciplinaScalarFieldEnum[] | DisciplinaScalarFieldEnum
    having?: DisciplinaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplinaCountAggregateInputType | true
    _avg?: DisciplinaAvgAggregateInputType
    _sum?: DisciplinaSumAggregateInputType
    _min?: DisciplinaMinAggregateInputType
    _max?: DisciplinaMaxAggregateInputType
  }

  export type DisciplinaGroupByOutputType = {
    id: number
    descricao: string
    id_curso: number
    carga_horario: number
    _count: DisciplinaCountAggregateOutputType | null
    _avg: DisciplinaAvgAggregateOutputType | null
    _sum: DisciplinaSumAggregateOutputType | null
    _min: DisciplinaMinAggregateOutputType | null
    _max: DisciplinaMaxAggregateOutputType | null
  }

  type GetDisciplinaGroupByPayload<T extends DisciplinaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisciplinaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplinaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplinaGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplinaGroupByOutputType[P]>
        }
      >
    >


  export type DisciplinaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    id_curso?: boolean
    carga_horario?: boolean
    Curso?: boolean | CursoDefaultArgs<ExtArgs>
    TurmaDisciplinas?: boolean | Disciplina$TurmaDisciplinasArgs<ExtArgs>
    Chamada?: boolean | Disciplina$ChamadaArgs<ExtArgs>
    SemestreDisciplinaProfessor?: boolean | Disciplina$SemestreDisciplinaProfessorArgs<ExtArgs>
    _count?: boolean | DisciplinaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disciplina"]>

  export type DisciplinaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    id_curso?: boolean
    carga_horario?: boolean
    Curso?: boolean | CursoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disciplina"]>

  export type DisciplinaSelectScalar = {
    id?: boolean
    descricao?: boolean
    id_curso?: boolean
    carga_horario?: boolean
  }

  export type DisciplinaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Curso?: boolean | CursoDefaultArgs<ExtArgs>
    TurmaDisciplinas?: boolean | Disciplina$TurmaDisciplinasArgs<ExtArgs>
    Chamada?: boolean | Disciplina$ChamadaArgs<ExtArgs>
    SemestreDisciplinaProfessor?: boolean | Disciplina$SemestreDisciplinaProfessorArgs<ExtArgs>
    _count?: boolean | DisciplinaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DisciplinaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Curso?: boolean | CursoDefaultArgs<ExtArgs>
  }

  export type $DisciplinaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Disciplina"
    objects: {
      Curso: Prisma.$CursoPayload<ExtArgs>
      TurmaDisciplinas: Prisma.$TurmaDisciplinasPayload<ExtArgs>[]
      Chamada: Prisma.$ChamadaPayload<ExtArgs>[]
      SemestreDisciplinaProfessor: Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      descricao: string
      id_curso: number
      carga_horario: number
    }, ExtArgs["result"]["disciplina"]>
    composites: {}
  }

  type DisciplinaGetPayload<S extends boolean | null | undefined | DisciplinaDefaultArgs> = $Result.GetResult<Prisma.$DisciplinaPayload, S>

  type DisciplinaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DisciplinaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DisciplinaCountAggregateInputType | true
    }

  export interface DisciplinaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Disciplina'], meta: { name: 'Disciplina' } }
    /**
     * Find zero or one Disciplina that matches the filter.
     * @param {DisciplinaFindUniqueArgs} args - Arguments to find a Disciplina
     * @example
     * // Get one Disciplina
     * const disciplina = await prisma.disciplina.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DisciplinaFindUniqueArgs>(args: SelectSubset<T, DisciplinaFindUniqueArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Disciplina that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DisciplinaFindUniqueOrThrowArgs} args - Arguments to find a Disciplina
     * @example
     * // Get one Disciplina
     * const disciplina = await prisma.disciplina.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DisciplinaFindUniqueOrThrowArgs>(args: SelectSubset<T, DisciplinaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Disciplina that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaFindFirstArgs} args - Arguments to find a Disciplina
     * @example
     * // Get one Disciplina
     * const disciplina = await prisma.disciplina.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DisciplinaFindFirstArgs>(args?: SelectSubset<T, DisciplinaFindFirstArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Disciplina that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaFindFirstOrThrowArgs} args - Arguments to find a Disciplina
     * @example
     * // Get one Disciplina
     * const disciplina = await prisma.disciplina.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DisciplinaFindFirstOrThrowArgs>(args?: SelectSubset<T, DisciplinaFindFirstOrThrowArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Disciplinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplinas
     * const disciplinas = await prisma.disciplina.findMany()
     * 
     * // Get first 10 Disciplinas
     * const disciplinas = await prisma.disciplina.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplinaWithIdOnly = await prisma.disciplina.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DisciplinaFindManyArgs>(args?: SelectSubset<T, DisciplinaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Disciplina.
     * @param {DisciplinaCreateArgs} args - Arguments to create a Disciplina.
     * @example
     * // Create one Disciplina
     * const Disciplina = await prisma.disciplina.create({
     *   data: {
     *     // ... data to create a Disciplina
     *   }
     * })
     * 
     */
    create<T extends DisciplinaCreateArgs>(args: SelectSubset<T, DisciplinaCreateArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Disciplinas.
     * @param {DisciplinaCreateManyArgs} args - Arguments to create many Disciplinas.
     * @example
     * // Create many Disciplinas
     * const disciplina = await prisma.disciplina.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DisciplinaCreateManyArgs>(args?: SelectSubset<T, DisciplinaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Disciplinas and returns the data saved in the database.
     * @param {DisciplinaCreateManyAndReturnArgs} args - Arguments to create many Disciplinas.
     * @example
     * // Create many Disciplinas
     * const disciplina = await prisma.disciplina.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Disciplinas and only return the `id`
     * const disciplinaWithIdOnly = await prisma.disciplina.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DisciplinaCreateManyAndReturnArgs>(args?: SelectSubset<T, DisciplinaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Disciplina.
     * @param {DisciplinaDeleteArgs} args - Arguments to delete one Disciplina.
     * @example
     * // Delete one Disciplina
     * const Disciplina = await prisma.disciplina.delete({
     *   where: {
     *     // ... filter to delete one Disciplina
     *   }
     * })
     * 
     */
    delete<T extends DisciplinaDeleteArgs>(args: SelectSubset<T, DisciplinaDeleteArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Disciplina.
     * @param {DisciplinaUpdateArgs} args - Arguments to update one Disciplina.
     * @example
     * // Update one Disciplina
     * const disciplina = await prisma.disciplina.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DisciplinaUpdateArgs>(args: SelectSubset<T, DisciplinaUpdateArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Disciplinas.
     * @param {DisciplinaDeleteManyArgs} args - Arguments to filter Disciplinas to delete.
     * @example
     * // Delete a few Disciplinas
     * const { count } = await prisma.disciplina.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DisciplinaDeleteManyArgs>(args?: SelectSubset<T, DisciplinaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplinas
     * const disciplina = await prisma.disciplina.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DisciplinaUpdateManyArgs>(args: SelectSubset<T, DisciplinaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Disciplina.
     * @param {DisciplinaUpsertArgs} args - Arguments to update or create a Disciplina.
     * @example
     * // Update or create a Disciplina
     * const disciplina = await prisma.disciplina.upsert({
     *   create: {
     *     // ... data to create a Disciplina
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Disciplina we want to update
     *   }
     * })
     */
    upsert<T extends DisciplinaUpsertArgs>(args: SelectSubset<T, DisciplinaUpsertArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Disciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaCountArgs} args - Arguments to filter Disciplinas to count.
     * @example
     * // Count the number of Disciplinas
     * const count = await prisma.disciplina.count({
     *   where: {
     *     // ... the filter for the Disciplinas we want to count
     *   }
     * })
    **/
    count<T extends DisciplinaCountArgs>(
      args?: Subset<T, DisciplinaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplinaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Disciplina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplinaAggregateArgs>(args: Subset<T, DisciplinaAggregateArgs>): Prisma.PrismaPromise<GetDisciplinaAggregateType<T>>

    /**
     * Group by Disciplina.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplinaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplinaGroupByArgs['orderBy'] }
        : { orderBy?: DisciplinaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplinaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplinaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Disciplina model
   */
  readonly fields: DisciplinaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Disciplina.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisciplinaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Curso<T extends CursoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CursoDefaultArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    TurmaDisciplinas<T extends Disciplina$TurmaDisciplinasArgs<ExtArgs> = {}>(args?: Subset<T, Disciplina$TurmaDisciplinasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "findMany"> | Null>
    Chamada<T extends Disciplina$ChamadaArgs<ExtArgs> = {}>(args?: Subset<T, Disciplina$ChamadaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findMany"> | Null>
    SemestreDisciplinaProfessor<T extends Disciplina$SemestreDisciplinaProfessorArgs<ExtArgs> = {}>(args?: Subset<T, Disciplina$SemestreDisciplinaProfessorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Disciplina model
   */ 
  interface DisciplinaFieldRefs {
    readonly id: FieldRef<"Disciplina", 'Int'>
    readonly descricao: FieldRef<"Disciplina", 'String'>
    readonly id_curso: FieldRef<"Disciplina", 'Int'>
    readonly carga_horario: FieldRef<"Disciplina", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Disciplina findUnique
   */
  export type DisciplinaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * Filter, which Disciplina to fetch.
     */
    where: DisciplinaWhereUniqueInput
  }

  /**
   * Disciplina findUniqueOrThrow
   */
  export type DisciplinaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * Filter, which Disciplina to fetch.
     */
    where: DisciplinaWhereUniqueInput
  }

  /**
   * Disciplina findFirst
   */
  export type DisciplinaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * Filter, which Disciplina to fetch.
     */
    where?: DisciplinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplinas to fetch.
     */
    orderBy?: DisciplinaOrderByWithRelationInput | DisciplinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplinas.
     */
    cursor?: DisciplinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplinas.
     */
    distinct?: DisciplinaScalarFieldEnum | DisciplinaScalarFieldEnum[]
  }

  /**
   * Disciplina findFirstOrThrow
   */
  export type DisciplinaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * Filter, which Disciplina to fetch.
     */
    where?: DisciplinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplinas to fetch.
     */
    orderBy?: DisciplinaOrderByWithRelationInput | DisciplinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplinas.
     */
    cursor?: DisciplinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplinas.
     */
    distinct?: DisciplinaScalarFieldEnum | DisciplinaScalarFieldEnum[]
  }

  /**
   * Disciplina findMany
   */
  export type DisciplinaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * Filter, which Disciplinas to fetch.
     */
    where?: DisciplinaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplinas to fetch.
     */
    orderBy?: DisciplinaOrderByWithRelationInput | DisciplinaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disciplinas.
     */
    cursor?: DisciplinaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplinas.
     */
    skip?: number
    distinct?: DisciplinaScalarFieldEnum | DisciplinaScalarFieldEnum[]
  }

  /**
   * Disciplina create
   */
  export type DisciplinaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * The data needed to create a Disciplina.
     */
    data: XOR<DisciplinaCreateInput, DisciplinaUncheckedCreateInput>
  }

  /**
   * Disciplina createMany
   */
  export type DisciplinaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Disciplinas.
     */
    data: DisciplinaCreateManyInput | DisciplinaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Disciplina createManyAndReturn
   */
  export type DisciplinaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Disciplinas.
     */
    data: DisciplinaCreateManyInput | DisciplinaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Disciplina update
   */
  export type DisciplinaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * The data needed to update a Disciplina.
     */
    data: XOR<DisciplinaUpdateInput, DisciplinaUncheckedUpdateInput>
    /**
     * Choose, which Disciplina to update.
     */
    where: DisciplinaWhereUniqueInput
  }

  /**
   * Disciplina updateMany
   */
  export type DisciplinaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Disciplinas.
     */
    data: XOR<DisciplinaUpdateManyMutationInput, DisciplinaUncheckedUpdateManyInput>
    /**
     * Filter which Disciplinas to update
     */
    where?: DisciplinaWhereInput
  }

  /**
   * Disciplina upsert
   */
  export type DisciplinaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * The filter to search for the Disciplina to update in case it exists.
     */
    where: DisciplinaWhereUniqueInput
    /**
     * In case the Disciplina found by the `where` argument doesn't exist, create a new Disciplina with this data.
     */
    create: XOR<DisciplinaCreateInput, DisciplinaUncheckedCreateInput>
    /**
     * In case the Disciplina was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisciplinaUpdateInput, DisciplinaUncheckedUpdateInput>
  }

  /**
   * Disciplina delete
   */
  export type DisciplinaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
    /**
     * Filter which Disciplina to delete.
     */
    where: DisciplinaWhereUniqueInput
  }

  /**
   * Disciplina deleteMany
   */
  export type DisciplinaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Disciplinas to delete
     */
    where?: DisciplinaWhereInput
  }

  /**
   * Disciplina.TurmaDisciplinas
   */
  export type Disciplina$TurmaDisciplinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    where?: TurmaDisciplinasWhereInput
    orderBy?: TurmaDisciplinasOrderByWithRelationInput | TurmaDisciplinasOrderByWithRelationInput[]
    cursor?: TurmaDisciplinasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaDisciplinasScalarFieldEnum | TurmaDisciplinasScalarFieldEnum[]
  }

  /**
   * Disciplina.Chamada
   */
  export type Disciplina$ChamadaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    where?: ChamadaWhereInput
    orderBy?: ChamadaOrderByWithRelationInput | ChamadaOrderByWithRelationInput[]
    cursor?: ChamadaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChamadaScalarFieldEnum | ChamadaScalarFieldEnum[]
  }

  /**
   * Disciplina.SemestreDisciplinaProfessor
   */
  export type Disciplina$SemestreDisciplinaProfessorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    where?: SemestreProfessorDisciplinasWhereInput
    orderBy?: SemestreProfessorDisciplinasOrderByWithRelationInput | SemestreProfessorDisciplinasOrderByWithRelationInput[]
    cursor?: SemestreProfessorDisciplinasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SemestreProfessorDisciplinasScalarFieldEnum | SemestreProfessorDisciplinasScalarFieldEnum[]
  }

  /**
   * Disciplina without action
   */
  export type DisciplinaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Disciplina
     */
    select?: DisciplinaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinaInclude<ExtArgs> | null
  }


  /**
   * Model Turma
   */

  export type AggregateTurma = {
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  export type TurmaAvgAggregateOutputType = {
    id: number | null
    semestre_curso: number | null
    id_curso: number | null
  }

  export type TurmaSumAggregateOutputType = {
    id: number | null
    semestre_curso: number | null
    id_curso: number | null
  }

  export type TurmaMinAggregateOutputType = {
    id: number | null
    semestre_curso: number | null
    id_curso: number | null
  }

  export type TurmaMaxAggregateOutputType = {
    id: number | null
    semestre_curso: number | null
    id_curso: number | null
  }

  export type TurmaCountAggregateOutputType = {
    id: number
    semestre_curso: number
    id_curso: number
    _all: number
  }


  export type TurmaAvgAggregateInputType = {
    id?: true
    semestre_curso?: true
    id_curso?: true
  }

  export type TurmaSumAggregateInputType = {
    id?: true
    semestre_curso?: true
    id_curso?: true
  }

  export type TurmaMinAggregateInputType = {
    id?: true
    semestre_curso?: true
    id_curso?: true
  }

  export type TurmaMaxAggregateInputType = {
    id?: true
    semestre_curso?: true
    id_curso?: true
  }

  export type TurmaCountAggregateInputType = {
    id?: true
    semestre_curso?: true
    id_curso?: true
    _all?: true
  }

  export type TurmaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turma to aggregate.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Turmas
    **/
    _count?: true | TurmaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaMaxAggregateInputType
  }

  export type GetTurmaAggregateType<T extends TurmaAggregateArgs> = {
        [P in keyof T & keyof AggregateTurma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurma[P]>
      : GetScalarType<T[P], AggregateTurma[P]>
  }




  export type TurmaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaWhereInput
    orderBy?: TurmaOrderByWithAggregationInput | TurmaOrderByWithAggregationInput[]
    by: TurmaScalarFieldEnum[] | TurmaScalarFieldEnum
    having?: TurmaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaCountAggregateInputType | true
    _avg?: TurmaAvgAggregateInputType
    _sum?: TurmaSumAggregateInputType
    _min?: TurmaMinAggregateInputType
    _max?: TurmaMaxAggregateInputType
  }

  export type TurmaGroupByOutputType = {
    id: number
    semestre_curso: number
    id_curso: number
    _count: TurmaCountAggregateOutputType | null
    _avg: TurmaAvgAggregateOutputType | null
    _sum: TurmaSumAggregateOutputType | null
    _min: TurmaMinAggregateOutputType | null
    _max: TurmaMaxAggregateOutputType | null
  }

  type GetTurmaGroupByPayload<T extends TurmaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaGroupByOutputType[P]>
        }
      >
    >


  export type TurmaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semestre_curso?: boolean
    id_curso?: boolean
    Curso?: boolean | CursoDefaultArgs<ExtArgs>
    TurmaDisciplinas?: boolean | Turma$TurmaDisciplinasArgs<ExtArgs>
    TurmaAluno?: boolean | Turma$TurmaAlunoArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turma"]>

  export type TurmaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    semestre_curso?: boolean
    id_curso?: boolean
    Curso?: boolean | CursoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turma"]>

  export type TurmaSelectScalar = {
    id?: boolean
    semestre_curso?: boolean
    id_curso?: boolean
  }

  export type TurmaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Curso?: boolean | CursoDefaultArgs<ExtArgs>
    TurmaDisciplinas?: boolean | Turma$TurmaDisciplinasArgs<ExtArgs>
    TurmaAluno?: boolean | Turma$TurmaAlunoArgs<ExtArgs>
    _count?: boolean | TurmaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TurmaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Curso?: boolean | CursoDefaultArgs<ExtArgs>
  }

  export type $TurmaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Turma"
    objects: {
      Curso: Prisma.$CursoPayload<ExtArgs>
      TurmaDisciplinas: Prisma.$TurmaDisciplinasPayload<ExtArgs>[]
      TurmaAluno: Prisma.$TurmaAlunosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      semestre_curso: number
      id_curso: number
    }, ExtArgs["result"]["turma"]>
    composites: {}
  }

  type TurmaGetPayload<S extends boolean | null | undefined | TurmaDefaultArgs> = $Result.GetResult<Prisma.$TurmaPayload, S>

  type TurmaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TurmaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TurmaCountAggregateInputType | true
    }

  export interface TurmaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Turma'], meta: { name: 'Turma' } }
    /**
     * Find zero or one Turma that matches the filter.
     * @param {TurmaFindUniqueArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TurmaFindUniqueArgs>(args: SelectSubset<T, TurmaFindUniqueArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Turma that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TurmaFindUniqueOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TurmaFindUniqueOrThrowArgs>(args: SelectSubset<T, TurmaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Turma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TurmaFindFirstArgs>(args?: SelectSubset<T, TurmaFindFirstArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Turma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindFirstOrThrowArgs} args - Arguments to find a Turma
     * @example
     * // Get one Turma
     * const turma = await prisma.turma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TurmaFindFirstOrThrowArgs>(args?: SelectSubset<T, TurmaFindFirstOrThrowArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turmas
     * const turmas = await prisma.turma.findMany()
     * 
     * // Get first 10 Turmas
     * const turmas = await prisma.turma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaWithIdOnly = await prisma.turma.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TurmaFindManyArgs>(args?: SelectSubset<T, TurmaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Turma.
     * @param {TurmaCreateArgs} args - Arguments to create a Turma.
     * @example
     * // Create one Turma
     * const Turma = await prisma.turma.create({
     *   data: {
     *     // ... data to create a Turma
     *   }
     * })
     * 
     */
    create<T extends TurmaCreateArgs>(args: SelectSubset<T, TurmaCreateArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Turmas.
     * @param {TurmaCreateManyArgs} args - Arguments to create many Turmas.
     * @example
     * // Create many Turmas
     * const turma = await prisma.turma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TurmaCreateManyArgs>(args?: SelectSubset<T, TurmaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Turmas and returns the data saved in the database.
     * @param {TurmaCreateManyAndReturnArgs} args - Arguments to create many Turmas.
     * @example
     * // Create many Turmas
     * const turma = await prisma.turma.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Turmas and only return the `id`
     * const turmaWithIdOnly = await prisma.turma.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TurmaCreateManyAndReturnArgs>(args?: SelectSubset<T, TurmaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Turma.
     * @param {TurmaDeleteArgs} args - Arguments to delete one Turma.
     * @example
     * // Delete one Turma
     * const Turma = await prisma.turma.delete({
     *   where: {
     *     // ... filter to delete one Turma
     *   }
     * })
     * 
     */
    delete<T extends TurmaDeleteArgs>(args: SelectSubset<T, TurmaDeleteArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Turma.
     * @param {TurmaUpdateArgs} args - Arguments to update one Turma.
     * @example
     * // Update one Turma
     * const turma = await prisma.turma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TurmaUpdateArgs>(args: SelectSubset<T, TurmaUpdateArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Turmas.
     * @param {TurmaDeleteManyArgs} args - Arguments to filter Turmas to delete.
     * @example
     * // Delete a few Turmas
     * const { count } = await prisma.turma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TurmaDeleteManyArgs>(args?: SelectSubset<T, TurmaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turmas
     * const turma = await prisma.turma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TurmaUpdateManyArgs>(args: SelectSubset<T, TurmaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turma.
     * @param {TurmaUpsertArgs} args - Arguments to update or create a Turma.
     * @example
     * // Update or create a Turma
     * const turma = await prisma.turma.upsert({
     *   create: {
     *     // ... data to create a Turma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turma we want to update
     *   }
     * })
     */
    upsert<T extends TurmaUpsertArgs>(args: SelectSubset<T, TurmaUpsertArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaCountArgs} args - Arguments to filter Turmas to count.
     * @example
     * // Count the number of Turmas
     * const count = await prisma.turma.count({
     *   where: {
     *     // ... the filter for the Turmas we want to count
     *   }
     * })
    **/
    count<T extends TurmaCountArgs>(
      args?: Subset<T, TurmaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaAggregateArgs>(args: Subset<T, TurmaAggregateArgs>): Prisma.PrismaPromise<GetTurmaAggregateType<T>>

    /**
     * Group by Turma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmaGroupByArgs['orderBy'] }
        : { orderBy?: TurmaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Turma model
   */
  readonly fields: TurmaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Turma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurmaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Curso<T extends CursoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CursoDefaultArgs<ExtArgs>>): Prisma__CursoClient<$Result.GetResult<Prisma.$CursoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    TurmaDisciplinas<T extends Turma$TurmaDisciplinasArgs<ExtArgs> = {}>(args?: Subset<T, Turma$TurmaDisciplinasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "findMany"> | Null>
    TurmaAluno<T extends Turma$TurmaAlunoArgs<ExtArgs> = {}>(args?: Subset<T, Turma$TurmaAlunoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Turma model
   */ 
  interface TurmaFieldRefs {
    readonly id: FieldRef<"Turma", 'Int'>
    readonly semestre_curso: FieldRef<"Turma", 'Int'>
    readonly id_curso: FieldRef<"Turma", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Turma findUnique
   */
  export type TurmaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma findUniqueOrThrow
   */
  export type TurmaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma findFirst
   */
  export type TurmaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * Turma findFirstOrThrow
   */
  export type TurmaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turma to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turmas.
     */
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * Turma findMany
   */
  export type TurmaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter, which Turmas to fetch.
     */
    where?: TurmaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turmas to fetch.
     */
    orderBy?: TurmaOrderByWithRelationInput | TurmaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Turmas.
     */
    cursor?: TurmaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turmas.
     */
    skip?: number
    distinct?: TurmaScalarFieldEnum | TurmaScalarFieldEnum[]
  }

  /**
   * Turma create
   */
  export type TurmaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The data needed to create a Turma.
     */
    data: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
  }

  /**
   * Turma createMany
   */
  export type TurmaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Turmas.
     */
    data: TurmaCreateManyInput | TurmaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Turma createManyAndReturn
   */
  export type TurmaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Turmas.
     */
    data: TurmaCreateManyInput | TurmaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Turma update
   */
  export type TurmaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The data needed to update a Turma.
     */
    data: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
    /**
     * Choose, which Turma to update.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma updateMany
   */
  export type TurmaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Turmas.
     */
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyInput>
    /**
     * Filter which Turmas to update
     */
    where?: TurmaWhereInput
  }

  /**
   * Turma upsert
   */
  export type TurmaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * The filter to search for the Turma to update in case it exists.
     */
    where: TurmaWhereUniqueInput
    /**
     * In case the Turma found by the `where` argument doesn't exist, create a new Turma with this data.
     */
    create: XOR<TurmaCreateInput, TurmaUncheckedCreateInput>
    /**
     * In case the Turma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurmaUpdateInput, TurmaUncheckedUpdateInput>
  }

  /**
   * Turma delete
   */
  export type TurmaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
    /**
     * Filter which Turma to delete.
     */
    where: TurmaWhereUniqueInput
  }

  /**
   * Turma deleteMany
   */
  export type TurmaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turmas to delete
     */
    where?: TurmaWhereInput
  }

  /**
   * Turma.TurmaDisciplinas
   */
  export type Turma$TurmaDisciplinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    where?: TurmaDisciplinasWhereInput
    orderBy?: TurmaDisciplinasOrderByWithRelationInput | TurmaDisciplinasOrderByWithRelationInput[]
    cursor?: TurmaDisciplinasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaDisciplinasScalarFieldEnum | TurmaDisciplinasScalarFieldEnum[]
  }

  /**
   * Turma.TurmaAluno
   */
  export type Turma$TurmaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    where?: TurmaAlunosWhereInput
    orderBy?: TurmaAlunosOrderByWithRelationInput | TurmaAlunosOrderByWithRelationInput[]
    cursor?: TurmaAlunosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurmaAlunosScalarFieldEnum | TurmaAlunosScalarFieldEnum[]
  }

  /**
   * Turma without action
   */
  export type TurmaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turma
     */
    select?: TurmaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaInclude<ExtArgs> | null
  }


  /**
   * Model TurmaDisciplinas
   */

  export type AggregateTurmaDisciplinas = {
    _count: TurmaDisciplinasCountAggregateOutputType | null
    _avg: TurmaDisciplinasAvgAggregateOutputType | null
    _sum: TurmaDisciplinasSumAggregateOutputType | null
    _min: TurmaDisciplinasMinAggregateOutputType | null
    _max: TurmaDisciplinasMaxAggregateOutputType | null
  }

  export type TurmaDisciplinasAvgAggregateOutputType = {
    id: number | null
    id_disciplina: number | null
    id_semestre: number | null
    id_turma: number | null
    semestre_curso: number | null
  }

  export type TurmaDisciplinasSumAggregateOutputType = {
    id: number | null
    id_disciplina: number | null
    id_semestre: number | null
    id_turma: number | null
    semestre_curso: number | null
  }

  export type TurmaDisciplinasMinAggregateOutputType = {
    id: number | null
    id_disciplina: number | null
    id_semestre: number | null
    id_turma: number | null
    semestre_curso: number | null
  }

  export type TurmaDisciplinasMaxAggregateOutputType = {
    id: number | null
    id_disciplina: number | null
    id_semestre: number | null
    id_turma: number | null
    semestre_curso: number | null
  }

  export type TurmaDisciplinasCountAggregateOutputType = {
    id: number
    id_disciplina: number
    id_semestre: number
    id_turma: number
    semestre_curso: number
    _all: number
  }


  export type TurmaDisciplinasAvgAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_semestre?: true
    id_turma?: true
    semestre_curso?: true
  }

  export type TurmaDisciplinasSumAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_semestre?: true
    id_turma?: true
    semestre_curso?: true
  }

  export type TurmaDisciplinasMinAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_semestre?: true
    id_turma?: true
    semestre_curso?: true
  }

  export type TurmaDisciplinasMaxAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_semestre?: true
    id_turma?: true
    semestre_curso?: true
  }

  export type TurmaDisciplinasCountAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_semestre?: true
    id_turma?: true
    semestre_curso?: true
    _all?: true
  }

  export type TurmaDisciplinasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TurmaDisciplinas to aggregate.
     */
    where?: TurmaDisciplinasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaDisciplinas to fetch.
     */
    orderBy?: TurmaDisciplinasOrderByWithRelationInput | TurmaDisciplinasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurmaDisciplinasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaDisciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaDisciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TurmaDisciplinas
    **/
    _count?: true | TurmaDisciplinasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaDisciplinasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaDisciplinasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaDisciplinasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaDisciplinasMaxAggregateInputType
  }

  export type GetTurmaDisciplinasAggregateType<T extends TurmaDisciplinasAggregateArgs> = {
        [P in keyof T & keyof AggregateTurmaDisciplinas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurmaDisciplinas[P]>
      : GetScalarType<T[P], AggregateTurmaDisciplinas[P]>
  }




  export type TurmaDisciplinasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaDisciplinasWhereInput
    orderBy?: TurmaDisciplinasOrderByWithAggregationInput | TurmaDisciplinasOrderByWithAggregationInput[]
    by: TurmaDisciplinasScalarFieldEnum[] | TurmaDisciplinasScalarFieldEnum
    having?: TurmaDisciplinasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaDisciplinasCountAggregateInputType | true
    _avg?: TurmaDisciplinasAvgAggregateInputType
    _sum?: TurmaDisciplinasSumAggregateInputType
    _min?: TurmaDisciplinasMinAggregateInputType
    _max?: TurmaDisciplinasMaxAggregateInputType
  }

  export type TurmaDisciplinasGroupByOutputType = {
    id: number
    id_disciplina: number
    id_semestre: number
    id_turma: number
    semestre_curso: number
    _count: TurmaDisciplinasCountAggregateOutputType | null
    _avg: TurmaDisciplinasAvgAggregateOutputType | null
    _sum: TurmaDisciplinasSumAggregateOutputType | null
    _min: TurmaDisciplinasMinAggregateOutputType | null
    _max: TurmaDisciplinasMaxAggregateOutputType | null
  }

  type GetTurmaDisciplinasGroupByPayload<T extends TurmaDisciplinasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmaDisciplinasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaDisciplinasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaDisciplinasGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaDisciplinasGroupByOutputType[P]>
        }
      >
    >


  export type TurmaDisciplinasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_disciplina?: boolean
    id_semestre?: boolean
    id_turma?: boolean
    semestre_curso?: boolean
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
    Turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turmaDisciplinas"]>

  export type TurmaDisciplinasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_disciplina?: boolean
    id_semestre?: boolean
    id_turma?: boolean
    semestre_curso?: boolean
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
    Turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turmaDisciplinas"]>

  export type TurmaDisciplinasSelectScalar = {
    id?: boolean
    id_disciplina?: boolean
    id_semestre?: boolean
    id_turma?: boolean
    semestre_curso?: boolean
  }

  export type TurmaDisciplinasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
    Turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }
  export type TurmaDisciplinasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
    Turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }

  export type $TurmaDisciplinasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TurmaDisciplinas"
    objects: {
      Disciplina: Prisma.$DisciplinaPayload<ExtArgs>
      Semestre: Prisma.$SemestrePayload<ExtArgs>
      Turma: Prisma.$TurmaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_disciplina: number
      id_semestre: number
      id_turma: number
      semestre_curso: number
    }, ExtArgs["result"]["turmaDisciplinas"]>
    composites: {}
  }

  type TurmaDisciplinasGetPayload<S extends boolean | null | undefined | TurmaDisciplinasDefaultArgs> = $Result.GetResult<Prisma.$TurmaDisciplinasPayload, S>

  type TurmaDisciplinasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TurmaDisciplinasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TurmaDisciplinasCountAggregateInputType | true
    }

  export interface TurmaDisciplinasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TurmaDisciplinas'], meta: { name: 'TurmaDisciplinas' } }
    /**
     * Find zero or one TurmaDisciplinas that matches the filter.
     * @param {TurmaDisciplinasFindUniqueArgs} args - Arguments to find a TurmaDisciplinas
     * @example
     * // Get one TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TurmaDisciplinasFindUniqueArgs>(args: SelectSubset<T, TurmaDisciplinasFindUniqueArgs<ExtArgs>>): Prisma__TurmaDisciplinasClient<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TurmaDisciplinas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TurmaDisciplinasFindUniqueOrThrowArgs} args - Arguments to find a TurmaDisciplinas
     * @example
     * // Get one TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TurmaDisciplinasFindUniqueOrThrowArgs>(args: SelectSubset<T, TurmaDisciplinasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TurmaDisciplinasClient<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TurmaDisciplinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaDisciplinasFindFirstArgs} args - Arguments to find a TurmaDisciplinas
     * @example
     * // Get one TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TurmaDisciplinasFindFirstArgs>(args?: SelectSubset<T, TurmaDisciplinasFindFirstArgs<ExtArgs>>): Prisma__TurmaDisciplinasClient<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TurmaDisciplinas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaDisciplinasFindFirstOrThrowArgs} args - Arguments to find a TurmaDisciplinas
     * @example
     * // Get one TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TurmaDisciplinasFindFirstOrThrowArgs>(args?: SelectSubset<T, TurmaDisciplinasFindFirstOrThrowArgs<ExtArgs>>): Prisma__TurmaDisciplinasClient<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TurmaDisciplinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaDisciplinasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.findMany()
     * 
     * // Get first 10 TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaDisciplinasWithIdOnly = await prisma.turmaDisciplinas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TurmaDisciplinasFindManyArgs>(args?: SelectSubset<T, TurmaDisciplinasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TurmaDisciplinas.
     * @param {TurmaDisciplinasCreateArgs} args - Arguments to create a TurmaDisciplinas.
     * @example
     * // Create one TurmaDisciplinas
     * const TurmaDisciplinas = await prisma.turmaDisciplinas.create({
     *   data: {
     *     // ... data to create a TurmaDisciplinas
     *   }
     * })
     * 
     */
    create<T extends TurmaDisciplinasCreateArgs>(args: SelectSubset<T, TurmaDisciplinasCreateArgs<ExtArgs>>): Prisma__TurmaDisciplinasClient<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TurmaDisciplinas.
     * @param {TurmaDisciplinasCreateManyArgs} args - Arguments to create many TurmaDisciplinas.
     * @example
     * // Create many TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TurmaDisciplinasCreateManyArgs>(args?: SelectSubset<T, TurmaDisciplinasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TurmaDisciplinas and returns the data saved in the database.
     * @param {TurmaDisciplinasCreateManyAndReturnArgs} args - Arguments to create many TurmaDisciplinas.
     * @example
     * // Create many TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TurmaDisciplinas and only return the `id`
     * const turmaDisciplinasWithIdOnly = await prisma.turmaDisciplinas.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TurmaDisciplinasCreateManyAndReturnArgs>(args?: SelectSubset<T, TurmaDisciplinasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TurmaDisciplinas.
     * @param {TurmaDisciplinasDeleteArgs} args - Arguments to delete one TurmaDisciplinas.
     * @example
     * // Delete one TurmaDisciplinas
     * const TurmaDisciplinas = await prisma.turmaDisciplinas.delete({
     *   where: {
     *     // ... filter to delete one TurmaDisciplinas
     *   }
     * })
     * 
     */
    delete<T extends TurmaDisciplinasDeleteArgs>(args: SelectSubset<T, TurmaDisciplinasDeleteArgs<ExtArgs>>): Prisma__TurmaDisciplinasClient<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TurmaDisciplinas.
     * @param {TurmaDisciplinasUpdateArgs} args - Arguments to update one TurmaDisciplinas.
     * @example
     * // Update one TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TurmaDisciplinasUpdateArgs>(args: SelectSubset<T, TurmaDisciplinasUpdateArgs<ExtArgs>>): Prisma__TurmaDisciplinasClient<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TurmaDisciplinas.
     * @param {TurmaDisciplinasDeleteManyArgs} args - Arguments to filter TurmaDisciplinas to delete.
     * @example
     * // Delete a few TurmaDisciplinas
     * const { count } = await prisma.turmaDisciplinas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TurmaDisciplinasDeleteManyArgs>(args?: SelectSubset<T, TurmaDisciplinasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TurmaDisciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaDisciplinasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TurmaDisciplinasUpdateManyArgs>(args: SelectSubset<T, TurmaDisciplinasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TurmaDisciplinas.
     * @param {TurmaDisciplinasUpsertArgs} args - Arguments to update or create a TurmaDisciplinas.
     * @example
     * // Update or create a TurmaDisciplinas
     * const turmaDisciplinas = await prisma.turmaDisciplinas.upsert({
     *   create: {
     *     // ... data to create a TurmaDisciplinas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TurmaDisciplinas we want to update
     *   }
     * })
     */
    upsert<T extends TurmaDisciplinasUpsertArgs>(args: SelectSubset<T, TurmaDisciplinasUpsertArgs<ExtArgs>>): Prisma__TurmaDisciplinasClient<$Result.GetResult<Prisma.$TurmaDisciplinasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TurmaDisciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaDisciplinasCountArgs} args - Arguments to filter TurmaDisciplinas to count.
     * @example
     * // Count the number of TurmaDisciplinas
     * const count = await prisma.turmaDisciplinas.count({
     *   where: {
     *     // ... the filter for the TurmaDisciplinas we want to count
     *   }
     * })
    **/
    count<T extends TurmaDisciplinasCountArgs>(
      args?: Subset<T, TurmaDisciplinasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaDisciplinasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TurmaDisciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaDisciplinasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaDisciplinasAggregateArgs>(args: Subset<T, TurmaDisciplinasAggregateArgs>): Prisma.PrismaPromise<GetTurmaDisciplinasAggregateType<T>>

    /**
     * Group by TurmaDisciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaDisciplinasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmaDisciplinasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmaDisciplinasGroupByArgs['orderBy'] }
        : { orderBy?: TurmaDisciplinasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmaDisciplinasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaDisciplinasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TurmaDisciplinas model
   */
  readonly fields: TurmaDisciplinasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TurmaDisciplinas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurmaDisciplinasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Disciplina<T extends DisciplinaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisciplinaDefaultArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Semestre<T extends SemestreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SemestreDefaultArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Turma<T extends TurmaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TurmaDefaultArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TurmaDisciplinas model
   */ 
  interface TurmaDisciplinasFieldRefs {
    readonly id: FieldRef<"TurmaDisciplinas", 'Int'>
    readonly id_disciplina: FieldRef<"TurmaDisciplinas", 'Int'>
    readonly id_semestre: FieldRef<"TurmaDisciplinas", 'Int'>
    readonly id_turma: FieldRef<"TurmaDisciplinas", 'Int'>
    readonly semestre_curso: FieldRef<"TurmaDisciplinas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TurmaDisciplinas findUnique
   */
  export type TurmaDisciplinasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which TurmaDisciplinas to fetch.
     */
    where: TurmaDisciplinasWhereUniqueInput
  }

  /**
   * TurmaDisciplinas findUniqueOrThrow
   */
  export type TurmaDisciplinasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which TurmaDisciplinas to fetch.
     */
    where: TurmaDisciplinasWhereUniqueInput
  }

  /**
   * TurmaDisciplinas findFirst
   */
  export type TurmaDisciplinasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which TurmaDisciplinas to fetch.
     */
    where?: TurmaDisciplinasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaDisciplinas to fetch.
     */
    orderBy?: TurmaDisciplinasOrderByWithRelationInput | TurmaDisciplinasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TurmaDisciplinas.
     */
    cursor?: TurmaDisciplinasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaDisciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaDisciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TurmaDisciplinas.
     */
    distinct?: TurmaDisciplinasScalarFieldEnum | TurmaDisciplinasScalarFieldEnum[]
  }

  /**
   * TurmaDisciplinas findFirstOrThrow
   */
  export type TurmaDisciplinasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which TurmaDisciplinas to fetch.
     */
    where?: TurmaDisciplinasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaDisciplinas to fetch.
     */
    orderBy?: TurmaDisciplinasOrderByWithRelationInput | TurmaDisciplinasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TurmaDisciplinas.
     */
    cursor?: TurmaDisciplinasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaDisciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaDisciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TurmaDisciplinas.
     */
    distinct?: TurmaDisciplinasScalarFieldEnum | TurmaDisciplinasScalarFieldEnum[]
  }

  /**
   * TurmaDisciplinas findMany
   */
  export type TurmaDisciplinasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which TurmaDisciplinas to fetch.
     */
    where?: TurmaDisciplinasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaDisciplinas to fetch.
     */
    orderBy?: TurmaDisciplinasOrderByWithRelationInput | TurmaDisciplinasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TurmaDisciplinas.
     */
    cursor?: TurmaDisciplinasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaDisciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaDisciplinas.
     */
    skip?: number
    distinct?: TurmaDisciplinasScalarFieldEnum | TurmaDisciplinasScalarFieldEnum[]
  }

  /**
   * TurmaDisciplinas create
   */
  export type TurmaDisciplinasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * The data needed to create a TurmaDisciplinas.
     */
    data: XOR<TurmaDisciplinasCreateInput, TurmaDisciplinasUncheckedCreateInput>
  }

  /**
   * TurmaDisciplinas createMany
   */
  export type TurmaDisciplinasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TurmaDisciplinas.
     */
    data: TurmaDisciplinasCreateManyInput | TurmaDisciplinasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TurmaDisciplinas createManyAndReturn
   */
  export type TurmaDisciplinasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TurmaDisciplinas.
     */
    data: TurmaDisciplinasCreateManyInput | TurmaDisciplinasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TurmaDisciplinas update
   */
  export type TurmaDisciplinasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * The data needed to update a TurmaDisciplinas.
     */
    data: XOR<TurmaDisciplinasUpdateInput, TurmaDisciplinasUncheckedUpdateInput>
    /**
     * Choose, which TurmaDisciplinas to update.
     */
    where: TurmaDisciplinasWhereUniqueInput
  }

  /**
   * TurmaDisciplinas updateMany
   */
  export type TurmaDisciplinasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TurmaDisciplinas.
     */
    data: XOR<TurmaDisciplinasUpdateManyMutationInput, TurmaDisciplinasUncheckedUpdateManyInput>
    /**
     * Filter which TurmaDisciplinas to update
     */
    where?: TurmaDisciplinasWhereInput
  }

  /**
   * TurmaDisciplinas upsert
   */
  export type TurmaDisciplinasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * The filter to search for the TurmaDisciplinas to update in case it exists.
     */
    where: TurmaDisciplinasWhereUniqueInput
    /**
     * In case the TurmaDisciplinas found by the `where` argument doesn't exist, create a new TurmaDisciplinas with this data.
     */
    create: XOR<TurmaDisciplinasCreateInput, TurmaDisciplinasUncheckedCreateInput>
    /**
     * In case the TurmaDisciplinas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurmaDisciplinasUpdateInput, TurmaDisciplinasUncheckedUpdateInput>
  }

  /**
   * TurmaDisciplinas delete
   */
  export type TurmaDisciplinasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
    /**
     * Filter which TurmaDisciplinas to delete.
     */
    where: TurmaDisciplinasWhereUniqueInput
  }

  /**
   * TurmaDisciplinas deleteMany
   */
  export type TurmaDisciplinasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TurmaDisciplinas to delete
     */
    where?: TurmaDisciplinasWhereInput
  }

  /**
   * TurmaDisciplinas without action
   */
  export type TurmaDisciplinasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaDisciplinas
     */
    select?: TurmaDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaDisciplinasInclude<ExtArgs> | null
  }


  /**
   * Model TurmaAlunos
   */

  export type AggregateTurmaAlunos = {
    _count: TurmaAlunosCountAggregateOutputType | null
    _avg: TurmaAlunosAvgAggregateOutputType | null
    _sum: TurmaAlunosSumAggregateOutputType | null
    _min: TurmaAlunosMinAggregateOutputType | null
    _max: TurmaAlunosMaxAggregateOutputType | null
  }

  export type TurmaAlunosAvgAggregateOutputType = {
    id: number | null
    id_aluno: number | null
    id_turma: number | null
  }

  export type TurmaAlunosSumAggregateOutputType = {
    id: number | null
    id_aluno: number | null
    id_turma: number | null
  }

  export type TurmaAlunosMinAggregateOutputType = {
    id: number | null
    id_aluno: number | null
    id_turma: number | null
  }

  export type TurmaAlunosMaxAggregateOutputType = {
    id: number | null
    id_aluno: number | null
    id_turma: number | null
  }

  export type TurmaAlunosCountAggregateOutputType = {
    id: number
    id_aluno: number
    id_turma: number
    _all: number
  }


  export type TurmaAlunosAvgAggregateInputType = {
    id?: true
    id_aluno?: true
    id_turma?: true
  }

  export type TurmaAlunosSumAggregateInputType = {
    id?: true
    id_aluno?: true
    id_turma?: true
  }

  export type TurmaAlunosMinAggregateInputType = {
    id?: true
    id_aluno?: true
    id_turma?: true
  }

  export type TurmaAlunosMaxAggregateInputType = {
    id?: true
    id_aluno?: true
    id_turma?: true
  }

  export type TurmaAlunosCountAggregateInputType = {
    id?: true
    id_aluno?: true
    id_turma?: true
    _all?: true
  }

  export type TurmaAlunosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TurmaAlunos to aggregate.
     */
    where?: TurmaAlunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaAlunos to fetch.
     */
    orderBy?: TurmaAlunosOrderByWithRelationInput | TurmaAlunosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurmaAlunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TurmaAlunos
    **/
    _count?: true | TurmaAlunosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmaAlunosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmaAlunosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmaAlunosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmaAlunosMaxAggregateInputType
  }

  export type GetTurmaAlunosAggregateType<T extends TurmaAlunosAggregateArgs> = {
        [P in keyof T & keyof AggregateTurmaAlunos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurmaAlunos[P]>
      : GetScalarType<T[P], AggregateTurmaAlunos[P]>
  }




  export type TurmaAlunosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurmaAlunosWhereInput
    orderBy?: TurmaAlunosOrderByWithAggregationInput | TurmaAlunosOrderByWithAggregationInput[]
    by: TurmaAlunosScalarFieldEnum[] | TurmaAlunosScalarFieldEnum
    having?: TurmaAlunosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmaAlunosCountAggregateInputType | true
    _avg?: TurmaAlunosAvgAggregateInputType
    _sum?: TurmaAlunosSumAggregateInputType
    _min?: TurmaAlunosMinAggregateInputType
    _max?: TurmaAlunosMaxAggregateInputType
  }

  export type TurmaAlunosGroupByOutputType = {
    id: number
    id_aluno: number
    id_turma: number
    _count: TurmaAlunosCountAggregateOutputType | null
    _avg: TurmaAlunosAvgAggregateOutputType | null
    _sum: TurmaAlunosSumAggregateOutputType | null
    _min: TurmaAlunosMinAggregateOutputType | null
    _max: TurmaAlunosMaxAggregateOutputType | null
  }

  type GetTurmaAlunosGroupByPayload<T extends TurmaAlunosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmaAlunosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmaAlunosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmaAlunosGroupByOutputType[P]>
            : GetScalarType<T[P], TurmaAlunosGroupByOutputType[P]>
        }
      >
    >


  export type TurmaAlunosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_aluno?: boolean
    id_turma?: boolean
    Usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    Turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turmaAlunos"]>

  export type TurmaAlunosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_aluno?: boolean
    id_turma?: boolean
    Usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    Turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turmaAlunos"]>

  export type TurmaAlunosSelectScalar = {
    id?: boolean
    id_aluno?: boolean
    id_turma?: boolean
  }

  export type TurmaAlunosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    Turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }
  export type TurmaAlunosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    Turma?: boolean | TurmaDefaultArgs<ExtArgs>
  }

  export type $TurmaAlunosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TurmaAlunos"
    objects: {
      Usuario: Prisma.$UsuarioPayload<ExtArgs>
      Turma: Prisma.$TurmaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_aluno: number
      id_turma: number
    }, ExtArgs["result"]["turmaAlunos"]>
    composites: {}
  }

  type TurmaAlunosGetPayload<S extends boolean | null | undefined | TurmaAlunosDefaultArgs> = $Result.GetResult<Prisma.$TurmaAlunosPayload, S>

  type TurmaAlunosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TurmaAlunosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TurmaAlunosCountAggregateInputType | true
    }

  export interface TurmaAlunosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TurmaAlunos'], meta: { name: 'TurmaAlunos' } }
    /**
     * Find zero or one TurmaAlunos that matches the filter.
     * @param {TurmaAlunosFindUniqueArgs} args - Arguments to find a TurmaAlunos
     * @example
     * // Get one TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TurmaAlunosFindUniqueArgs>(args: SelectSubset<T, TurmaAlunosFindUniqueArgs<ExtArgs>>): Prisma__TurmaAlunosClient<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TurmaAlunos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TurmaAlunosFindUniqueOrThrowArgs} args - Arguments to find a TurmaAlunos
     * @example
     * // Get one TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TurmaAlunosFindUniqueOrThrowArgs>(args: SelectSubset<T, TurmaAlunosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TurmaAlunosClient<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TurmaAlunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunosFindFirstArgs} args - Arguments to find a TurmaAlunos
     * @example
     * // Get one TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TurmaAlunosFindFirstArgs>(args?: SelectSubset<T, TurmaAlunosFindFirstArgs<ExtArgs>>): Prisma__TurmaAlunosClient<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TurmaAlunos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunosFindFirstOrThrowArgs} args - Arguments to find a TurmaAlunos
     * @example
     * // Get one TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TurmaAlunosFindFirstOrThrowArgs>(args?: SelectSubset<T, TurmaAlunosFindFirstOrThrowArgs<ExtArgs>>): Prisma__TurmaAlunosClient<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TurmaAlunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.findMany()
     * 
     * // Get first 10 TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turmaAlunosWithIdOnly = await prisma.turmaAlunos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TurmaAlunosFindManyArgs>(args?: SelectSubset<T, TurmaAlunosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TurmaAlunos.
     * @param {TurmaAlunosCreateArgs} args - Arguments to create a TurmaAlunos.
     * @example
     * // Create one TurmaAlunos
     * const TurmaAlunos = await prisma.turmaAlunos.create({
     *   data: {
     *     // ... data to create a TurmaAlunos
     *   }
     * })
     * 
     */
    create<T extends TurmaAlunosCreateArgs>(args: SelectSubset<T, TurmaAlunosCreateArgs<ExtArgs>>): Prisma__TurmaAlunosClient<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TurmaAlunos.
     * @param {TurmaAlunosCreateManyArgs} args - Arguments to create many TurmaAlunos.
     * @example
     * // Create many TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TurmaAlunosCreateManyArgs>(args?: SelectSubset<T, TurmaAlunosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TurmaAlunos and returns the data saved in the database.
     * @param {TurmaAlunosCreateManyAndReturnArgs} args - Arguments to create many TurmaAlunos.
     * @example
     * // Create many TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TurmaAlunos and only return the `id`
     * const turmaAlunosWithIdOnly = await prisma.turmaAlunos.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TurmaAlunosCreateManyAndReturnArgs>(args?: SelectSubset<T, TurmaAlunosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TurmaAlunos.
     * @param {TurmaAlunosDeleteArgs} args - Arguments to delete one TurmaAlunos.
     * @example
     * // Delete one TurmaAlunos
     * const TurmaAlunos = await prisma.turmaAlunos.delete({
     *   where: {
     *     // ... filter to delete one TurmaAlunos
     *   }
     * })
     * 
     */
    delete<T extends TurmaAlunosDeleteArgs>(args: SelectSubset<T, TurmaAlunosDeleteArgs<ExtArgs>>): Prisma__TurmaAlunosClient<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TurmaAlunos.
     * @param {TurmaAlunosUpdateArgs} args - Arguments to update one TurmaAlunos.
     * @example
     * // Update one TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TurmaAlunosUpdateArgs>(args: SelectSubset<T, TurmaAlunosUpdateArgs<ExtArgs>>): Prisma__TurmaAlunosClient<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TurmaAlunos.
     * @param {TurmaAlunosDeleteManyArgs} args - Arguments to filter TurmaAlunos to delete.
     * @example
     * // Delete a few TurmaAlunos
     * const { count } = await prisma.turmaAlunos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TurmaAlunosDeleteManyArgs>(args?: SelectSubset<T, TurmaAlunosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TurmaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TurmaAlunosUpdateManyArgs>(args: SelectSubset<T, TurmaAlunosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TurmaAlunos.
     * @param {TurmaAlunosUpsertArgs} args - Arguments to update or create a TurmaAlunos.
     * @example
     * // Update or create a TurmaAlunos
     * const turmaAlunos = await prisma.turmaAlunos.upsert({
     *   create: {
     *     // ... data to create a TurmaAlunos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TurmaAlunos we want to update
     *   }
     * })
     */
    upsert<T extends TurmaAlunosUpsertArgs>(args: SelectSubset<T, TurmaAlunosUpsertArgs<ExtArgs>>): Prisma__TurmaAlunosClient<$Result.GetResult<Prisma.$TurmaAlunosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TurmaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunosCountArgs} args - Arguments to filter TurmaAlunos to count.
     * @example
     * // Count the number of TurmaAlunos
     * const count = await prisma.turmaAlunos.count({
     *   where: {
     *     // ... the filter for the TurmaAlunos we want to count
     *   }
     * })
    **/
    count<T extends TurmaAlunosCountArgs>(
      args?: Subset<T, TurmaAlunosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmaAlunosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TurmaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmaAlunosAggregateArgs>(args: Subset<T, TurmaAlunosAggregateArgs>): Prisma.PrismaPromise<GetTurmaAlunosAggregateType<T>>

    /**
     * Group by TurmaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmaAlunosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurmaAlunosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurmaAlunosGroupByArgs['orderBy'] }
        : { orderBy?: TurmaAlunosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurmaAlunosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmaAlunosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TurmaAlunos model
   */
  readonly fields: TurmaAlunosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TurmaAlunos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurmaAlunosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Turma<T extends TurmaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TurmaDefaultArgs<ExtArgs>>): Prisma__TurmaClient<$Result.GetResult<Prisma.$TurmaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TurmaAlunos model
   */ 
  interface TurmaAlunosFieldRefs {
    readonly id: FieldRef<"TurmaAlunos", 'Int'>
    readonly id_aluno: FieldRef<"TurmaAlunos", 'Int'>
    readonly id_turma: FieldRef<"TurmaAlunos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TurmaAlunos findUnique
   */
  export type TurmaAlunosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAlunos to fetch.
     */
    where: TurmaAlunosWhereUniqueInput
  }

  /**
   * TurmaAlunos findUniqueOrThrow
   */
  export type TurmaAlunosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAlunos to fetch.
     */
    where: TurmaAlunosWhereUniqueInput
  }

  /**
   * TurmaAlunos findFirst
   */
  export type TurmaAlunosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAlunos to fetch.
     */
    where?: TurmaAlunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaAlunos to fetch.
     */
    orderBy?: TurmaAlunosOrderByWithRelationInput | TurmaAlunosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TurmaAlunos.
     */
    cursor?: TurmaAlunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TurmaAlunos.
     */
    distinct?: TurmaAlunosScalarFieldEnum | TurmaAlunosScalarFieldEnum[]
  }

  /**
   * TurmaAlunos findFirstOrThrow
   */
  export type TurmaAlunosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAlunos to fetch.
     */
    where?: TurmaAlunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaAlunos to fetch.
     */
    orderBy?: TurmaAlunosOrderByWithRelationInput | TurmaAlunosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TurmaAlunos.
     */
    cursor?: TurmaAlunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TurmaAlunos.
     */
    distinct?: TurmaAlunosScalarFieldEnum | TurmaAlunosScalarFieldEnum[]
  }

  /**
   * TurmaAlunos findMany
   */
  export type TurmaAlunosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which TurmaAlunos to fetch.
     */
    where?: TurmaAlunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TurmaAlunos to fetch.
     */
    orderBy?: TurmaAlunosOrderByWithRelationInput | TurmaAlunosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TurmaAlunos.
     */
    cursor?: TurmaAlunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TurmaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TurmaAlunos.
     */
    skip?: number
    distinct?: TurmaAlunosScalarFieldEnum | TurmaAlunosScalarFieldEnum[]
  }

  /**
   * TurmaAlunos create
   */
  export type TurmaAlunosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * The data needed to create a TurmaAlunos.
     */
    data: XOR<TurmaAlunosCreateInput, TurmaAlunosUncheckedCreateInput>
  }

  /**
   * TurmaAlunos createMany
   */
  export type TurmaAlunosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TurmaAlunos.
     */
    data: TurmaAlunosCreateManyInput | TurmaAlunosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TurmaAlunos createManyAndReturn
   */
  export type TurmaAlunosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TurmaAlunos.
     */
    data: TurmaAlunosCreateManyInput | TurmaAlunosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TurmaAlunos update
   */
  export type TurmaAlunosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * The data needed to update a TurmaAlunos.
     */
    data: XOR<TurmaAlunosUpdateInput, TurmaAlunosUncheckedUpdateInput>
    /**
     * Choose, which TurmaAlunos to update.
     */
    where: TurmaAlunosWhereUniqueInput
  }

  /**
   * TurmaAlunos updateMany
   */
  export type TurmaAlunosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TurmaAlunos.
     */
    data: XOR<TurmaAlunosUpdateManyMutationInput, TurmaAlunosUncheckedUpdateManyInput>
    /**
     * Filter which TurmaAlunos to update
     */
    where?: TurmaAlunosWhereInput
  }

  /**
   * TurmaAlunos upsert
   */
  export type TurmaAlunosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * The filter to search for the TurmaAlunos to update in case it exists.
     */
    where: TurmaAlunosWhereUniqueInput
    /**
     * In case the TurmaAlunos found by the `where` argument doesn't exist, create a new TurmaAlunos with this data.
     */
    create: XOR<TurmaAlunosCreateInput, TurmaAlunosUncheckedCreateInput>
    /**
     * In case the TurmaAlunos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurmaAlunosUpdateInput, TurmaAlunosUncheckedUpdateInput>
  }

  /**
   * TurmaAlunos delete
   */
  export type TurmaAlunosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
    /**
     * Filter which TurmaAlunos to delete.
     */
    where: TurmaAlunosWhereUniqueInput
  }

  /**
   * TurmaAlunos deleteMany
   */
  export type TurmaAlunosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TurmaAlunos to delete
     */
    where?: TurmaAlunosWhereInput
  }

  /**
   * TurmaAlunos without action
   */
  export type TurmaAlunosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmaAlunos
     */
    select?: TurmaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurmaAlunosInclude<ExtArgs> | null
  }


  /**
   * Model Chamada
   */

  export type AggregateChamada = {
    _count: ChamadaCountAggregateOutputType | null
    _avg: ChamadaAvgAggregateOutputType | null
    _sum: ChamadaSumAggregateOutputType | null
    _min: ChamadaMinAggregateOutputType | null
    _max: ChamadaMaxAggregateOutputType | null
  }

  export type ChamadaAvgAggregateOutputType = {
    id: number | null
    id_professor: number | null
    id_disciplina: number | null
    id_semestre: number | null
  }

  export type ChamadaSumAggregateOutputType = {
    id: number | null
    id_professor: number | null
    id_disciplina: number | null
    id_semestre: number | null
  }

  export type ChamadaMinAggregateOutputType = {
    id: number | null
    id_professor: number | null
    id_disciplina: number | null
    id_semestre: number | null
    data_hora_inicio: Date | null
    data_hora_final: Date | null
  }

  export type ChamadaMaxAggregateOutputType = {
    id: number | null
    id_professor: number | null
    id_disciplina: number | null
    id_semestre: number | null
    data_hora_inicio: Date | null
    data_hora_final: Date | null
  }

  export type ChamadaCountAggregateOutputType = {
    id: number
    id_professor: number
    id_disciplina: number
    id_semestre: number
    data_hora_inicio: number
    data_hora_final: number
    _all: number
  }


  export type ChamadaAvgAggregateInputType = {
    id?: true
    id_professor?: true
    id_disciplina?: true
    id_semestre?: true
  }

  export type ChamadaSumAggregateInputType = {
    id?: true
    id_professor?: true
    id_disciplina?: true
    id_semestre?: true
  }

  export type ChamadaMinAggregateInputType = {
    id?: true
    id_professor?: true
    id_disciplina?: true
    id_semestre?: true
    data_hora_inicio?: true
    data_hora_final?: true
  }

  export type ChamadaMaxAggregateInputType = {
    id?: true
    id_professor?: true
    id_disciplina?: true
    id_semestre?: true
    data_hora_inicio?: true
    data_hora_final?: true
  }

  export type ChamadaCountAggregateInputType = {
    id?: true
    id_professor?: true
    id_disciplina?: true
    id_semestre?: true
    data_hora_inicio?: true
    data_hora_final?: true
    _all?: true
  }

  export type ChamadaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chamada to aggregate.
     */
    where?: ChamadaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chamadas to fetch.
     */
    orderBy?: ChamadaOrderByWithRelationInput | ChamadaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChamadaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chamadas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chamadas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chamadas
    **/
    _count?: true | ChamadaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChamadaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChamadaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChamadaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChamadaMaxAggregateInputType
  }

  export type GetChamadaAggregateType<T extends ChamadaAggregateArgs> = {
        [P in keyof T & keyof AggregateChamada]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChamada[P]>
      : GetScalarType<T[P], AggregateChamada[P]>
  }




  export type ChamadaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChamadaWhereInput
    orderBy?: ChamadaOrderByWithAggregationInput | ChamadaOrderByWithAggregationInput[]
    by: ChamadaScalarFieldEnum[] | ChamadaScalarFieldEnum
    having?: ChamadaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChamadaCountAggregateInputType | true
    _avg?: ChamadaAvgAggregateInputType
    _sum?: ChamadaSumAggregateInputType
    _min?: ChamadaMinAggregateInputType
    _max?: ChamadaMaxAggregateInputType
  }

  export type ChamadaGroupByOutputType = {
    id: number
    id_professor: number
    id_disciplina: number
    id_semestre: number
    data_hora_inicio: Date | null
    data_hora_final: Date | null
    _count: ChamadaCountAggregateOutputType | null
    _avg: ChamadaAvgAggregateOutputType | null
    _sum: ChamadaSumAggregateOutputType | null
    _min: ChamadaMinAggregateOutputType | null
    _max: ChamadaMaxAggregateOutputType | null
  }

  type GetChamadaGroupByPayload<T extends ChamadaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChamadaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChamadaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChamadaGroupByOutputType[P]>
            : GetScalarType<T[P], ChamadaGroupByOutputType[P]>
        }
      >
    >


  export type ChamadaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_professor?: boolean
    id_disciplina?: boolean
    id_semestre?: boolean
    data_hora_inicio?: boolean
    data_hora_final?: boolean
    Professor?: boolean | UsuarioDefaultArgs<ExtArgs>
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
    ChamadaAluno?: boolean | Chamada$ChamadaAlunoArgs<ExtArgs>
    _count?: boolean | ChamadaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chamada"]>

  export type ChamadaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_professor?: boolean
    id_disciplina?: boolean
    id_semestre?: boolean
    data_hora_inicio?: boolean
    data_hora_final?: boolean
    Professor?: boolean | UsuarioDefaultArgs<ExtArgs>
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chamada"]>

  export type ChamadaSelectScalar = {
    id?: boolean
    id_professor?: boolean
    id_disciplina?: boolean
    id_semestre?: boolean
    data_hora_inicio?: boolean
    data_hora_final?: boolean
  }

  export type ChamadaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Professor?: boolean | UsuarioDefaultArgs<ExtArgs>
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
    ChamadaAluno?: boolean | Chamada$ChamadaAlunoArgs<ExtArgs>
    _count?: boolean | ChamadaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChamadaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Professor?: boolean | UsuarioDefaultArgs<ExtArgs>
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
  }

  export type $ChamadaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chamada"
    objects: {
      Professor: Prisma.$UsuarioPayload<ExtArgs>
      Disciplina: Prisma.$DisciplinaPayload<ExtArgs>
      Semestre: Prisma.$SemestrePayload<ExtArgs>
      ChamadaAluno: Prisma.$ChamadaAlunosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_professor: number
      id_disciplina: number
      id_semestre: number
      data_hora_inicio: Date | null
      data_hora_final: Date | null
    }, ExtArgs["result"]["chamada"]>
    composites: {}
  }

  type ChamadaGetPayload<S extends boolean | null | undefined | ChamadaDefaultArgs> = $Result.GetResult<Prisma.$ChamadaPayload, S>

  type ChamadaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChamadaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChamadaCountAggregateInputType | true
    }

  export interface ChamadaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chamada'], meta: { name: 'Chamada' } }
    /**
     * Find zero or one Chamada that matches the filter.
     * @param {ChamadaFindUniqueArgs} args - Arguments to find a Chamada
     * @example
     * // Get one Chamada
     * const chamada = await prisma.chamada.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChamadaFindUniqueArgs>(args: SelectSubset<T, ChamadaFindUniqueArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Chamada that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChamadaFindUniqueOrThrowArgs} args - Arguments to find a Chamada
     * @example
     * // Get one Chamada
     * const chamada = await prisma.chamada.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChamadaFindUniqueOrThrowArgs>(args: SelectSubset<T, ChamadaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Chamada that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaFindFirstArgs} args - Arguments to find a Chamada
     * @example
     * // Get one Chamada
     * const chamada = await prisma.chamada.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChamadaFindFirstArgs>(args?: SelectSubset<T, ChamadaFindFirstArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Chamada that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaFindFirstOrThrowArgs} args - Arguments to find a Chamada
     * @example
     * // Get one Chamada
     * const chamada = await prisma.chamada.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChamadaFindFirstOrThrowArgs>(args?: SelectSubset<T, ChamadaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Chamadas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chamadas
     * const chamadas = await prisma.chamada.findMany()
     * 
     * // Get first 10 Chamadas
     * const chamadas = await prisma.chamada.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chamadaWithIdOnly = await prisma.chamada.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChamadaFindManyArgs>(args?: SelectSubset<T, ChamadaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Chamada.
     * @param {ChamadaCreateArgs} args - Arguments to create a Chamada.
     * @example
     * // Create one Chamada
     * const Chamada = await prisma.chamada.create({
     *   data: {
     *     // ... data to create a Chamada
     *   }
     * })
     * 
     */
    create<T extends ChamadaCreateArgs>(args: SelectSubset<T, ChamadaCreateArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Chamadas.
     * @param {ChamadaCreateManyArgs} args - Arguments to create many Chamadas.
     * @example
     * // Create many Chamadas
     * const chamada = await prisma.chamada.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChamadaCreateManyArgs>(args?: SelectSubset<T, ChamadaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chamadas and returns the data saved in the database.
     * @param {ChamadaCreateManyAndReturnArgs} args - Arguments to create many Chamadas.
     * @example
     * // Create many Chamadas
     * const chamada = await prisma.chamada.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chamadas and only return the `id`
     * const chamadaWithIdOnly = await prisma.chamada.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChamadaCreateManyAndReturnArgs>(args?: SelectSubset<T, ChamadaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Chamada.
     * @param {ChamadaDeleteArgs} args - Arguments to delete one Chamada.
     * @example
     * // Delete one Chamada
     * const Chamada = await prisma.chamada.delete({
     *   where: {
     *     // ... filter to delete one Chamada
     *   }
     * })
     * 
     */
    delete<T extends ChamadaDeleteArgs>(args: SelectSubset<T, ChamadaDeleteArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Chamada.
     * @param {ChamadaUpdateArgs} args - Arguments to update one Chamada.
     * @example
     * // Update one Chamada
     * const chamada = await prisma.chamada.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChamadaUpdateArgs>(args: SelectSubset<T, ChamadaUpdateArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Chamadas.
     * @param {ChamadaDeleteManyArgs} args - Arguments to filter Chamadas to delete.
     * @example
     * // Delete a few Chamadas
     * const { count } = await prisma.chamada.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChamadaDeleteManyArgs>(args?: SelectSubset<T, ChamadaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chamadas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chamadas
     * const chamada = await prisma.chamada.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChamadaUpdateManyArgs>(args: SelectSubset<T, ChamadaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chamada.
     * @param {ChamadaUpsertArgs} args - Arguments to update or create a Chamada.
     * @example
     * // Update or create a Chamada
     * const chamada = await prisma.chamada.upsert({
     *   create: {
     *     // ... data to create a Chamada
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chamada we want to update
     *   }
     * })
     */
    upsert<T extends ChamadaUpsertArgs>(args: SelectSubset<T, ChamadaUpsertArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Chamadas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaCountArgs} args - Arguments to filter Chamadas to count.
     * @example
     * // Count the number of Chamadas
     * const count = await prisma.chamada.count({
     *   where: {
     *     // ... the filter for the Chamadas we want to count
     *   }
     * })
    **/
    count<T extends ChamadaCountArgs>(
      args?: Subset<T, ChamadaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChamadaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chamada.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChamadaAggregateArgs>(args: Subset<T, ChamadaAggregateArgs>): Prisma.PrismaPromise<GetChamadaAggregateType<T>>

    /**
     * Group by Chamada.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChamadaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChamadaGroupByArgs['orderBy'] }
        : { orderBy?: ChamadaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChamadaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChamadaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chamada model
   */
  readonly fields: ChamadaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chamada.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChamadaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Professor<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Disciplina<T extends DisciplinaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisciplinaDefaultArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Semestre<T extends SemestreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SemestreDefaultArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    ChamadaAluno<T extends Chamada$ChamadaAlunoArgs<ExtArgs> = {}>(args?: Subset<T, Chamada$ChamadaAlunoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chamada model
   */ 
  interface ChamadaFieldRefs {
    readonly id: FieldRef<"Chamada", 'Int'>
    readonly id_professor: FieldRef<"Chamada", 'Int'>
    readonly id_disciplina: FieldRef<"Chamada", 'Int'>
    readonly id_semestre: FieldRef<"Chamada", 'Int'>
    readonly data_hora_inicio: FieldRef<"Chamada", 'DateTime'>
    readonly data_hora_final: FieldRef<"Chamada", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Chamada findUnique
   */
  export type ChamadaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * Filter, which Chamada to fetch.
     */
    where: ChamadaWhereUniqueInput
  }

  /**
   * Chamada findUniqueOrThrow
   */
  export type ChamadaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * Filter, which Chamada to fetch.
     */
    where: ChamadaWhereUniqueInput
  }

  /**
   * Chamada findFirst
   */
  export type ChamadaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * Filter, which Chamada to fetch.
     */
    where?: ChamadaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chamadas to fetch.
     */
    orderBy?: ChamadaOrderByWithRelationInput | ChamadaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chamadas.
     */
    cursor?: ChamadaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chamadas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chamadas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chamadas.
     */
    distinct?: ChamadaScalarFieldEnum | ChamadaScalarFieldEnum[]
  }

  /**
   * Chamada findFirstOrThrow
   */
  export type ChamadaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * Filter, which Chamada to fetch.
     */
    where?: ChamadaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chamadas to fetch.
     */
    orderBy?: ChamadaOrderByWithRelationInput | ChamadaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chamadas.
     */
    cursor?: ChamadaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chamadas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chamadas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chamadas.
     */
    distinct?: ChamadaScalarFieldEnum | ChamadaScalarFieldEnum[]
  }

  /**
   * Chamada findMany
   */
  export type ChamadaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * Filter, which Chamadas to fetch.
     */
    where?: ChamadaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chamadas to fetch.
     */
    orderBy?: ChamadaOrderByWithRelationInput | ChamadaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chamadas.
     */
    cursor?: ChamadaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chamadas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chamadas.
     */
    skip?: number
    distinct?: ChamadaScalarFieldEnum | ChamadaScalarFieldEnum[]
  }

  /**
   * Chamada create
   */
  export type ChamadaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * The data needed to create a Chamada.
     */
    data: XOR<ChamadaCreateInput, ChamadaUncheckedCreateInput>
  }

  /**
   * Chamada createMany
   */
  export type ChamadaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chamadas.
     */
    data: ChamadaCreateManyInput | ChamadaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chamada createManyAndReturn
   */
  export type ChamadaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Chamadas.
     */
    data: ChamadaCreateManyInput | ChamadaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chamada update
   */
  export type ChamadaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * The data needed to update a Chamada.
     */
    data: XOR<ChamadaUpdateInput, ChamadaUncheckedUpdateInput>
    /**
     * Choose, which Chamada to update.
     */
    where: ChamadaWhereUniqueInput
  }

  /**
   * Chamada updateMany
   */
  export type ChamadaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chamadas.
     */
    data: XOR<ChamadaUpdateManyMutationInput, ChamadaUncheckedUpdateManyInput>
    /**
     * Filter which Chamadas to update
     */
    where?: ChamadaWhereInput
  }

  /**
   * Chamada upsert
   */
  export type ChamadaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * The filter to search for the Chamada to update in case it exists.
     */
    where: ChamadaWhereUniqueInput
    /**
     * In case the Chamada found by the `where` argument doesn't exist, create a new Chamada with this data.
     */
    create: XOR<ChamadaCreateInput, ChamadaUncheckedCreateInput>
    /**
     * In case the Chamada was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChamadaUpdateInput, ChamadaUncheckedUpdateInput>
  }

  /**
   * Chamada delete
   */
  export type ChamadaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
    /**
     * Filter which Chamada to delete.
     */
    where: ChamadaWhereUniqueInput
  }

  /**
   * Chamada deleteMany
   */
  export type ChamadaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chamadas to delete
     */
    where?: ChamadaWhereInput
  }

  /**
   * Chamada.ChamadaAluno
   */
  export type Chamada$ChamadaAlunoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    where?: ChamadaAlunosWhereInput
    orderBy?: ChamadaAlunosOrderByWithRelationInput | ChamadaAlunosOrderByWithRelationInput[]
    cursor?: ChamadaAlunosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChamadaAlunosScalarFieldEnum | ChamadaAlunosScalarFieldEnum[]
  }

  /**
   * Chamada without action
   */
  export type ChamadaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chamada
     */
    select?: ChamadaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaInclude<ExtArgs> | null
  }


  /**
   * Model ChamadaAlunos
   */

  export type AggregateChamadaAlunos = {
    _count: ChamadaAlunosCountAggregateOutputType | null
    _avg: ChamadaAlunosAvgAggregateOutputType | null
    _sum: ChamadaAlunosSumAggregateOutputType | null
    _min: ChamadaAlunosMinAggregateOutputType | null
    _max: ChamadaAlunosMaxAggregateOutputType | null
  }

  export type ChamadaAlunosAvgAggregateOutputType = {
    id: number | null
    id_chamada: number | null
    id_aluno: number | null
  }

  export type ChamadaAlunosSumAggregateOutputType = {
    id: number | null
    id_chamada: number | null
    id_aluno: number | null
  }

  export type ChamadaAlunosMinAggregateOutputType = {
    id: number | null
    id_chamada: number | null
    id_aluno: number | null
  }

  export type ChamadaAlunosMaxAggregateOutputType = {
    id: number | null
    id_chamada: number | null
    id_aluno: number | null
  }

  export type ChamadaAlunosCountAggregateOutputType = {
    id: number
    id_chamada: number
    id_aluno: number
    _all: number
  }


  export type ChamadaAlunosAvgAggregateInputType = {
    id?: true
    id_chamada?: true
    id_aluno?: true
  }

  export type ChamadaAlunosSumAggregateInputType = {
    id?: true
    id_chamada?: true
    id_aluno?: true
  }

  export type ChamadaAlunosMinAggregateInputType = {
    id?: true
    id_chamada?: true
    id_aluno?: true
  }

  export type ChamadaAlunosMaxAggregateInputType = {
    id?: true
    id_chamada?: true
    id_aluno?: true
  }

  export type ChamadaAlunosCountAggregateInputType = {
    id?: true
    id_chamada?: true
    id_aluno?: true
    _all?: true
  }

  export type ChamadaAlunosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChamadaAlunos to aggregate.
     */
    where?: ChamadaAlunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChamadaAlunos to fetch.
     */
    orderBy?: ChamadaAlunosOrderByWithRelationInput | ChamadaAlunosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChamadaAlunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChamadaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChamadaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChamadaAlunos
    **/
    _count?: true | ChamadaAlunosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChamadaAlunosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChamadaAlunosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChamadaAlunosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChamadaAlunosMaxAggregateInputType
  }

  export type GetChamadaAlunosAggregateType<T extends ChamadaAlunosAggregateArgs> = {
        [P in keyof T & keyof AggregateChamadaAlunos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChamadaAlunos[P]>
      : GetScalarType<T[P], AggregateChamadaAlunos[P]>
  }




  export type ChamadaAlunosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChamadaAlunosWhereInput
    orderBy?: ChamadaAlunosOrderByWithAggregationInput | ChamadaAlunosOrderByWithAggregationInput[]
    by: ChamadaAlunosScalarFieldEnum[] | ChamadaAlunosScalarFieldEnum
    having?: ChamadaAlunosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChamadaAlunosCountAggregateInputType | true
    _avg?: ChamadaAlunosAvgAggregateInputType
    _sum?: ChamadaAlunosSumAggregateInputType
    _min?: ChamadaAlunosMinAggregateInputType
    _max?: ChamadaAlunosMaxAggregateInputType
  }

  export type ChamadaAlunosGroupByOutputType = {
    id: number
    id_chamada: number
    id_aluno: number
    _count: ChamadaAlunosCountAggregateOutputType | null
    _avg: ChamadaAlunosAvgAggregateOutputType | null
    _sum: ChamadaAlunosSumAggregateOutputType | null
    _min: ChamadaAlunosMinAggregateOutputType | null
    _max: ChamadaAlunosMaxAggregateOutputType | null
  }

  type GetChamadaAlunosGroupByPayload<T extends ChamadaAlunosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChamadaAlunosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChamadaAlunosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChamadaAlunosGroupByOutputType[P]>
            : GetScalarType<T[P], ChamadaAlunosGroupByOutputType[P]>
        }
      >
    >


  export type ChamadaAlunosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_chamada?: boolean
    id_aluno?: boolean
    Chamada?: boolean | ChamadaDefaultArgs<ExtArgs>
    Usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chamadaAlunos"]>

  export type ChamadaAlunosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_chamada?: boolean
    id_aluno?: boolean
    Chamada?: boolean | ChamadaDefaultArgs<ExtArgs>
    Usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chamadaAlunos"]>

  export type ChamadaAlunosSelectScalar = {
    id?: boolean
    id_chamada?: boolean
    id_aluno?: boolean
  }

  export type ChamadaAlunosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Chamada?: boolean | ChamadaDefaultArgs<ExtArgs>
    Usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ChamadaAlunosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Chamada?: boolean | ChamadaDefaultArgs<ExtArgs>
    Usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $ChamadaAlunosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChamadaAlunos"
    objects: {
      Chamada: Prisma.$ChamadaPayload<ExtArgs>
      Usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_chamada: number
      id_aluno: number
    }, ExtArgs["result"]["chamadaAlunos"]>
    composites: {}
  }

  type ChamadaAlunosGetPayload<S extends boolean | null | undefined | ChamadaAlunosDefaultArgs> = $Result.GetResult<Prisma.$ChamadaAlunosPayload, S>

  type ChamadaAlunosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChamadaAlunosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChamadaAlunosCountAggregateInputType | true
    }

  export interface ChamadaAlunosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChamadaAlunos'], meta: { name: 'ChamadaAlunos' } }
    /**
     * Find zero or one ChamadaAlunos that matches the filter.
     * @param {ChamadaAlunosFindUniqueArgs} args - Arguments to find a ChamadaAlunos
     * @example
     * // Get one ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChamadaAlunosFindUniqueArgs>(args: SelectSubset<T, ChamadaAlunosFindUniqueArgs<ExtArgs>>): Prisma__ChamadaAlunosClient<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChamadaAlunos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChamadaAlunosFindUniqueOrThrowArgs} args - Arguments to find a ChamadaAlunos
     * @example
     * // Get one ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChamadaAlunosFindUniqueOrThrowArgs>(args: SelectSubset<T, ChamadaAlunosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChamadaAlunosClient<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChamadaAlunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaAlunosFindFirstArgs} args - Arguments to find a ChamadaAlunos
     * @example
     * // Get one ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChamadaAlunosFindFirstArgs>(args?: SelectSubset<T, ChamadaAlunosFindFirstArgs<ExtArgs>>): Prisma__ChamadaAlunosClient<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChamadaAlunos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaAlunosFindFirstOrThrowArgs} args - Arguments to find a ChamadaAlunos
     * @example
     * // Get one ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChamadaAlunosFindFirstOrThrowArgs>(args?: SelectSubset<T, ChamadaAlunosFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChamadaAlunosClient<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChamadaAlunos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaAlunosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.findMany()
     * 
     * // Get first 10 ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chamadaAlunosWithIdOnly = await prisma.chamadaAlunos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChamadaAlunosFindManyArgs>(args?: SelectSubset<T, ChamadaAlunosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChamadaAlunos.
     * @param {ChamadaAlunosCreateArgs} args - Arguments to create a ChamadaAlunos.
     * @example
     * // Create one ChamadaAlunos
     * const ChamadaAlunos = await prisma.chamadaAlunos.create({
     *   data: {
     *     // ... data to create a ChamadaAlunos
     *   }
     * })
     * 
     */
    create<T extends ChamadaAlunosCreateArgs>(args: SelectSubset<T, ChamadaAlunosCreateArgs<ExtArgs>>): Prisma__ChamadaAlunosClient<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChamadaAlunos.
     * @param {ChamadaAlunosCreateManyArgs} args - Arguments to create many ChamadaAlunos.
     * @example
     * // Create many ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChamadaAlunosCreateManyArgs>(args?: SelectSubset<T, ChamadaAlunosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChamadaAlunos and returns the data saved in the database.
     * @param {ChamadaAlunosCreateManyAndReturnArgs} args - Arguments to create many ChamadaAlunos.
     * @example
     * // Create many ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChamadaAlunos and only return the `id`
     * const chamadaAlunosWithIdOnly = await prisma.chamadaAlunos.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChamadaAlunosCreateManyAndReturnArgs>(args?: SelectSubset<T, ChamadaAlunosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChamadaAlunos.
     * @param {ChamadaAlunosDeleteArgs} args - Arguments to delete one ChamadaAlunos.
     * @example
     * // Delete one ChamadaAlunos
     * const ChamadaAlunos = await prisma.chamadaAlunos.delete({
     *   where: {
     *     // ... filter to delete one ChamadaAlunos
     *   }
     * })
     * 
     */
    delete<T extends ChamadaAlunosDeleteArgs>(args: SelectSubset<T, ChamadaAlunosDeleteArgs<ExtArgs>>): Prisma__ChamadaAlunosClient<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChamadaAlunos.
     * @param {ChamadaAlunosUpdateArgs} args - Arguments to update one ChamadaAlunos.
     * @example
     * // Update one ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChamadaAlunosUpdateArgs>(args: SelectSubset<T, ChamadaAlunosUpdateArgs<ExtArgs>>): Prisma__ChamadaAlunosClient<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChamadaAlunos.
     * @param {ChamadaAlunosDeleteManyArgs} args - Arguments to filter ChamadaAlunos to delete.
     * @example
     * // Delete a few ChamadaAlunos
     * const { count } = await prisma.chamadaAlunos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChamadaAlunosDeleteManyArgs>(args?: SelectSubset<T, ChamadaAlunosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChamadaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaAlunosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChamadaAlunosUpdateManyArgs>(args: SelectSubset<T, ChamadaAlunosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChamadaAlunos.
     * @param {ChamadaAlunosUpsertArgs} args - Arguments to update or create a ChamadaAlunos.
     * @example
     * // Update or create a ChamadaAlunos
     * const chamadaAlunos = await prisma.chamadaAlunos.upsert({
     *   create: {
     *     // ... data to create a ChamadaAlunos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChamadaAlunos we want to update
     *   }
     * })
     */
    upsert<T extends ChamadaAlunosUpsertArgs>(args: SelectSubset<T, ChamadaAlunosUpsertArgs<ExtArgs>>): Prisma__ChamadaAlunosClient<$Result.GetResult<Prisma.$ChamadaAlunosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChamadaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaAlunosCountArgs} args - Arguments to filter ChamadaAlunos to count.
     * @example
     * // Count the number of ChamadaAlunos
     * const count = await prisma.chamadaAlunos.count({
     *   where: {
     *     // ... the filter for the ChamadaAlunos we want to count
     *   }
     * })
    **/
    count<T extends ChamadaAlunosCountArgs>(
      args?: Subset<T, ChamadaAlunosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChamadaAlunosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChamadaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaAlunosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChamadaAlunosAggregateArgs>(args: Subset<T, ChamadaAlunosAggregateArgs>): Prisma.PrismaPromise<GetChamadaAlunosAggregateType<T>>

    /**
     * Group by ChamadaAlunos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChamadaAlunosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChamadaAlunosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChamadaAlunosGroupByArgs['orderBy'] }
        : { orderBy?: ChamadaAlunosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChamadaAlunosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChamadaAlunosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChamadaAlunos model
   */
  readonly fields: ChamadaAlunosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChamadaAlunos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChamadaAlunosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Chamada<T extends ChamadaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChamadaDefaultArgs<ExtArgs>>): Prisma__ChamadaClient<$Result.GetResult<Prisma.$ChamadaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChamadaAlunos model
   */ 
  interface ChamadaAlunosFieldRefs {
    readonly id: FieldRef<"ChamadaAlunos", 'Int'>
    readonly id_chamada: FieldRef<"ChamadaAlunos", 'Int'>
    readonly id_aluno: FieldRef<"ChamadaAlunos", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ChamadaAlunos findUnique
   */
  export type ChamadaAlunosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which ChamadaAlunos to fetch.
     */
    where: ChamadaAlunosWhereUniqueInput
  }

  /**
   * ChamadaAlunos findUniqueOrThrow
   */
  export type ChamadaAlunosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which ChamadaAlunos to fetch.
     */
    where: ChamadaAlunosWhereUniqueInput
  }

  /**
   * ChamadaAlunos findFirst
   */
  export type ChamadaAlunosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which ChamadaAlunos to fetch.
     */
    where?: ChamadaAlunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChamadaAlunos to fetch.
     */
    orderBy?: ChamadaAlunosOrderByWithRelationInput | ChamadaAlunosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChamadaAlunos.
     */
    cursor?: ChamadaAlunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChamadaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChamadaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChamadaAlunos.
     */
    distinct?: ChamadaAlunosScalarFieldEnum | ChamadaAlunosScalarFieldEnum[]
  }

  /**
   * ChamadaAlunos findFirstOrThrow
   */
  export type ChamadaAlunosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which ChamadaAlunos to fetch.
     */
    where?: ChamadaAlunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChamadaAlunos to fetch.
     */
    orderBy?: ChamadaAlunosOrderByWithRelationInput | ChamadaAlunosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChamadaAlunos.
     */
    cursor?: ChamadaAlunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChamadaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChamadaAlunos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChamadaAlunos.
     */
    distinct?: ChamadaAlunosScalarFieldEnum | ChamadaAlunosScalarFieldEnum[]
  }

  /**
   * ChamadaAlunos findMany
   */
  export type ChamadaAlunosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * Filter, which ChamadaAlunos to fetch.
     */
    where?: ChamadaAlunosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChamadaAlunos to fetch.
     */
    orderBy?: ChamadaAlunosOrderByWithRelationInput | ChamadaAlunosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChamadaAlunos.
     */
    cursor?: ChamadaAlunosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChamadaAlunos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChamadaAlunos.
     */
    skip?: number
    distinct?: ChamadaAlunosScalarFieldEnum | ChamadaAlunosScalarFieldEnum[]
  }

  /**
   * ChamadaAlunos create
   */
  export type ChamadaAlunosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * The data needed to create a ChamadaAlunos.
     */
    data: XOR<ChamadaAlunosCreateInput, ChamadaAlunosUncheckedCreateInput>
  }

  /**
   * ChamadaAlunos createMany
   */
  export type ChamadaAlunosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChamadaAlunos.
     */
    data: ChamadaAlunosCreateManyInput | ChamadaAlunosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChamadaAlunos createManyAndReturn
   */
  export type ChamadaAlunosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChamadaAlunos.
     */
    data: ChamadaAlunosCreateManyInput | ChamadaAlunosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChamadaAlunos update
   */
  export type ChamadaAlunosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * The data needed to update a ChamadaAlunos.
     */
    data: XOR<ChamadaAlunosUpdateInput, ChamadaAlunosUncheckedUpdateInput>
    /**
     * Choose, which ChamadaAlunos to update.
     */
    where: ChamadaAlunosWhereUniqueInput
  }

  /**
   * ChamadaAlunos updateMany
   */
  export type ChamadaAlunosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChamadaAlunos.
     */
    data: XOR<ChamadaAlunosUpdateManyMutationInput, ChamadaAlunosUncheckedUpdateManyInput>
    /**
     * Filter which ChamadaAlunos to update
     */
    where?: ChamadaAlunosWhereInput
  }

  /**
   * ChamadaAlunos upsert
   */
  export type ChamadaAlunosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * The filter to search for the ChamadaAlunos to update in case it exists.
     */
    where: ChamadaAlunosWhereUniqueInput
    /**
     * In case the ChamadaAlunos found by the `where` argument doesn't exist, create a new ChamadaAlunos with this data.
     */
    create: XOR<ChamadaAlunosCreateInput, ChamadaAlunosUncheckedCreateInput>
    /**
     * In case the ChamadaAlunos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChamadaAlunosUpdateInput, ChamadaAlunosUncheckedUpdateInput>
  }

  /**
   * ChamadaAlunos delete
   */
  export type ChamadaAlunosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
    /**
     * Filter which ChamadaAlunos to delete.
     */
    where: ChamadaAlunosWhereUniqueInput
  }

  /**
   * ChamadaAlunos deleteMany
   */
  export type ChamadaAlunosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChamadaAlunos to delete
     */
    where?: ChamadaAlunosWhereInput
  }

  /**
   * ChamadaAlunos without action
   */
  export type ChamadaAlunosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChamadaAlunos
     */
    select?: ChamadaAlunosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChamadaAlunosInclude<ExtArgs> | null
  }


  /**
   * Model SemestreProfessorDisciplinas
   */

  export type AggregateSemestreProfessorDisciplinas = {
    _count: SemestreProfessorDisciplinasCountAggregateOutputType | null
    _avg: SemestreProfessorDisciplinasAvgAggregateOutputType | null
    _sum: SemestreProfessorDisciplinasSumAggregateOutputType | null
    _min: SemestreProfessorDisciplinasMinAggregateOutputType | null
    _max: SemestreProfessorDisciplinasMaxAggregateOutputType | null
  }

  export type SemestreProfessorDisciplinasAvgAggregateOutputType = {
    id: number | null
    id_disciplina: number | null
    id_professor: number | null
    id_semestre: number | null
  }

  export type SemestreProfessorDisciplinasSumAggregateOutputType = {
    id: number | null
    id_disciplina: number | null
    id_professor: number | null
    id_semestre: number | null
  }

  export type SemestreProfessorDisciplinasMinAggregateOutputType = {
    id: number | null
    id_disciplina: number | null
    id_professor: number | null
    id_semestre: number | null
  }

  export type SemestreProfessorDisciplinasMaxAggregateOutputType = {
    id: number | null
    id_disciplina: number | null
    id_professor: number | null
    id_semestre: number | null
  }

  export type SemestreProfessorDisciplinasCountAggregateOutputType = {
    id: number
    id_disciplina: number
    id_professor: number
    id_semestre: number
    _all: number
  }


  export type SemestreProfessorDisciplinasAvgAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_professor?: true
    id_semestre?: true
  }

  export type SemestreProfessorDisciplinasSumAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_professor?: true
    id_semestre?: true
  }

  export type SemestreProfessorDisciplinasMinAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_professor?: true
    id_semestre?: true
  }

  export type SemestreProfessorDisciplinasMaxAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_professor?: true
    id_semestre?: true
  }

  export type SemestreProfessorDisciplinasCountAggregateInputType = {
    id?: true
    id_disciplina?: true
    id_professor?: true
    id_semestre?: true
    _all?: true
  }

  export type SemestreProfessorDisciplinasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SemestreProfessorDisciplinas to aggregate.
     */
    where?: SemestreProfessorDisciplinasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SemestreProfessorDisciplinas to fetch.
     */
    orderBy?: SemestreProfessorDisciplinasOrderByWithRelationInput | SemestreProfessorDisciplinasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SemestreProfessorDisciplinasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SemestreProfessorDisciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SemestreProfessorDisciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SemestreProfessorDisciplinas
    **/
    _count?: true | SemestreProfessorDisciplinasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SemestreProfessorDisciplinasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SemestreProfessorDisciplinasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SemestreProfessorDisciplinasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SemestreProfessorDisciplinasMaxAggregateInputType
  }

  export type GetSemestreProfessorDisciplinasAggregateType<T extends SemestreProfessorDisciplinasAggregateArgs> = {
        [P in keyof T & keyof AggregateSemestreProfessorDisciplinas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSemestreProfessorDisciplinas[P]>
      : GetScalarType<T[P], AggregateSemestreProfessorDisciplinas[P]>
  }




  export type SemestreProfessorDisciplinasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SemestreProfessorDisciplinasWhereInput
    orderBy?: SemestreProfessorDisciplinasOrderByWithAggregationInput | SemestreProfessorDisciplinasOrderByWithAggregationInput[]
    by: SemestreProfessorDisciplinasScalarFieldEnum[] | SemestreProfessorDisciplinasScalarFieldEnum
    having?: SemestreProfessorDisciplinasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SemestreProfessorDisciplinasCountAggregateInputType | true
    _avg?: SemestreProfessorDisciplinasAvgAggregateInputType
    _sum?: SemestreProfessorDisciplinasSumAggregateInputType
    _min?: SemestreProfessorDisciplinasMinAggregateInputType
    _max?: SemestreProfessorDisciplinasMaxAggregateInputType
  }

  export type SemestreProfessorDisciplinasGroupByOutputType = {
    id: number
    id_disciplina: number
    id_professor: number
    id_semestre: number
    _count: SemestreProfessorDisciplinasCountAggregateOutputType | null
    _avg: SemestreProfessorDisciplinasAvgAggregateOutputType | null
    _sum: SemestreProfessorDisciplinasSumAggregateOutputType | null
    _min: SemestreProfessorDisciplinasMinAggregateOutputType | null
    _max: SemestreProfessorDisciplinasMaxAggregateOutputType | null
  }

  type GetSemestreProfessorDisciplinasGroupByPayload<T extends SemestreProfessorDisciplinasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SemestreProfessorDisciplinasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SemestreProfessorDisciplinasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SemestreProfessorDisciplinasGroupByOutputType[P]>
            : GetScalarType<T[P], SemestreProfessorDisciplinasGroupByOutputType[P]>
        }
      >
    >


  export type SemestreProfessorDisciplinasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_disciplina?: boolean
    id_professor?: boolean
    id_semestre?: boolean
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Professor?: boolean | UsuarioDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["semestreProfessorDisciplinas"]>

  export type SemestreProfessorDisciplinasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_disciplina?: boolean
    id_professor?: boolean
    id_semestre?: boolean
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Professor?: boolean | UsuarioDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["semestreProfessorDisciplinas"]>

  export type SemestreProfessorDisciplinasSelectScalar = {
    id?: boolean
    id_disciplina?: boolean
    id_professor?: boolean
    id_semestre?: boolean
  }

  export type SemestreProfessorDisciplinasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Professor?: boolean | UsuarioDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
  }
  export type SemestreProfessorDisciplinasIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Disciplina?: boolean | DisciplinaDefaultArgs<ExtArgs>
    Professor?: boolean | UsuarioDefaultArgs<ExtArgs>
    Semestre?: boolean | SemestreDefaultArgs<ExtArgs>
  }

  export type $SemestreProfessorDisciplinasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SemestreProfessorDisciplinas"
    objects: {
      Disciplina: Prisma.$DisciplinaPayload<ExtArgs>
      Professor: Prisma.$UsuarioPayload<ExtArgs>
      Semestre: Prisma.$SemestrePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_disciplina: number
      id_professor: number
      id_semestre: number
    }, ExtArgs["result"]["semestreProfessorDisciplinas"]>
    composites: {}
  }

  type SemestreProfessorDisciplinasGetPayload<S extends boolean | null | undefined | SemestreProfessorDisciplinasDefaultArgs> = $Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload, S>

  type SemestreProfessorDisciplinasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SemestreProfessorDisciplinasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SemestreProfessorDisciplinasCountAggregateInputType | true
    }

  export interface SemestreProfessorDisciplinasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SemestreProfessorDisciplinas'], meta: { name: 'SemestreProfessorDisciplinas' } }
    /**
     * Find zero or one SemestreProfessorDisciplinas that matches the filter.
     * @param {SemestreProfessorDisciplinasFindUniqueArgs} args - Arguments to find a SemestreProfessorDisciplinas
     * @example
     * // Get one SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SemestreProfessorDisciplinasFindUniqueArgs>(args: SelectSubset<T, SemestreProfessorDisciplinasFindUniqueArgs<ExtArgs>>): Prisma__SemestreProfessorDisciplinasClient<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SemestreProfessorDisciplinas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SemestreProfessorDisciplinasFindUniqueOrThrowArgs} args - Arguments to find a SemestreProfessorDisciplinas
     * @example
     * // Get one SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SemestreProfessorDisciplinasFindUniqueOrThrowArgs>(args: SelectSubset<T, SemestreProfessorDisciplinasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SemestreProfessorDisciplinasClient<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SemestreProfessorDisciplinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreProfessorDisciplinasFindFirstArgs} args - Arguments to find a SemestreProfessorDisciplinas
     * @example
     * // Get one SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SemestreProfessorDisciplinasFindFirstArgs>(args?: SelectSubset<T, SemestreProfessorDisciplinasFindFirstArgs<ExtArgs>>): Prisma__SemestreProfessorDisciplinasClient<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SemestreProfessorDisciplinas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreProfessorDisciplinasFindFirstOrThrowArgs} args - Arguments to find a SemestreProfessorDisciplinas
     * @example
     * // Get one SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SemestreProfessorDisciplinasFindFirstOrThrowArgs>(args?: SelectSubset<T, SemestreProfessorDisciplinasFindFirstOrThrowArgs<ExtArgs>>): Prisma__SemestreProfessorDisciplinasClient<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SemestreProfessorDisciplinas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreProfessorDisciplinasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.findMany()
     * 
     * // Get first 10 SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const semestreProfessorDisciplinasWithIdOnly = await prisma.semestreProfessorDisciplinas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SemestreProfessorDisciplinasFindManyArgs>(args?: SelectSubset<T, SemestreProfessorDisciplinasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SemestreProfessorDisciplinas.
     * @param {SemestreProfessorDisciplinasCreateArgs} args - Arguments to create a SemestreProfessorDisciplinas.
     * @example
     * // Create one SemestreProfessorDisciplinas
     * const SemestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.create({
     *   data: {
     *     // ... data to create a SemestreProfessorDisciplinas
     *   }
     * })
     * 
     */
    create<T extends SemestreProfessorDisciplinasCreateArgs>(args: SelectSubset<T, SemestreProfessorDisciplinasCreateArgs<ExtArgs>>): Prisma__SemestreProfessorDisciplinasClient<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SemestreProfessorDisciplinas.
     * @param {SemestreProfessorDisciplinasCreateManyArgs} args - Arguments to create many SemestreProfessorDisciplinas.
     * @example
     * // Create many SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SemestreProfessorDisciplinasCreateManyArgs>(args?: SelectSubset<T, SemestreProfessorDisciplinasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SemestreProfessorDisciplinas and returns the data saved in the database.
     * @param {SemestreProfessorDisciplinasCreateManyAndReturnArgs} args - Arguments to create many SemestreProfessorDisciplinas.
     * @example
     * // Create many SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SemestreProfessorDisciplinas and only return the `id`
     * const semestreProfessorDisciplinasWithIdOnly = await prisma.semestreProfessorDisciplinas.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SemestreProfessorDisciplinasCreateManyAndReturnArgs>(args?: SelectSubset<T, SemestreProfessorDisciplinasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SemestreProfessorDisciplinas.
     * @param {SemestreProfessorDisciplinasDeleteArgs} args - Arguments to delete one SemestreProfessorDisciplinas.
     * @example
     * // Delete one SemestreProfessorDisciplinas
     * const SemestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.delete({
     *   where: {
     *     // ... filter to delete one SemestreProfessorDisciplinas
     *   }
     * })
     * 
     */
    delete<T extends SemestreProfessorDisciplinasDeleteArgs>(args: SelectSubset<T, SemestreProfessorDisciplinasDeleteArgs<ExtArgs>>): Prisma__SemestreProfessorDisciplinasClient<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SemestreProfessorDisciplinas.
     * @param {SemestreProfessorDisciplinasUpdateArgs} args - Arguments to update one SemestreProfessorDisciplinas.
     * @example
     * // Update one SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SemestreProfessorDisciplinasUpdateArgs>(args: SelectSubset<T, SemestreProfessorDisciplinasUpdateArgs<ExtArgs>>): Prisma__SemestreProfessorDisciplinasClient<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SemestreProfessorDisciplinas.
     * @param {SemestreProfessorDisciplinasDeleteManyArgs} args - Arguments to filter SemestreProfessorDisciplinas to delete.
     * @example
     * // Delete a few SemestreProfessorDisciplinas
     * const { count } = await prisma.semestreProfessorDisciplinas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SemestreProfessorDisciplinasDeleteManyArgs>(args?: SelectSubset<T, SemestreProfessorDisciplinasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SemestreProfessorDisciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreProfessorDisciplinasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SemestreProfessorDisciplinasUpdateManyArgs>(args: SelectSubset<T, SemestreProfessorDisciplinasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SemestreProfessorDisciplinas.
     * @param {SemestreProfessorDisciplinasUpsertArgs} args - Arguments to update or create a SemestreProfessorDisciplinas.
     * @example
     * // Update or create a SemestreProfessorDisciplinas
     * const semestreProfessorDisciplinas = await prisma.semestreProfessorDisciplinas.upsert({
     *   create: {
     *     // ... data to create a SemestreProfessorDisciplinas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SemestreProfessorDisciplinas we want to update
     *   }
     * })
     */
    upsert<T extends SemestreProfessorDisciplinasUpsertArgs>(args: SelectSubset<T, SemestreProfessorDisciplinasUpsertArgs<ExtArgs>>): Prisma__SemestreProfessorDisciplinasClient<$Result.GetResult<Prisma.$SemestreProfessorDisciplinasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SemestreProfessorDisciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreProfessorDisciplinasCountArgs} args - Arguments to filter SemestreProfessorDisciplinas to count.
     * @example
     * // Count the number of SemestreProfessorDisciplinas
     * const count = await prisma.semestreProfessorDisciplinas.count({
     *   where: {
     *     // ... the filter for the SemestreProfessorDisciplinas we want to count
     *   }
     * })
    **/
    count<T extends SemestreProfessorDisciplinasCountArgs>(
      args?: Subset<T, SemestreProfessorDisciplinasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SemestreProfessorDisciplinasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SemestreProfessorDisciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreProfessorDisciplinasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SemestreProfessorDisciplinasAggregateArgs>(args: Subset<T, SemestreProfessorDisciplinasAggregateArgs>): Prisma.PrismaPromise<GetSemestreProfessorDisciplinasAggregateType<T>>

    /**
     * Group by SemestreProfessorDisciplinas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SemestreProfessorDisciplinasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SemestreProfessorDisciplinasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SemestreProfessorDisciplinasGroupByArgs['orderBy'] }
        : { orderBy?: SemestreProfessorDisciplinasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SemestreProfessorDisciplinasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSemestreProfessorDisciplinasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SemestreProfessorDisciplinas model
   */
  readonly fields: SemestreProfessorDisciplinasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SemestreProfessorDisciplinas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SemestreProfessorDisciplinasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Disciplina<T extends DisciplinaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisciplinaDefaultArgs<ExtArgs>>): Prisma__DisciplinaClient<$Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Professor<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Semestre<T extends SemestreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SemestreDefaultArgs<ExtArgs>>): Prisma__SemestreClient<$Result.GetResult<Prisma.$SemestrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SemestreProfessorDisciplinas model
   */ 
  interface SemestreProfessorDisciplinasFieldRefs {
    readonly id: FieldRef<"SemestreProfessorDisciplinas", 'Int'>
    readonly id_disciplina: FieldRef<"SemestreProfessorDisciplinas", 'Int'>
    readonly id_professor: FieldRef<"SemestreProfessorDisciplinas", 'Int'>
    readonly id_semestre: FieldRef<"SemestreProfessorDisciplinas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SemestreProfessorDisciplinas findUnique
   */
  export type SemestreProfessorDisciplinasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which SemestreProfessorDisciplinas to fetch.
     */
    where: SemestreProfessorDisciplinasWhereUniqueInput
  }

  /**
   * SemestreProfessorDisciplinas findUniqueOrThrow
   */
  export type SemestreProfessorDisciplinasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which SemestreProfessorDisciplinas to fetch.
     */
    where: SemestreProfessorDisciplinasWhereUniqueInput
  }

  /**
   * SemestreProfessorDisciplinas findFirst
   */
  export type SemestreProfessorDisciplinasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which SemestreProfessorDisciplinas to fetch.
     */
    where?: SemestreProfessorDisciplinasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SemestreProfessorDisciplinas to fetch.
     */
    orderBy?: SemestreProfessorDisciplinasOrderByWithRelationInput | SemestreProfessorDisciplinasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SemestreProfessorDisciplinas.
     */
    cursor?: SemestreProfessorDisciplinasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SemestreProfessorDisciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SemestreProfessorDisciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SemestreProfessorDisciplinas.
     */
    distinct?: SemestreProfessorDisciplinasScalarFieldEnum | SemestreProfessorDisciplinasScalarFieldEnum[]
  }

  /**
   * SemestreProfessorDisciplinas findFirstOrThrow
   */
  export type SemestreProfessorDisciplinasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which SemestreProfessorDisciplinas to fetch.
     */
    where?: SemestreProfessorDisciplinasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SemestreProfessorDisciplinas to fetch.
     */
    orderBy?: SemestreProfessorDisciplinasOrderByWithRelationInput | SemestreProfessorDisciplinasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SemestreProfessorDisciplinas.
     */
    cursor?: SemestreProfessorDisciplinasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SemestreProfessorDisciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SemestreProfessorDisciplinas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SemestreProfessorDisciplinas.
     */
    distinct?: SemestreProfessorDisciplinasScalarFieldEnum | SemestreProfessorDisciplinasScalarFieldEnum[]
  }

  /**
   * SemestreProfessorDisciplinas findMany
   */
  export type SemestreProfessorDisciplinasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * Filter, which SemestreProfessorDisciplinas to fetch.
     */
    where?: SemestreProfessorDisciplinasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SemestreProfessorDisciplinas to fetch.
     */
    orderBy?: SemestreProfessorDisciplinasOrderByWithRelationInput | SemestreProfessorDisciplinasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SemestreProfessorDisciplinas.
     */
    cursor?: SemestreProfessorDisciplinasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SemestreProfessorDisciplinas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SemestreProfessorDisciplinas.
     */
    skip?: number
    distinct?: SemestreProfessorDisciplinasScalarFieldEnum | SemestreProfessorDisciplinasScalarFieldEnum[]
  }

  /**
   * SemestreProfessorDisciplinas create
   */
  export type SemestreProfessorDisciplinasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * The data needed to create a SemestreProfessorDisciplinas.
     */
    data: XOR<SemestreProfessorDisciplinasCreateInput, SemestreProfessorDisciplinasUncheckedCreateInput>
  }

  /**
   * SemestreProfessorDisciplinas createMany
   */
  export type SemestreProfessorDisciplinasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SemestreProfessorDisciplinas.
     */
    data: SemestreProfessorDisciplinasCreateManyInput | SemestreProfessorDisciplinasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SemestreProfessorDisciplinas createManyAndReturn
   */
  export type SemestreProfessorDisciplinasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SemestreProfessorDisciplinas.
     */
    data: SemestreProfessorDisciplinasCreateManyInput | SemestreProfessorDisciplinasCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SemestreProfessorDisciplinas update
   */
  export type SemestreProfessorDisciplinasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * The data needed to update a SemestreProfessorDisciplinas.
     */
    data: XOR<SemestreProfessorDisciplinasUpdateInput, SemestreProfessorDisciplinasUncheckedUpdateInput>
    /**
     * Choose, which SemestreProfessorDisciplinas to update.
     */
    where: SemestreProfessorDisciplinasWhereUniqueInput
  }

  /**
   * SemestreProfessorDisciplinas updateMany
   */
  export type SemestreProfessorDisciplinasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SemestreProfessorDisciplinas.
     */
    data: XOR<SemestreProfessorDisciplinasUpdateManyMutationInput, SemestreProfessorDisciplinasUncheckedUpdateManyInput>
    /**
     * Filter which SemestreProfessorDisciplinas to update
     */
    where?: SemestreProfessorDisciplinasWhereInput
  }

  /**
   * SemestreProfessorDisciplinas upsert
   */
  export type SemestreProfessorDisciplinasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * The filter to search for the SemestreProfessorDisciplinas to update in case it exists.
     */
    where: SemestreProfessorDisciplinasWhereUniqueInput
    /**
     * In case the SemestreProfessorDisciplinas found by the `where` argument doesn't exist, create a new SemestreProfessorDisciplinas with this data.
     */
    create: XOR<SemestreProfessorDisciplinasCreateInput, SemestreProfessorDisciplinasUncheckedCreateInput>
    /**
     * In case the SemestreProfessorDisciplinas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SemestreProfessorDisciplinasUpdateInput, SemestreProfessorDisciplinasUncheckedUpdateInput>
  }

  /**
   * SemestreProfessorDisciplinas delete
   */
  export type SemestreProfessorDisciplinasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
    /**
     * Filter which SemestreProfessorDisciplinas to delete.
     */
    where: SemestreProfessorDisciplinasWhereUniqueInput
  }

  /**
   * SemestreProfessorDisciplinas deleteMany
   */
  export type SemestreProfessorDisciplinasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SemestreProfessorDisciplinas to delete
     */
    where?: SemestreProfessorDisciplinasWhereInput
  }

  /**
   * SemestreProfessorDisciplinas without action
   */
  export type SemestreProfessorDisciplinasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SemestreProfessorDisciplinas
     */
    select?: SemestreProfessorDisciplinasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SemestreProfessorDisciplinasInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    ra: 'ra',
    cpf: 'cpf',
    senha: 'senha',
    email: 'email',
    imei: 'imei',
    tipo: 'tipo',
    status: 'status',
    data_cadastro: 'data_cadastro'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const SemestreScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    data_inicio: 'data_inicio',
    data_final: 'data_final',
    padrao: 'padrao'
  };

  export type SemestreScalarFieldEnum = (typeof SemestreScalarFieldEnum)[keyof typeof SemestreScalarFieldEnum]


  export const CursoScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao'
  };

  export type CursoScalarFieldEnum = (typeof CursoScalarFieldEnum)[keyof typeof CursoScalarFieldEnum]


  export const DisciplinaScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    id_curso: 'id_curso',
    carga_horario: 'carga_horario'
  };

  export type DisciplinaScalarFieldEnum = (typeof DisciplinaScalarFieldEnum)[keyof typeof DisciplinaScalarFieldEnum]


  export const TurmaScalarFieldEnum: {
    id: 'id',
    semestre_curso: 'semestre_curso',
    id_curso: 'id_curso'
  };

  export type TurmaScalarFieldEnum = (typeof TurmaScalarFieldEnum)[keyof typeof TurmaScalarFieldEnum]


  export const TurmaDisciplinasScalarFieldEnum: {
    id: 'id',
    id_disciplina: 'id_disciplina',
    id_semestre: 'id_semestre',
    id_turma: 'id_turma',
    semestre_curso: 'semestre_curso'
  };

  export type TurmaDisciplinasScalarFieldEnum = (typeof TurmaDisciplinasScalarFieldEnum)[keyof typeof TurmaDisciplinasScalarFieldEnum]


  export const TurmaAlunosScalarFieldEnum: {
    id: 'id',
    id_aluno: 'id_aluno',
    id_turma: 'id_turma'
  };

  export type TurmaAlunosScalarFieldEnum = (typeof TurmaAlunosScalarFieldEnum)[keyof typeof TurmaAlunosScalarFieldEnum]


  export const ChamadaScalarFieldEnum: {
    id: 'id',
    id_professor: 'id_professor',
    id_disciplina: 'id_disciplina',
    id_semestre: 'id_semestre',
    data_hora_inicio: 'data_hora_inicio',
    data_hora_final: 'data_hora_final'
  };

  export type ChamadaScalarFieldEnum = (typeof ChamadaScalarFieldEnum)[keyof typeof ChamadaScalarFieldEnum]


  export const ChamadaAlunosScalarFieldEnum: {
    id: 'id',
    id_chamada: 'id_chamada',
    id_aluno: 'id_aluno'
  };

  export type ChamadaAlunosScalarFieldEnum = (typeof ChamadaAlunosScalarFieldEnum)[keyof typeof ChamadaAlunosScalarFieldEnum]


  export const SemestreProfessorDisciplinasScalarFieldEnum: {
    id: 'id',
    id_disciplina: 'id_disciplina',
    id_professor: 'id_professor',
    id_semestre: 'id_semestre'
  };

  export type SemestreProfessorDisciplinasScalarFieldEnum = (typeof SemestreProfessorDisciplinasScalarFieldEnum)[keyof typeof SemestreProfessorDisciplinasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    ra?: StringNullableFilter<"Usuario"> | string | null
    cpf?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    imei?: StringNullableFilter<"Usuario"> | string | null
    tipo?: IntFilter<"Usuario"> | number
    status?: IntFilter<"Usuario"> | number
    data_cadastro?: DateTimeFilter<"Usuario"> | Date | string
    TurmaAluno?: TurmaAlunosListRelationFilter
    ChamadaProfessor?: ChamadaListRelationFilter
    ChamadaAluno?: ChamadaAlunosListRelationFilter
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    ra?: SortOrderInput | SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    email?: SortOrder
    imei?: SortOrderInput | SortOrder
    tipo?: SortOrder
    status?: SortOrder
    data_cadastro?: SortOrder
    TurmaAluno?: TurmaAlunosOrderByRelationAggregateInput
    ChamadaProfessor?: ChamadaOrderByRelationAggregateInput
    ChamadaAluno?: ChamadaAlunosOrderByRelationAggregateInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ra?: string
    cpf?: string
    email?: string
    imei?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    tipo?: IntFilter<"Usuario"> | number
    status?: IntFilter<"Usuario"> | number
    data_cadastro?: DateTimeFilter<"Usuario"> | Date | string
    TurmaAluno?: TurmaAlunosListRelationFilter
    ChamadaProfessor?: ChamadaListRelationFilter
    ChamadaAluno?: ChamadaAlunosListRelationFilter
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasListRelationFilter
  }, "id" | "ra" | "cpf" | "email" | "imei">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    ra?: SortOrderInput | SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    email?: SortOrder
    imei?: SortOrderInput | SortOrder
    tipo?: SortOrder
    status?: SortOrder
    data_cadastro?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    ra?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
    cpf?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    imei?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
    tipo?: IntWithAggregatesFilter<"Usuario"> | number
    status?: IntWithAggregatesFilter<"Usuario"> | number
    data_cadastro?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type SemestreWhereInput = {
    AND?: SemestreWhereInput | SemestreWhereInput[]
    OR?: SemestreWhereInput[]
    NOT?: SemestreWhereInput | SemestreWhereInput[]
    id?: IntFilter<"Semestre"> | number
    descricao?: StringFilter<"Semestre"> | string
    data_inicio?: DateTimeNullableFilter<"Semestre"> | Date | string | null
    data_final?: DateTimeNullableFilter<"Semestre"> | Date | string | null
    padrao?: IntFilter<"Semestre"> | number
    TurmaDisciplinas?: TurmaDisciplinasListRelationFilter
    Chamada?: ChamadaListRelationFilter
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasListRelationFilter
  }

  export type SemestreOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    data_inicio?: SortOrderInput | SortOrder
    data_final?: SortOrderInput | SortOrder
    padrao?: SortOrder
    TurmaDisciplinas?: TurmaDisciplinasOrderByRelationAggregateInput
    Chamada?: ChamadaOrderByRelationAggregateInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasOrderByRelationAggregateInput
  }

  export type SemestreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SemestreWhereInput | SemestreWhereInput[]
    OR?: SemestreWhereInput[]
    NOT?: SemestreWhereInput | SemestreWhereInput[]
    descricao?: StringFilter<"Semestre"> | string
    data_inicio?: DateTimeNullableFilter<"Semestre"> | Date | string | null
    data_final?: DateTimeNullableFilter<"Semestre"> | Date | string | null
    padrao?: IntFilter<"Semestre"> | number
    TurmaDisciplinas?: TurmaDisciplinasListRelationFilter
    Chamada?: ChamadaListRelationFilter
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasListRelationFilter
  }, "id">

  export type SemestreOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    data_inicio?: SortOrderInput | SortOrder
    data_final?: SortOrderInput | SortOrder
    padrao?: SortOrder
    _count?: SemestreCountOrderByAggregateInput
    _avg?: SemestreAvgOrderByAggregateInput
    _max?: SemestreMaxOrderByAggregateInput
    _min?: SemestreMinOrderByAggregateInput
    _sum?: SemestreSumOrderByAggregateInput
  }

  export type SemestreScalarWhereWithAggregatesInput = {
    AND?: SemestreScalarWhereWithAggregatesInput | SemestreScalarWhereWithAggregatesInput[]
    OR?: SemestreScalarWhereWithAggregatesInput[]
    NOT?: SemestreScalarWhereWithAggregatesInput | SemestreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Semestre"> | number
    descricao?: StringWithAggregatesFilter<"Semestre"> | string
    data_inicio?: DateTimeNullableWithAggregatesFilter<"Semestre"> | Date | string | null
    data_final?: DateTimeNullableWithAggregatesFilter<"Semestre"> | Date | string | null
    padrao?: IntWithAggregatesFilter<"Semestre"> | number
  }

  export type CursoWhereInput = {
    AND?: CursoWhereInput | CursoWhereInput[]
    OR?: CursoWhereInput[]
    NOT?: CursoWhereInput | CursoWhereInput[]
    id?: IntFilter<"Curso"> | number
    descricao?: StringFilter<"Curso"> | string
    Disciplina?: DisciplinaListRelationFilter
    Turma?: TurmaListRelationFilter
  }

  export type CursoOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    Disciplina?: DisciplinaOrderByRelationAggregateInput
    Turma?: TurmaOrderByRelationAggregateInput
  }

  export type CursoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CursoWhereInput | CursoWhereInput[]
    OR?: CursoWhereInput[]
    NOT?: CursoWhereInput | CursoWhereInput[]
    descricao?: StringFilter<"Curso"> | string
    Disciplina?: DisciplinaListRelationFilter
    Turma?: TurmaListRelationFilter
  }, "id">

  export type CursoOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    _count?: CursoCountOrderByAggregateInput
    _avg?: CursoAvgOrderByAggregateInput
    _max?: CursoMaxOrderByAggregateInput
    _min?: CursoMinOrderByAggregateInput
    _sum?: CursoSumOrderByAggregateInput
  }

  export type CursoScalarWhereWithAggregatesInput = {
    AND?: CursoScalarWhereWithAggregatesInput | CursoScalarWhereWithAggregatesInput[]
    OR?: CursoScalarWhereWithAggregatesInput[]
    NOT?: CursoScalarWhereWithAggregatesInput | CursoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Curso"> | number
    descricao?: StringWithAggregatesFilter<"Curso"> | string
  }

  export type DisciplinaWhereInput = {
    AND?: DisciplinaWhereInput | DisciplinaWhereInput[]
    OR?: DisciplinaWhereInput[]
    NOT?: DisciplinaWhereInput | DisciplinaWhereInput[]
    id?: IntFilter<"Disciplina"> | number
    descricao?: StringFilter<"Disciplina"> | string
    id_curso?: IntFilter<"Disciplina"> | number
    carga_horario?: IntFilter<"Disciplina"> | number
    Curso?: XOR<CursoRelationFilter, CursoWhereInput>
    TurmaDisciplinas?: TurmaDisciplinasListRelationFilter
    Chamada?: ChamadaListRelationFilter
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasListRelationFilter
  }

  export type DisciplinaOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    id_curso?: SortOrder
    carga_horario?: SortOrder
    Curso?: CursoOrderByWithRelationInput
    TurmaDisciplinas?: TurmaDisciplinasOrderByRelationAggregateInput
    Chamada?: ChamadaOrderByRelationAggregateInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasOrderByRelationAggregateInput
  }

  export type DisciplinaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DisciplinaWhereInput | DisciplinaWhereInput[]
    OR?: DisciplinaWhereInput[]
    NOT?: DisciplinaWhereInput | DisciplinaWhereInput[]
    descricao?: StringFilter<"Disciplina"> | string
    id_curso?: IntFilter<"Disciplina"> | number
    carga_horario?: IntFilter<"Disciplina"> | number
    Curso?: XOR<CursoRelationFilter, CursoWhereInput>
    TurmaDisciplinas?: TurmaDisciplinasListRelationFilter
    Chamada?: ChamadaListRelationFilter
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasListRelationFilter
  }, "id">

  export type DisciplinaOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    id_curso?: SortOrder
    carga_horario?: SortOrder
    _count?: DisciplinaCountOrderByAggregateInput
    _avg?: DisciplinaAvgOrderByAggregateInput
    _max?: DisciplinaMaxOrderByAggregateInput
    _min?: DisciplinaMinOrderByAggregateInput
    _sum?: DisciplinaSumOrderByAggregateInput
  }

  export type DisciplinaScalarWhereWithAggregatesInput = {
    AND?: DisciplinaScalarWhereWithAggregatesInput | DisciplinaScalarWhereWithAggregatesInput[]
    OR?: DisciplinaScalarWhereWithAggregatesInput[]
    NOT?: DisciplinaScalarWhereWithAggregatesInput | DisciplinaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Disciplina"> | number
    descricao?: StringWithAggregatesFilter<"Disciplina"> | string
    id_curso?: IntWithAggregatesFilter<"Disciplina"> | number
    carga_horario?: IntWithAggregatesFilter<"Disciplina"> | number
  }

  export type TurmaWhereInput = {
    AND?: TurmaWhereInput | TurmaWhereInput[]
    OR?: TurmaWhereInput[]
    NOT?: TurmaWhereInput | TurmaWhereInput[]
    id?: IntFilter<"Turma"> | number
    semestre_curso?: IntFilter<"Turma"> | number
    id_curso?: IntFilter<"Turma"> | number
    Curso?: XOR<CursoRelationFilter, CursoWhereInput>
    TurmaDisciplinas?: TurmaDisciplinasListRelationFilter
    TurmaAluno?: TurmaAlunosListRelationFilter
  }

  export type TurmaOrderByWithRelationInput = {
    id?: SortOrder
    semestre_curso?: SortOrder
    id_curso?: SortOrder
    Curso?: CursoOrderByWithRelationInput
    TurmaDisciplinas?: TurmaDisciplinasOrderByRelationAggregateInput
    TurmaAluno?: TurmaAlunosOrderByRelationAggregateInput
  }

  export type TurmaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TurmaWhereInput | TurmaWhereInput[]
    OR?: TurmaWhereInput[]
    NOT?: TurmaWhereInput | TurmaWhereInput[]
    semestre_curso?: IntFilter<"Turma"> | number
    id_curso?: IntFilter<"Turma"> | number
    Curso?: XOR<CursoRelationFilter, CursoWhereInput>
    TurmaDisciplinas?: TurmaDisciplinasListRelationFilter
    TurmaAluno?: TurmaAlunosListRelationFilter
  }, "id">

  export type TurmaOrderByWithAggregationInput = {
    id?: SortOrder
    semestre_curso?: SortOrder
    id_curso?: SortOrder
    _count?: TurmaCountOrderByAggregateInput
    _avg?: TurmaAvgOrderByAggregateInput
    _max?: TurmaMaxOrderByAggregateInput
    _min?: TurmaMinOrderByAggregateInput
    _sum?: TurmaSumOrderByAggregateInput
  }

  export type TurmaScalarWhereWithAggregatesInput = {
    AND?: TurmaScalarWhereWithAggregatesInput | TurmaScalarWhereWithAggregatesInput[]
    OR?: TurmaScalarWhereWithAggregatesInput[]
    NOT?: TurmaScalarWhereWithAggregatesInput | TurmaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Turma"> | number
    semestre_curso?: IntWithAggregatesFilter<"Turma"> | number
    id_curso?: IntWithAggregatesFilter<"Turma"> | number
  }

  export type TurmaDisciplinasWhereInput = {
    AND?: TurmaDisciplinasWhereInput | TurmaDisciplinasWhereInput[]
    OR?: TurmaDisciplinasWhereInput[]
    NOT?: TurmaDisciplinasWhereInput | TurmaDisciplinasWhereInput[]
    id?: IntFilter<"TurmaDisciplinas"> | number
    id_disciplina?: IntFilter<"TurmaDisciplinas"> | number
    id_semestre?: IntFilter<"TurmaDisciplinas"> | number
    id_turma?: IntFilter<"TurmaDisciplinas"> | number
    semestre_curso?: IntFilter<"TurmaDisciplinas"> | number
    Disciplina?: XOR<DisciplinaRelationFilter, DisciplinaWhereInput>
    Semestre?: XOR<SemestreRelationFilter, SemestreWhereInput>
    Turma?: XOR<TurmaRelationFilter, TurmaWhereInput>
  }

  export type TurmaDisciplinasOrderByWithRelationInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    id_turma?: SortOrder
    semestre_curso?: SortOrder
    Disciplina?: DisciplinaOrderByWithRelationInput
    Semestre?: SemestreOrderByWithRelationInput
    Turma?: TurmaOrderByWithRelationInput
  }

  export type TurmaDisciplinasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TurmaDisciplinasWhereInput | TurmaDisciplinasWhereInput[]
    OR?: TurmaDisciplinasWhereInput[]
    NOT?: TurmaDisciplinasWhereInput | TurmaDisciplinasWhereInput[]
    id_disciplina?: IntFilter<"TurmaDisciplinas"> | number
    id_semestre?: IntFilter<"TurmaDisciplinas"> | number
    id_turma?: IntFilter<"TurmaDisciplinas"> | number
    semestre_curso?: IntFilter<"TurmaDisciplinas"> | number
    Disciplina?: XOR<DisciplinaRelationFilter, DisciplinaWhereInput>
    Semestre?: XOR<SemestreRelationFilter, SemestreWhereInput>
    Turma?: XOR<TurmaRelationFilter, TurmaWhereInput>
  }, "id">

  export type TurmaDisciplinasOrderByWithAggregationInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    id_turma?: SortOrder
    semestre_curso?: SortOrder
    _count?: TurmaDisciplinasCountOrderByAggregateInput
    _avg?: TurmaDisciplinasAvgOrderByAggregateInput
    _max?: TurmaDisciplinasMaxOrderByAggregateInput
    _min?: TurmaDisciplinasMinOrderByAggregateInput
    _sum?: TurmaDisciplinasSumOrderByAggregateInput
  }

  export type TurmaDisciplinasScalarWhereWithAggregatesInput = {
    AND?: TurmaDisciplinasScalarWhereWithAggregatesInput | TurmaDisciplinasScalarWhereWithAggregatesInput[]
    OR?: TurmaDisciplinasScalarWhereWithAggregatesInput[]
    NOT?: TurmaDisciplinasScalarWhereWithAggregatesInput | TurmaDisciplinasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TurmaDisciplinas"> | number
    id_disciplina?: IntWithAggregatesFilter<"TurmaDisciplinas"> | number
    id_semestre?: IntWithAggregatesFilter<"TurmaDisciplinas"> | number
    id_turma?: IntWithAggregatesFilter<"TurmaDisciplinas"> | number
    semestre_curso?: IntWithAggregatesFilter<"TurmaDisciplinas"> | number
  }

  export type TurmaAlunosWhereInput = {
    AND?: TurmaAlunosWhereInput | TurmaAlunosWhereInput[]
    OR?: TurmaAlunosWhereInput[]
    NOT?: TurmaAlunosWhereInput | TurmaAlunosWhereInput[]
    id?: IntFilter<"TurmaAlunos"> | number
    id_aluno?: IntFilter<"TurmaAlunos"> | number
    id_turma?: IntFilter<"TurmaAlunos"> | number
    Usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Turma?: XOR<TurmaRelationFilter, TurmaWhereInput>
  }

  export type TurmaAlunosOrderByWithRelationInput = {
    id?: SortOrder
    id_aluno?: SortOrder
    id_turma?: SortOrder
    Usuario?: UsuarioOrderByWithRelationInput
    Turma?: TurmaOrderByWithRelationInput
  }

  export type TurmaAlunosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TurmaAlunosWhereInput | TurmaAlunosWhereInput[]
    OR?: TurmaAlunosWhereInput[]
    NOT?: TurmaAlunosWhereInput | TurmaAlunosWhereInput[]
    id_aluno?: IntFilter<"TurmaAlunos"> | number
    id_turma?: IntFilter<"TurmaAlunos"> | number
    Usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Turma?: XOR<TurmaRelationFilter, TurmaWhereInput>
  }, "id">

  export type TurmaAlunosOrderByWithAggregationInput = {
    id?: SortOrder
    id_aluno?: SortOrder
    id_turma?: SortOrder
    _count?: TurmaAlunosCountOrderByAggregateInput
    _avg?: TurmaAlunosAvgOrderByAggregateInput
    _max?: TurmaAlunosMaxOrderByAggregateInput
    _min?: TurmaAlunosMinOrderByAggregateInput
    _sum?: TurmaAlunosSumOrderByAggregateInput
  }

  export type TurmaAlunosScalarWhereWithAggregatesInput = {
    AND?: TurmaAlunosScalarWhereWithAggregatesInput | TurmaAlunosScalarWhereWithAggregatesInput[]
    OR?: TurmaAlunosScalarWhereWithAggregatesInput[]
    NOT?: TurmaAlunosScalarWhereWithAggregatesInput | TurmaAlunosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TurmaAlunos"> | number
    id_aluno?: IntWithAggregatesFilter<"TurmaAlunos"> | number
    id_turma?: IntWithAggregatesFilter<"TurmaAlunos"> | number
  }

  export type ChamadaWhereInput = {
    AND?: ChamadaWhereInput | ChamadaWhereInput[]
    OR?: ChamadaWhereInput[]
    NOT?: ChamadaWhereInput | ChamadaWhereInput[]
    id?: IntFilter<"Chamada"> | number
    id_professor?: IntFilter<"Chamada"> | number
    id_disciplina?: IntFilter<"Chamada"> | number
    id_semestre?: IntFilter<"Chamada"> | number
    data_hora_inicio?: DateTimeNullableFilter<"Chamada"> | Date | string | null
    data_hora_final?: DateTimeNullableFilter<"Chamada"> | Date | string | null
    Professor?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Disciplina?: XOR<DisciplinaRelationFilter, DisciplinaWhereInput>
    Semestre?: XOR<SemestreRelationFilter, SemestreWhereInput>
    ChamadaAluno?: ChamadaAlunosListRelationFilter
  }

  export type ChamadaOrderByWithRelationInput = {
    id?: SortOrder
    id_professor?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    data_hora_inicio?: SortOrderInput | SortOrder
    data_hora_final?: SortOrderInput | SortOrder
    Professor?: UsuarioOrderByWithRelationInput
    Disciplina?: DisciplinaOrderByWithRelationInput
    Semestre?: SemestreOrderByWithRelationInput
    ChamadaAluno?: ChamadaAlunosOrderByRelationAggregateInput
  }

  export type ChamadaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChamadaWhereInput | ChamadaWhereInput[]
    OR?: ChamadaWhereInput[]
    NOT?: ChamadaWhereInput | ChamadaWhereInput[]
    id_professor?: IntFilter<"Chamada"> | number
    id_disciplina?: IntFilter<"Chamada"> | number
    id_semestre?: IntFilter<"Chamada"> | number
    data_hora_inicio?: DateTimeNullableFilter<"Chamada"> | Date | string | null
    data_hora_final?: DateTimeNullableFilter<"Chamada"> | Date | string | null
    Professor?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Disciplina?: XOR<DisciplinaRelationFilter, DisciplinaWhereInput>
    Semestre?: XOR<SemestreRelationFilter, SemestreWhereInput>
    ChamadaAluno?: ChamadaAlunosListRelationFilter
  }, "id">

  export type ChamadaOrderByWithAggregationInput = {
    id?: SortOrder
    id_professor?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    data_hora_inicio?: SortOrderInput | SortOrder
    data_hora_final?: SortOrderInput | SortOrder
    _count?: ChamadaCountOrderByAggregateInput
    _avg?: ChamadaAvgOrderByAggregateInput
    _max?: ChamadaMaxOrderByAggregateInput
    _min?: ChamadaMinOrderByAggregateInput
    _sum?: ChamadaSumOrderByAggregateInput
  }

  export type ChamadaScalarWhereWithAggregatesInput = {
    AND?: ChamadaScalarWhereWithAggregatesInput | ChamadaScalarWhereWithAggregatesInput[]
    OR?: ChamadaScalarWhereWithAggregatesInput[]
    NOT?: ChamadaScalarWhereWithAggregatesInput | ChamadaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Chamada"> | number
    id_professor?: IntWithAggregatesFilter<"Chamada"> | number
    id_disciplina?: IntWithAggregatesFilter<"Chamada"> | number
    id_semestre?: IntWithAggregatesFilter<"Chamada"> | number
    data_hora_inicio?: DateTimeNullableWithAggregatesFilter<"Chamada"> | Date | string | null
    data_hora_final?: DateTimeNullableWithAggregatesFilter<"Chamada"> | Date | string | null
  }

  export type ChamadaAlunosWhereInput = {
    AND?: ChamadaAlunosWhereInput | ChamadaAlunosWhereInput[]
    OR?: ChamadaAlunosWhereInput[]
    NOT?: ChamadaAlunosWhereInput | ChamadaAlunosWhereInput[]
    id?: IntFilter<"ChamadaAlunos"> | number
    id_chamada?: IntFilter<"ChamadaAlunos"> | number
    id_aluno?: IntFilter<"ChamadaAlunos"> | number
    Chamada?: XOR<ChamadaRelationFilter, ChamadaWhereInput>
    Usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type ChamadaAlunosOrderByWithRelationInput = {
    id?: SortOrder
    id_chamada?: SortOrder
    id_aluno?: SortOrder
    Chamada?: ChamadaOrderByWithRelationInput
    Usuario?: UsuarioOrderByWithRelationInput
  }

  export type ChamadaAlunosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChamadaAlunosWhereInput | ChamadaAlunosWhereInput[]
    OR?: ChamadaAlunosWhereInput[]
    NOT?: ChamadaAlunosWhereInput | ChamadaAlunosWhereInput[]
    id_chamada?: IntFilter<"ChamadaAlunos"> | number
    id_aluno?: IntFilter<"ChamadaAlunos"> | number
    Chamada?: XOR<ChamadaRelationFilter, ChamadaWhereInput>
    Usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type ChamadaAlunosOrderByWithAggregationInput = {
    id?: SortOrder
    id_chamada?: SortOrder
    id_aluno?: SortOrder
    _count?: ChamadaAlunosCountOrderByAggregateInput
    _avg?: ChamadaAlunosAvgOrderByAggregateInput
    _max?: ChamadaAlunosMaxOrderByAggregateInput
    _min?: ChamadaAlunosMinOrderByAggregateInput
    _sum?: ChamadaAlunosSumOrderByAggregateInput
  }

  export type ChamadaAlunosScalarWhereWithAggregatesInput = {
    AND?: ChamadaAlunosScalarWhereWithAggregatesInput | ChamadaAlunosScalarWhereWithAggregatesInput[]
    OR?: ChamadaAlunosScalarWhereWithAggregatesInput[]
    NOT?: ChamadaAlunosScalarWhereWithAggregatesInput | ChamadaAlunosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChamadaAlunos"> | number
    id_chamada?: IntWithAggregatesFilter<"ChamadaAlunos"> | number
    id_aluno?: IntWithAggregatesFilter<"ChamadaAlunos"> | number
  }

  export type SemestreProfessorDisciplinasWhereInput = {
    AND?: SemestreProfessorDisciplinasWhereInput | SemestreProfessorDisciplinasWhereInput[]
    OR?: SemestreProfessorDisciplinasWhereInput[]
    NOT?: SemestreProfessorDisciplinasWhereInput | SemestreProfessorDisciplinasWhereInput[]
    id?: IntFilter<"SemestreProfessorDisciplinas"> | number
    id_disciplina?: IntFilter<"SemestreProfessorDisciplinas"> | number
    id_professor?: IntFilter<"SemestreProfessorDisciplinas"> | number
    id_semestre?: IntFilter<"SemestreProfessorDisciplinas"> | number
    Disciplina?: XOR<DisciplinaRelationFilter, DisciplinaWhereInput>
    Professor?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Semestre?: XOR<SemestreRelationFilter, SemestreWhereInput>
  }

  export type SemestreProfessorDisciplinasOrderByWithRelationInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_professor?: SortOrder
    id_semestre?: SortOrder
    Disciplina?: DisciplinaOrderByWithRelationInput
    Professor?: UsuarioOrderByWithRelationInput
    Semestre?: SemestreOrderByWithRelationInput
  }

  export type SemestreProfessorDisciplinasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SemestreProfessorDisciplinasWhereInput | SemestreProfessorDisciplinasWhereInput[]
    OR?: SemestreProfessorDisciplinasWhereInput[]
    NOT?: SemestreProfessorDisciplinasWhereInput | SemestreProfessorDisciplinasWhereInput[]
    id_disciplina?: IntFilter<"SemestreProfessorDisciplinas"> | number
    id_professor?: IntFilter<"SemestreProfessorDisciplinas"> | number
    id_semestre?: IntFilter<"SemestreProfessorDisciplinas"> | number
    Disciplina?: XOR<DisciplinaRelationFilter, DisciplinaWhereInput>
    Professor?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    Semestre?: XOR<SemestreRelationFilter, SemestreWhereInput>
  }, "id">

  export type SemestreProfessorDisciplinasOrderByWithAggregationInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_professor?: SortOrder
    id_semestre?: SortOrder
    _count?: SemestreProfessorDisciplinasCountOrderByAggregateInput
    _avg?: SemestreProfessorDisciplinasAvgOrderByAggregateInput
    _max?: SemestreProfessorDisciplinasMaxOrderByAggregateInput
    _min?: SemestreProfessorDisciplinasMinOrderByAggregateInput
    _sum?: SemestreProfessorDisciplinasSumOrderByAggregateInput
  }

  export type SemestreProfessorDisciplinasScalarWhereWithAggregatesInput = {
    AND?: SemestreProfessorDisciplinasScalarWhereWithAggregatesInput | SemestreProfessorDisciplinasScalarWhereWithAggregatesInput[]
    OR?: SemestreProfessorDisciplinasScalarWhereWithAggregatesInput[]
    NOT?: SemestreProfessorDisciplinasScalarWhereWithAggregatesInput | SemestreProfessorDisciplinasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SemestreProfessorDisciplinas"> | number
    id_disciplina?: IntWithAggregatesFilter<"SemestreProfessorDisciplinas"> | number
    id_professor?: IntWithAggregatesFilter<"SemestreProfessorDisciplinas"> | number
    id_semestre?: IntWithAggregatesFilter<"SemestreProfessorDisciplinas"> | number
  }

  export type UsuarioCreateInput = {
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    TurmaAluno?: TurmaAlunosCreateNestedManyWithoutUsuarioInput
    ChamadaProfessor?: ChamadaCreateNestedManyWithoutProfessorInput
    ChamadaAluno?: ChamadaAlunosCreateNestedManyWithoutUsuarioInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutProfessorInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    TurmaAluno?: TurmaAlunosUncheckedCreateNestedManyWithoutUsuarioInput
    ChamadaProfessor?: ChamadaUncheckedCreateNestedManyWithoutProfessorInput
    ChamadaAluno?: ChamadaAlunosUncheckedCreateNestedManyWithoutUsuarioInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    TurmaAluno?: TurmaAlunosUpdateManyWithoutUsuarioNestedInput
    ChamadaProfessor?: ChamadaUpdateManyWithoutProfessorNestedInput
    ChamadaAluno?: ChamadaAlunosUpdateManyWithoutUsuarioNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutProfessorNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    TurmaAluno?: TurmaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput
    ChamadaProfessor?: ChamadaUncheckedUpdateManyWithoutProfessorNestedInput
    ChamadaAluno?: ChamadaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SemestreCreateInput = {
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutSemestreInput
    Chamada?: ChamadaCreateNestedManyWithoutSemestreInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutSemestreInput
  }

  export type SemestreUncheckedCreateInput = {
    id?: number
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutSemestreInput
    Chamada?: ChamadaUncheckedCreateNestedManyWithoutSemestreInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutSemestreInput
  }

  export type SemestreUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutSemestreNestedInput
    Chamada?: ChamadaUpdateManyWithoutSemestreNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutSemestreNestedInput
  }

  export type SemestreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutSemestreNestedInput
    Chamada?: ChamadaUncheckedUpdateManyWithoutSemestreNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutSemestreNestedInput
  }

  export type SemestreCreateManyInput = {
    id?: number
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
  }

  export type SemestreUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
  }

  export type SemestreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
  }

  export type CursoCreateInput = {
    descricao: string
    Disciplina?: DisciplinaCreateNestedManyWithoutCursoInput
    Turma?: TurmaCreateNestedManyWithoutCursoInput
  }

  export type CursoUncheckedCreateInput = {
    id?: number
    descricao: string
    Disciplina?: DisciplinaUncheckedCreateNestedManyWithoutCursoInput
    Turma?: TurmaUncheckedCreateNestedManyWithoutCursoInput
  }

  export type CursoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    Disciplina?: DisciplinaUpdateManyWithoutCursoNestedInput
    Turma?: TurmaUpdateManyWithoutCursoNestedInput
  }

  export type CursoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    Disciplina?: DisciplinaUncheckedUpdateManyWithoutCursoNestedInput
    Turma?: TurmaUncheckedUpdateManyWithoutCursoNestedInput
  }

  export type CursoCreateManyInput = {
    id?: number
    descricao: string
  }

  export type CursoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type CursoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplinaCreateInput = {
    descricao: string
    carga_horario: number
    Curso: CursoCreateNestedOneWithoutDisciplinaInput
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutDisciplinaInput
    Chamada?: ChamadaCreateNestedManyWithoutDisciplinaInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaUncheckedCreateInput = {
    id?: number
    descricao: string
    id_curso: number
    carga_horario: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput
    Chamada?: ChamadaUncheckedCreateNestedManyWithoutDisciplinaInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    carga_horario?: IntFieldUpdateOperationsInput | number
    Curso?: CursoUpdateOneRequiredWithoutDisciplinaNestedInput
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutDisciplinaNestedInput
    Chamada?: ChamadaUpdateManyWithoutDisciplinaNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    id_curso?: IntFieldUpdateOperationsInput | number
    carga_horario?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput
    Chamada?: ChamadaUncheckedUpdateManyWithoutDisciplinaNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput
  }

  export type DisciplinaCreateManyInput = {
    id?: number
    descricao: string
    id_curso: number
    carga_horario: number
  }

  export type DisciplinaUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    carga_horario?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    id_curso?: IntFieldUpdateOperationsInput | number
    carga_horario?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaCreateInput = {
    semestre_curso: number
    Curso: CursoCreateNestedOneWithoutTurmaInput
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutTurmaInput
    TurmaAluno?: TurmaAlunosCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateInput = {
    id?: number
    semestre_curso: number
    id_curso: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutTurmaInput
    TurmaAluno?: TurmaAlunosUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUpdateInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
    Curso?: CursoUpdateOneRequiredWithoutTurmaNestedInput
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutTurmaNestedInput
    TurmaAluno?: TurmaAlunosUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
    id_curso?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutTurmaNestedInput
    TurmaAluno?: TurmaAlunosUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaCreateManyInput = {
    id?: number
    semestre_curso: number
    id_curso: number
  }

  export type TurmaUpdateManyMutationInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
    id_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasCreateInput = {
    semestre_curso: number
    Disciplina: DisciplinaCreateNestedOneWithoutTurmaDisciplinasInput
    Semestre: SemestreCreateNestedOneWithoutTurmaDisciplinasInput
    Turma: TurmaCreateNestedOneWithoutTurmaDisciplinasInput
  }

  export type TurmaDisciplinasUncheckedCreateInput = {
    id?: number
    id_disciplina: number
    id_semestre: number
    id_turma: number
    semestre_curso: number
  }

  export type TurmaDisciplinasUpdateInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
    Disciplina?: DisciplinaUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
    Turma?: TurmaUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
  }

  export type TurmaDisciplinasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasCreateManyInput = {
    id?: number
    id_disciplina: number
    id_semestre: number
    id_turma: number
    semestre_curso: number
  }

  export type TurmaDisciplinasUpdateManyMutationInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaAlunosCreateInput = {
    Usuario: UsuarioCreateNestedOneWithoutTurmaAlunoInput
    Turma: TurmaCreateNestedOneWithoutTurmaAlunoInput
  }

  export type TurmaAlunosUncheckedCreateInput = {
    id?: number
    id_aluno: number
    id_turma: number
  }

  export type TurmaAlunosUpdateInput = {
    Usuario?: UsuarioUpdateOneRequiredWithoutTurmaAlunoNestedInput
    Turma?: TurmaUpdateOneRequiredWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_aluno?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaAlunosCreateManyInput = {
    id?: number
    id_aluno: number
    id_turma: number
  }

  export type TurmaAlunosUpdateManyMutationInput = {

  }

  export type TurmaAlunosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_aluno?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
  }

  export type ChamadaCreateInput = {
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    Professor: UsuarioCreateNestedOneWithoutChamadaProfessorInput
    Disciplina: DisciplinaCreateNestedOneWithoutChamadaInput
    Semestre: SemestreCreateNestedOneWithoutChamadaInput
    ChamadaAluno?: ChamadaAlunosCreateNestedManyWithoutChamadaInput
  }

  export type ChamadaUncheckedCreateInput = {
    id?: number
    id_professor: number
    id_disciplina: number
    id_semestre: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    ChamadaAluno?: ChamadaAlunosUncheckedCreateNestedManyWithoutChamadaInput
  }

  export type ChamadaUpdateInput = {
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Professor?: UsuarioUpdateOneRequiredWithoutChamadaProfessorNestedInput
    Disciplina?: DisciplinaUpdateOneRequiredWithoutChamadaNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutChamadaNestedInput
    ChamadaAluno?: ChamadaAlunosUpdateManyWithoutChamadaNestedInput
  }

  export type ChamadaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ChamadaAluno?: ChamadaAlunosUncheckedUpdateManyWithoutChamadaNestedInput
  }

  export type ChamadaCreateManyInput = {
    id?: number
    id_professor: number
    id_disciplina: number
    id_semestre: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
  }

  export type ChamadaUpdateManyMutationInput = {
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChamadaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChamadaAlunosCreateInput = {
    Chamada: ChamadaCreateNestedOneWithoutChamadaAlunoInput
    Usuario: UsuarioCreateNestedOneWithoutChamadaAlunoInput
  }

  export type ChamadaAlunosUncheckedCreateInput = {
    id?: number
    id_chamada: number
    id_aluno: number
  }

  export type ChamadaAlunosUpdateInput = {
    Chamada?: ChamadaUpdateOneRequiredWithoutChamadaAlunoNestedInput
    Usuario?: UsuarioUpdateOneRequiredWithoutChamadaAlunoNestedInput
  }

  export type ChamadaAlunosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_chamada?: IntFieldUpdateOperationsInput | number
    id_aluno?: IntFieldUpdateOperationsInput | number
  }

  export type ChamadaAlunosCreateManyInput = {
    id?: number
    id_chamada: number
    id_aluno: number
  }

  export type ChamadaAlunosUpdateManyMutationInput = {

  }

  export type ChamadaAlunosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_chamada?: IntFieldUpdateOperationsInput | number
    id_aluno?: IntFieldUpdateOperationsInput | number
  }

  export type SemestreProfessorDisciplinasCreateInput = {
    Disciplina: DisciplinaCreateNestedOneWithoutSemestreDisciplinaProfessorInput
    Professor: UsuarioCreateNestedOneWithoutSemestreDisciplinaProfessorInput
    Semestre: SemestreCreateNestedOneWithoutSemestreDisciplinaProfessorInput
  }

  export type SemestreProfessorDisciplinasUncheckedCreateInput = {
    id?: number
    id_disciplina: number
    id_professor: number
    id_semestre: number
  }

  export type SemestreProfessorDisciplinasUpdateInput = {
    Disciplina?: DisciplinaUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
    Professor?: UsuarioUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
  }

  export type SemestreProfessorDisciplinasCreateManyInput = {
    id?: number
    id_disciplina: number
    id_professor: number
    id_semestre: number
  }

  export type SemestreProfessorDisciplinasUpdateManyMutationInput = {

  }

  export type SemestreProfessorDisciplinasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TurmaAlunosListRelationFilter = {
    every?: TurmaAlunosWhereInput
    some?: TurmaAlunosWhereInput
    none?: TurmaAlunosWhereInput
  }

  export type ChamadaListRelationFilter = {
    every?: ChamadaWhereInput
    some?: ChamadaWhereInput
    none?: ChamadaWhereInput
  }

  export type ChamadaAlunosListRelationFilter = {
    every?: ChamadaAlunosWhereInput
    some?: ChamadaAlunosWhereInput
    none?: ChamadaAlunosWhereInput
  }

  export type SemestreProfessorDisciplinasListRelationFilter = {
    every?: SemestreProfessorDisciplinasWhereInput
    some?: SemestreProfessorDisciplinasWhereInput
    none?: SemestreProfessorDisciplinasWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TurmaAlunosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChamadaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChamadaAlunosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SemestreProfessorDisciplinasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    ra?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    email?: SortOrder
    imei?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
    data_cadastro?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    ra?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    email?: SortOrder
    imei?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
    data_cadastro?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    ra?: SortOrder
    cpf?: SortOrder
    senha?: SortOrder
    email?: SortOrder
    imei?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
    data_cadastro?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    status?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TurmaDisciplinasListRelationFilter = {
    every?: TurmaDisciplinasWhereInput
    some?: TurmaDisciplinasWhereInput
    none?: TurmaDisciplinasWhereInput
  }

  export type TurmaDisciplinasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SemestreCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    data_inicio?: SortOrder
    data_final?: SortOrder
    padrao?: SortOrder
  }

  export type SemestreAvgOrderByAggregateInput = {
    id?: SortOrder
    padrao?: SortOrder
  }

  export type SemestreMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    data_inicio?: SortOrder
    data_final?: SortOrder
    padrao?: SortOrder
  }

  export type SemestreMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    data_inicio?: SortOrder
    data_final?: SortOrder
    padrao?: SortOrder
  }

  export type SemestreSumOrderByAggregateInput = {
    id?: SortOrder
    padrao?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DisciplinaListRelationFilter = {
    every?: DisciplinaWhereInput
    some?: DisciplinaWhereInput
    none?: DisciplinaWhereInput
  }

  export type TurmaListRelationFilter = {
    every?: TurmaWhereInput
    some?: TurmaWhereInput
    none?: TurmaWhereInput
  }

  export type DisciplinaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TurmaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CursoCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type CursoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CursoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type CursoMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
  }

  export type CursoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CursoRelationFilter = {
    is?: CursoWhereInput
    isNot?: CursoWhereInput
  }

  export type DisciplinaCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    id_curso?: SortOrder
    carga_horario?: SortOrder
  }

  export type DisciplinaAvgOrderByAggregateInput = {
    id?: SortOrder
    id_curso?: SortOrder
    carga_horario?: SortOrder
  }

  export type DisciplinaMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    id_curso?: SortOrder
    carga_horario?: SortOrder
  }

  export type DisciplinaMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    id_curso?: SortOrder
    carga_horario?: SortOrder
  }

  export type DisciplinaSumOrderByAggregateInput = {
    id?: SortOrder
    id_curso?: SortOrder
    carga_horario?: SortOrder
  }

  export type TurmaCountOrderByAggregateInput = {
    id?: SortOrder
    semestre_curso?: SortOrder
    id_curso?: SortOrder
  }

  export type TurmaAvgOrderByAggregateInput = {
    id?: SortOrder
    semestre_curso?: SortOrder
    id_curso?: SortOrder
  }

  export type TurmaMaxOrderByAggregateInput = {
    id?: SortOrder
    semestre_curso?: SortOrder
    id_curso?: SortOrder
  }

  export type TurmaMinOrderByAggregateInput = {
    id?: SortOrder
    semestre_curso?: SortOrder
    id_curso?: SortOrder
  }

  export type TurmaSumOrderByAggregateInput = {
    id?: SortOrder
    semestre_curso?: SortOrder
    id_curso?: SortOrder
  }

  export type DisciplinaRelationFilter = {
    is?: DisciplinaWhereInput
    isNot?: DisciplinaWhereInput
  }

  export type SemestreRelationFilter = {
    is?: SemestreWhereInput
    isNot?: SemestreWhereInput
  }

  export type TurmaRelationFilter = {
    is?: TurmaWhereInput
    isNot?: TurmaWhereInput
  }

  export type TurmaDisciplinasCountOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    id_turma?: SortOrder
    semestre_curso?: SortOrder
  }

  export type TurmaDisciplinasAvgOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    id_turma?: SortOrder
    semestre_curso?: SortOrder
  }

  export type TurmaDisciplinasMaxOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    id_turma?: SortOrder
    semestre_curso?: SortOrder
  }

  export type TurmaDisciplinasMinOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    id_turma?: SortOrder
    semestre_curso?: SortOrder
  }

  export type TurmaDisciplinasSumOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    id_turma?: SortOrder
    semestre_curso?: SortOrder
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type TurmaAlunosCountOrderByAggregateInput = {
    id?: SortOrder
    id_aluno?: SortOrder
    id_turma?: SortOrder
  }

  export type TurmaAlunosAvgOrderByAggregateInput = {
    id?: SortOrder
    id_aluno?: SortOrder
    id_turma?: SortOrder
  }

  export type TurmaAlunosMaxOrderByAggregateInput = {
    id?: SortOrder
    id_aluno?: SortOrder
    id_turma?: SortOrder
  }

  export type TurmaAlunosMinOrderByAggregateInput = {
    id?: SortOrder
    id_aluno?: SortOrder
    id_turma?: SortOrder
  }

  export type TurmaAlunosSumOrderByAggregateInput = {
    id?: SortOrder
    id_aluno?: SortOrder
    id_turma?: SortOrder
  }

  export type ChamadaCountOrderByAggregateInput = {
    id?: SortOrder
    id_professor?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    data_hora_inicio?: SortOrder
    data_hora_final?: SortOrder
  }

  export type ChamadaAvgOrderByAggregateInput = {
    id?: SortOrder
    id_professor?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
  }

  export type ChamadaMaxOrderByAggregateInput = {
    id?: SortOrder
    id_professor?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    data_hora_inicio?: SortOrder
    data_hora_final?: SortOrder
  }

  export type ChamadaMinOrderByAggregateInput = {
    id?: SortOrder
    id_professor?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
    data_hora_inicio?: SortOrder
    data_hora_final?: SortOrder
  }

  export type ChamadaSumOrderByAggregateInput = {
    id?: SortOrder
    id_professor?: SortOrder
    id_disciplina?: SortOrder
    id_semestre?: SortOrder
  }

  export type ChamadaRelationFilter = {
    is?: ChamadaWhereInput
    isNot?: ChamadaWhereInput
  }

  export type ChamadaAlunosCountOrderByAggregateInput = {
    id?: SortOrder
    id_chamada?: SortOrder
    id_aluno?: SortOrder
  }

  export type ChamadaAlunosAvgOrderByAggregateInput = {
    id?: SortOrder
    id_chamada?: SortOrder
    id_aluno?: SortOrder
  }

  export type ChamadaAlunosMaxOrderByAggregateInput = {
    id?: SortOrder
    id_chamada?: SortOrder
    id_aluno?: SortOrder
  }

  export type ChamadaAlunosMinOrderByAggregateInput = {
    id?: SortOrder
    id_chamada?: SortOrder
    id_aluno?: SortOrder
  }

  export type ChamadaAlunosSumOrderByAggregateInput = {
    id?: SortOrder
    id_chamada?: SortOrder
    id_aluno?: SortOrder
  }

  export type SemestreProfessorDisciplinasCountOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_professor?: SortOrder
    id_semestre?: SortOrder
  }

  export type SemestreProfessorDisciplinasAvgOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_professor?: SortOrder
    id_semestre?: SortOrder
  }

  export type SemestreProfessorDisciplinasMaxOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_professor?: SortOrder
    id_semestre?: SortOrder
  }

  export type SemestreProfessorDisciplinasMinOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_professor?: SortOrder
    id_semestre?: SortOrder
  }

  export type SemestreProfessorDisciplinasSumOrderByAggregateInput = {
    id?: SortOrder
    id_disciplina?: SortOrder
    id_professor?: SortOrder
    id_semestre?: SortOrder
  }

  export type TurmaAlunosCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TurmaAlunosCreateWithoutUsuarioInput, TurmaAlunosUncheckedCreateWithoutUsuarioInput> | TurmaAlunosCreateWithoutUsuarioInput[] | TurmaAlunosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TurmaAlunosCreateOrConnectWithoutUsuarioInput | TurmaAlunosCreateOrConnectWithoutUsuarioInput[]
    createMany?: TurmaAlunosCreateManyUsuarioInputEnvelope
    connect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
  }

  export type ChamadaCreateNestedManyWithoutProfessorInput = {
    create?: XOR<ChamadaCreateWithoutProfessorInput, ChamadaUncheckedCreateWithoutProfessorInput> | ChamadaCreateWithoutProfessorInput[] | ChamadaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutProfessorInput | ChamadaCreateOrConnectWithoutProfessorInput[]
    createMany?: ChamadaCreateManyProfessorInputEnvelope
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
  }

  export type ChamadaAlunosCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ChamadaAlunosCreateWithoutUsuarioInput, ChamadaAlunosUncheckedCreateWithoutUsuarioInput> | ChamadaAlunosCreateWithoutUsuarioInput[] | ChamadaAlunosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ChamadaAlunosCreateOrConnectWithoutUsuarioInput | ChamadaAlunosCreateOrConnectWithoutUsuarioInput[]
    createMany?: ChamadaAlunosCreateManyUsuarioInputEnvelope
    connect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
  }

  export type SemestreProfessorDisciplinasCreateNestedManyWithoutProfessorInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutProfessorInput, SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput> | SemestreProfessorDisciplinasCreateWithoutProfessorInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput | SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput[]
    createMany?: SemestreProfessorDisciplinasCreateManyProfessorInputEnvelope
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
  }

  export type TurmaAlunosUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TurmaAlunosCreateWithoutUsuarioInput, TurmaAlunosUncheckedCreateWithoutUsuarioInput> | TurmaAlunosCreateWithoutUsuarioInput[] | TurmaAlunosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TurmaAlunosCreateOrConnectWithoutUsuarioInput | TurmaAlunosCreateOrConnectWithoutUsuarioInput[]
    createMany?: TurmaAlunosCreateManyUsuarioInputEnvelope
    connect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
  }

  export type ChamadaUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<ChamadaCreateWithoutProfessorInput, ChamadaUncheckedCreateWithoutProfessorInput> | ChamadaCreateWithoutProfessorInput[] | ChamadaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutProfessorInput | ChamadaCreateOrConnectWithoutProfessorInput[]
    createMany?: ChamadaCreateManyProfessorInputEnvelope
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
  }

  export type ChamadaAlunosUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ChamadaAlunosCreateWithoutUsuarioInput, ChamadaAlunosUncheckedCreateWithoutUsuarioInput> | ChamadaAlunosCreateWithoutUsuarioInput[] | ChamadaAlunosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ChamadaAlunosCreateOrConnectWithoutUsuarioInput | ChamadaAlunosCreateOrConnectWithoutUsuarioInput[]
    createMany?: ChamadaAlunosCreateManyUsuarioInputEnvelope
    connect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
  }

  export type SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutProfessorInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutProfessorInput, SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput> | SemestreProfessorDisciplinasCreateWithoutProfessorInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput | SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput[]
    createMany?: SemestreProfessorDisciplinasCreateManyProfessorInputEnvelope
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TurmaAlunosUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TurmaAlunosCreateWithoutUsuarioInput, TurmaAlunosUncheckedCreateWithoutUsuarioInput> | TurmaAlunosCreateWithoutUsuarioInput[] | TurmaAlunosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TurmaAlunosCreateOrConnectWithoutUsuarioInput | TurmaAlunosCreateOrConnectWithoutUsuarioInput[]
    upsert?: TurmaAlunosUpsertWithWhereUniqueWithoutUsuarioInput | TurmaAlunosUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TurmaAlunosCreateManyUsuarioInputEnvelope
    set?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    disconnect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    delete?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    connect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    update?: TurmaAlunosUpdateWithWhereUniqueWithoutUsuarioInput | TurmaAlunosUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TurmaAlunosUpdateManyWithWhereWithoutUsuarioInput | TurmaAlunosUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TurmaAlunosScalarWhereInput | TurmaAlunosScalarWhereInput[]
  }

  export type ChamadaUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<ChamadaCreateWithoutProfessorInput, ChamadaUncheckedCreateWithoutProfessorInput> | ChamadaCreateWithoutProfessorInput[] | ChamadaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutProfessorInput | ChamadaCreateOrConnectWithoutProfessorInput[]
    upsert?: ChamadaUpsertWithWhereUniqueWithoutProfessorInput | ChamadaUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: ChamadaCreateManyProfessorInputEnvelope
    set?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    disconnect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    delete?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    update?: ChamadaUpdateWithWhereUniqueWithoutProfessorInput | ChamadaUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: ChamadaUpdateManyWithWhereWithoutProfessorInput | ChamadaUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: ChamadaScalarWhereInput | ChamadaScalarWhereInput[]
  }

  export type ChamadaAlunosUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ChamadaAlunosCreateWithoutUsuarioInput, ChamadaAlunosUncheckedCreateWithoutUsuarioInput> | ChamadaAlunosCreateWithoutUsuarioInput[] | ChamadaAlunosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ChamadaAlunosCreateOrConnectWithoutUsuarioInput | ChamadaAlunosCreateOrConnectWithoutUsuarioInput[]
    upsert?: ChamadaAlunosUpsertWithWhereUniqueWithoutUsuarioInput | ChamadaAlunosUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ChamadaAlunosCreateManyUsuarioInputEnvelope
    set?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    disconnect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    delete?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    connect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    update?: ChamadaAlunosUpdateWithWhereUniqueWithoutUsuarioInput | ChamadaAlunosUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ChamadaAlunosUpdateManyWithWhereWithoutUsuarioInput | ChamadaAlunosUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ChamadaAlunosScalarWhereInput | ChamadaAlunosScalarWhereInput[]
  }

  export type SemestreProfessorDisciplinasUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutProfessorInput, SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput> | SemestreProfessorDisciplinasCreateWithoutProfessorInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput | SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput[]
    upsert?: SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutProfessorInput | SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: SemestreProfessorDisciplinasCreateManyProfessorInputEnvelope
    set?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    disconnect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    delete?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    update?: SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutProfessorInput | SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: SemestreProfessorDisciplinasUpdateManyWithWhereWithoutProfessorInput | SemestreProfessorDisciplinasUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: SemestreProfessorDisciplinasScalarWhereInput | SemestreProfessorDisciplinasScalarWhereInput[]
  }

  export type TurmaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TurmaAlunosCreateWithoutUsuarioInput, TurmaAlunosUncheckedCreateWithoutUsuarioInput> | TurmaAlunosCreateWithoutUsuarioInput[] | TurmaAlunosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TurmaAlunosCreateOrConnectWithoutUsuarioInput | TurmaAlunosCreateOrConnectWithoutUsuarioInput[]
    upsert?: TurmaAlunosUpsertWithWhereUniqueWithoutUsuarioInput | TurmaAlunosUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TurmaAlunosCreateManyUsuarioInputEnvelope
    set?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    disconnect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    delete?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    connect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    update?: TurmaAlunosUpdateWithWhereUniqueWithoutUsuarioInput | TurmaAlunosUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TurmaAlunosUpdateManyWithWhereWithoutUsuarioInput | TurmaAlunosUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TurmaAlunosScalarWhereInput | TurmaAlunosScalarWhereInput[]
  }

  export type ChamadaUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<ChamadaCreateWithoutProfessorInput, ChamadaUncheckedCreateWithoutProfessorInput> | ChamadaCreateWithoutProfessorInput[] | ChamadaUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutProfessorInput | ChamadaCreateOrConnectWithoutProfessorInput[]
    upsert?: ChamadaUpsertWithWhereUniqueWithoutProfessorInput | ChamadaUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: ChamadaCreateManyProfessorInputEnvelope
    set?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    disconnect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    delete?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    update?: ChamadaUpdateWithWhereUniqueWithoutProfessorInput | ChamadaUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: ChamadaUpdateManyWithWhereWithoutProfessorInput | ChamadaUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: ChamadaScalarWhereInput | ChamadaScalarWhereInput[]
  }

  export type ChamadaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ChamadaAlunosCreateWithoutUsuarioInput, ChamadaAlunosUncheckedCreateWithoutUsuarioInput> | ChamadaAlunosCreateWithoutUsuarioInput[] | ChamadaAlunosUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ChamadaAlunosCreateOrConnectWithoutUsuarioInput | ChamadaAlunosCreateOrConnectWithoutUsuarioInput[]
    upsert?: ChamadaAlunosUpsertWithWhereUniqueWithoutUsuarioInput | ChamadaAlunosUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ChamadaAlunosCreateManyUsuarioInputEnvelope
    set?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    disconnect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    delete?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    connect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    update?: ChamadaAlunosUpdateWithWhereUniqueWithoutUsuarioInput | ChamadaAlunosUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ChamadaAlunosUpdateManyWithWhereWithoutUsuarioInput | ChamadaAlunosUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ChamadaAlunosScalarWhereInput | ChamadaAlunosScalarWhereInput[]
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateManyWithoutProfessorNestedInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutProfessorInput, SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput> | SemestreProfessorDisciplinasCreateWithoutProfessorInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput | SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput[]
    upsert?: SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutProfessorInput | SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutProfessorInput[]
    createMany?: SemestreProfessorDisciplinasCreateManyProfessorInputEnvelope
    set?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    disconnect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    delete?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    update?: SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutProfessorInput | SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutProfessorInput[]
    updateMany?: SemestreProfessorDisciplinasUpdateManyWithWhereWithoutProfessorInput | SemestreProfessorDisciplinasUpdateManyWithWhereWithoutProfessorInput[]
    deleteMany?: SemestreProfessorDisciplinasScalarWhereInput | SemestreProfessorDisciplinasScalarWhereInput[]
  }

  export type TurmaDisciplinasCreateNestedManyWithoutSemestreInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutSemestreInput, TurmaDisciplinasUncheckedCreateWithoutSemestreInput> | TurmaDisciplinasCreateWithoutSemestreInput[] | TurmaDisciplinasUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutSemestreInput | TurmaDisciplinasCreateOrConnectWithoutSemestreInput[]
    createMany?: TurmaDisciplinasCreateManySemestreInputEnvelope
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
  }

  export type ChamadaCreateNestedManyWithoutSemestreInput = {
    create?: XOR<ChamadaCreateWithoutSemestreInput, ChamadaUncheckedCreateWithoutSemestreInput> | ChamadaCreateWithoutSemestreInput[] | ChamadaUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutSemestreInput | ChamadaCreateOrConnectWithoutSemestreInput[]
    createMany?: ChamadaCreateManySemestreInputEnvelope
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
  }

  export type SemestreProfessorDisciplinasCreateNestedManyWithoutSemestreInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutSemestreInput, SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput> | SemestreProfessorDisciplinasCreateWithoutSemestreInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput | SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput[]
    createMany?: SemestreProfessorDisciplinasCreateManySemestreInputEnvelope
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
  }

  export type TurmaDisciplinasUncheckedCreateNestedManyWithoutSemestreInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutSemestreInput, TurmaDisciplinasUncheckedCreateWithoutSemestreInput> | TurmaDisciplinasCreateWithoutSemestreInput[] | TurmaDisciplinasUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutSemestreInput | TurmaDisciplinasCreateOrConnectWithoutSemestreInput[]
    createMany?: TurmaDisciplinasCreateManySemestreInputEnvelope
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
  }

  export type ChamadaUncheckedCreateNestedManyWithoutSemestreInput = {
    create?: XOR<ChamadaCreateWithoutSemestreInput, ChamadaUncheckedCreateWithoutSemestreInput> | ChamadaCreateWithoutSemestreInput[] | ChamadaUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutSemestreInput | ChamadaCreateOrConnectWithoutSemestreInput[]
    createMany?: ChamadaCreateManySemestreInputEnvelope
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
  }

  export type SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutSemestreInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutSemestreInput, SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput> | SemestreProfessorDisciplinasCreateWithoutSemestreInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput | SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput[]
    createMany?: SemestreProfessorDisciplinasCreateManySemestreInputEnvelope
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TurmaDisciplinasUpdateManyWithoutSemestreNestedInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutSemestreInput, TurmaDisciplinasUncheckedCreateWithoutSemestreInput> | TurmaDisciplinasCreateWithoutSemestreInput[] | TurmaDisciplinasUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutSemestreInput | TurmaDisciplinasCreateOrConnectWithoutSemestreInput[]
    upsert?: TurmaDisciplinasUpsertWithWhereUniqueWithoutSemestreInput | TurmaDisciplinasUpsertWithWhereUniqueWithoutSemestreInput[]
    createMany?: TurmaDisciplinasCreateManySemestreInputEnvelope
    set?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    disconnect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    delete?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    update?: TurmaDisciplinasUpdateWithWhereUniqueWithoutSemestreInput | TurmaDisciplinasUpdateWithWhereUniqueWithoutSemestreInput[]
    updateMany?: TurmaDisciplinasUpdateManyWithWhereWithoutSemestreInput | TurmaDisciplinasUpdateManyWithWhereWithoutSemestreInput[]
    deleteMany?: TurmaDisciplinasScalarWhereInput | TurmaDisciplinasScalarWhereInput[]
  }

  export type ChamadaUpdateManyWithoutSemestreNestedInput = {
    create?: XOR<ChamadaCreateWithoutSemestreInput, ChamadaUncheckedCreateWithoutSemestreInput> | ChamadaCreateWithoutSemestreInput[] | ChamadaUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutSemestreInput | ChamadaCreateOrConnectWithoutSemestreInput[]
    upsert?: ChamadaUpsertWithWhereUniqueWithoutSemestreInput | ChamadaUpsertWithWhereUniqueWithoutSemestreInput[]
    createMany?: ChamadaCreateManySemestreInputEnvelope
    set?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    disconnect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    delete?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    update?: ChamadaUpdateWithWhereUniqueWithoutSemestreInput | ChamadaUpdateWithWhereUniqueWithoutSemestreInput[]
    updateMany?: ChamadaUpdateManyWithWhereWithoutSemestreInput | ChamadaUpdateManyWithWhereWithoutSemestreInput[]
    deleteMany?: ChamadaScalarWhereInput | ChamadaScalarWhereInput[]
  }

  export type SemestreProfessorDisciplinasUpdateManyWithoutSemestreNestedInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutSemestreInput, SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput> | SemestreProfessorDisciplinasCreateWithoutSemestreInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput | SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput[]
    upsert?: SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutSemestreInput | SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutSemestreInput[]
    createMany?: SemestreProfessorDisciplinasCreateManySemestreInputEnvelope
    set?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    disconnect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    delete?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    update?: SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutSemestreInput | SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutSemestreInput[]
    updateMany?: SemestreProfessorDisciplinasUpdateManyWithWhereWithoutSemestreInput | SemestreProfessorDisciplinasUpdateManyWithWhereWithoutSemestreInput[]
    deleteMany?: SemestreProfessorDisciplinasScalarWhereInput | SemestreProfessorDisciplinasScalarWhereInput[]
  }

  export type TurmaDisciplinasUncheckedUpdateManyWithoutSemestreNestedInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutSemestreInput, TurmaDisciplinasUncheckedCreateWithoutSemestreInput> | TurmaDisciplinasCreateWithoutSemestreInput[] | TurmaDisciplinasUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutSemestreInput | TurmaDisciplinasCreateOrConnectWithoutSemestreInput[]
    upsert?: TurmaDisciplinasUpsertWithWhereUniqueWithoutSemestreInput | TurmaDisciplinasUpsertWithWhereUniqueWithoutSemestreInput[]
    createMany?: TurmaDisciplinasCreateManySemestreInputEnvelope
    set?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    disconnect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    delete?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    update?: TurmaDisciplinasUpdateWithWhereUniqueWithoutSemestreInput | TurmaDisciplinasUpdateWithWhereUniqueWithoutSemestreInput[]
    updateMany?: TurmaDisciplinasUpdateManyWithWhereWithoutSemestreInput | TurmaDisciplinasUpdateManyWithWhereWithoutSemestreInput[]
    deleteMany?: TurmaDisciplinasScalarWhereInput | TurmaDisciplinasScalarWhereInput[]
  }

  export type ChamadaUncheckedUpdateManyWithoutSemestreNestedInput = {
    create?: XOR<ChamadaCreateWithoutSemestreInput, ChamadaUncheckedCreateWithoutSemestreInput> | ChamadaCreateWithoutSemestreInput[] | ChamadaUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutSemestreInput | ChamadaCreateOrConnectWithoutSemestreInput[]
    upsert?: ChamadaUpsertWithWhereUniqueWithoutSemestreInput | ChamadaUpsertWithWhereUniqueWithoutSemestreInput[]
    createMany?: ChamadaCreateManySemestreInputEnvelope
    set?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    disconnect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    delete?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    update?: ChamadaUpdateWithWhereUniqueWithoutSemestreInput | ChamadaUpdateWithWhereUniqueWithoutSemestreInput[]
    updateMany?: ChamadaUpdateManyWithWhereWithoutSemestreInput | ChamadaUpdateManyWithWhereWithoutSemestreInput[]
    deleteMany?: ChamadaScalarWhereInput | ChamadaScalarWhereInput[]
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateManyWithoutSemestreNestedInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutSemestreInput, SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput> | SemestreProfessorDisciplinasCreateWithoutSemestreInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput | SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput[]
    upsert?: SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutSemestreInput | SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutSemestreInput[]
    createMany?: SemestreProfessorDisciplinasCreateManySemestreInputEnvelope
    set?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    disconnect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    delete?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    update?: SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutSemestreInput | SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutSemestreInput[]
    updateMany?: SemestreProfessorDisciplinasUpdateManyWithWhereWithoutSemestreInput | SemestreProfessorDisciplinasUpdateManyWithWhereWithoutSemestreInput[]
    deleteMany?: SemestreProfessorDisciplinasScalarWhereInput | SemestreProfessorDisciplinasScalarWhereInput[]
  }

  export type DisciplinaCreateNestedManyWithoutCursoInput = {
    create?: XOR<DisciplinaCreateWithoutCursoInput, DisciplinaUncheckedCreateWithoutCursoInput> | DisciplinaCreateWithoutCursoInput[] | DisciplinaUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: DisciplinaCreateOrConnectWithoutCursoInput | DisciplinaCreateOrConnectWithoutCursoInput[]
    createMany?: DisciplinaCreateManyCursoInputEnvelope
    connect?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
  }

  export type TurmaCreateNestedManyWithoutCursoInput = {
    create?: XOR<TurmaCreateWithoutCursoInput, TurmaUncheckedCreateWithoutCursoInput> | TurmaCreateWithoutCursoInput[] | TurmaUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutCursoInput | TurmaCreateOrConnectWithoutCursoInput[]
    createMany?: TurmaCreateManyCursoInputEnvelope
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
  }

  export type DisciplinaUncheckedCreateNestedManyWithoutCursoInput = {
    create?: XOR<DisciplinaCreateWithoutCursoInput, DisciplinaUncheckedCreateWithoutCursoInput> | DisciplinaCreateWithoutCursoInput[] | DisciplinaUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: DisciplinaCreateOrConnectWithoutCursoInput | DisciplinaCreateOrConnectWithoutCursoInput[]
    createMany?: DisciplinaCreateManyCursoInputEnvelope
    connect?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
  }

  export type TurmaUncheckedCreateNestedManyWithoutCursoInput = {
    create?: XOR<TurmaCreateWithoutCursoInput, TurmaUncheckedCreateWithoutCursoInput> | TurmaCreateWithoutCursoInput[] | TurmaUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutCursoInput | TurmaCreateOrConnectWithoutCursoInput[]
    createMany?: TurmaCreateManyCursoInputEnvelope
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
  }

  export type DisciplinaUpdateManyWithoutCursoNestedInput = {
    create?: XOR<DisciplinaCreateWithoutCursoInput, DisciplinaUncheckedCreateWithoutCursoInput> | DisciplinaCreateWithoutCursoInput[] | DisciplinaUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: DisciplinaCreateOrConnectWithoutCursoInput | DisciplinaCreateOrConnectWithoutCursoInput[]
    upsert?: DisciplinaUpsertWithWhereUniqueWithoutCursoInput | DisciplinaUpsertWithWhereUniqueWithoutCursoInput[]
    createMany?: DisciplinaCreateManyCursoInputEnvelope
    set?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
    disconnect?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
    delete?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
    connect?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
    update?: DisciplinaUpdateWithWhereUniqueWithoutCursoInput | DisciplinaUpdateWithWhereUniqueWithoutCursoInput[]
    updateMany?: DisciplinaUpdateManyWithWhereWithoutCursoInput | DisciplinaUpdateManyWithWhereWithoutCursoInput[]
    deleteMany?: DisciplinaScalarWhereInput | DisciplinaScalarWhereInput[]
  }

  export type TurmaUpdateManyWithoutCursoNestedInput = {
    create?: XOR<TurmaCreateWithoutCursoInput, TurmaUncheckedCreateWithoutCursoInput> | TurmaCreateWithoutCursoInput[] | TurmaUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutCursoInput | TurmaCreateOrConnectWithoutCursoInput[]
    upsert?: TurmaUpsertWithWhereUniqueWithoutCursoInput | TurmaUpsertWithWhereUniqueWithoutCursoInput[]
    createMany?: TurmaCreateManyCursoInputEnvelope
    set?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    disconnect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    delete?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    update?: TurmaUpdateWithWhereUniqueWithoutCursoInput | TurmaUpdateWithWhereUniqueWithoutCursoInput[]
    updateMany?: TurmaUpdateManyWithWhereWithoutCursoInput | TurmaUpdateManyWithWhereWithoutCursoInput[]
    deleteMany?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
  }

  export type DisciplinaUncheckedUpdateManyWithoutCursoNestedInput = {
    create?: XOR<DisciplinaCreateWithoutCursoInput, DisciplinaUncheckedCreateWithoutCursoInput> | DisciplinaCreateWithoutCursoInput[] | DisciplinaUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: DisciplinaCreateOrConnectWithoutCursoInput | DisciplinaCreateOrConnectWithoutCursoInput[]
    upsert?: DisciplinaUpsertWithWhereUniqueWithoutCursoInput | DisciplinaUpsertWithWhereUniqueWithoutCursoInput[]
    createMany?: DisciplinaCreateManyCursoInputEnvelope
    set?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
    disconnect?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
    delete?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
    connect?: DisciplinaWhereUniqueInput | DisciplinaWhereUniqueInput[]
    update?: DisciplinaUpdateWithWhereUniqueWithoutCursoInput | DisciplinaUpdateWithWhereUniqueWithoutCursoInput[]
    updateMany?: DisciplinaUpdateManyWithWhereWithoutCursoInput | DisciplinaUpdateManyWithWhereWithoutCursoInput[]
    deleteMany?: DisciplinaScalarWhereInput | DisciplinaScalarWhereInput[]
  }

  export type TurmaUncheckedUpdateManyWithoutCursoNestedInput = {
    create?: XOR<TurmaCreateWithoutCursoInput, TurmaUncheckedCreateWithoutCursoInput> | TurmaCreateWithoutCursoInput[] | TurmaUncheckedCreateWithoutCursoInput[]
    connectOrCreate?: TurmaCreateOrConnectWithoutCursoInput | TurmaCreateOrConnectWithoutCursoInput[]
    upsert?: TurmaUpsertWithWhereUniqueWithoutCursoInput | TurmaUpsertWithWhereUniqueWithoutCursoInput[]
    createMany?: TurmaCreateManyCursoInputEnvelope
    set?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    disconnect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    delete?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    connect?: TurmaWhereUniqueInput | TurmaWhereUniqueInput[]
    update?: TurmaUpdateWithWhereUniqueWithoutCursoInput | TurmaUpdateWithWhereUniqueWithoutCursoInput[]
    updateMany?: TurmaUpdateManyWithWhereWithoutCursoInput | TurmaUpdateManyWithWhereWithoutCursoInput[]
    deleteMany?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
  }

  export type CursoCreateNestedOneWithoutDisciplinaInput = {
    create?: XOR<CursoCreateWithoutDisciplinaInput, CursoUncheckedCreateWithoutDisciplinaInput>
    connectOrCreate?: CursoCreateOrConnectWithoutDisciplinaInput
    connect?: CursoWhereUniqueInput
  }

  export type TurmaDisciplinasCreateNestedManyWithoutDisciplinaInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutDisciplinaInput, TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput> | TurmaDisciplinasCreateWithoutDisciplinaInput[] | TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput | TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput[]
    createMany?: TurmaDisciplinasCreateManyDisciplinaInputEnvelope
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
  }

  export type ChamadaCreateNestedManyWithoutDisciplinaInput = {
    create?: XOR<ChamadaCreateWithoutDisciplinaInput, ChamadaUncheckedCreateWithoutDisciplinaInput> | ChamadaCreateWithoutDisciplinaInput[] | ChamadaUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutDisciplinaInput | ChamadaCreateOrConnectWithoutDisciplinaInput[]
    createMany?: ChamadaCreateManyDisciplinaInputEnvelope
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
  }

  export type SemestreProfessorDisciplinasCreateNestedManyWithoutDisciplinaInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutDisciplinaInput, SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput> | SemestreProfessorDisciplinasCreateWithoutDisciplinaInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput | SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput[]
    createMany?: SemestreProfessorDisciplinasCreateManyDisciplinaInputEnvelope
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
  }

  export type TurmaDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutDisciplinaInput, TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput> | TurmaDisciplinasCreateWithoutDisciplinaInput[] | TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput | TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput[]
    createMany?: TurmaDisciplinasCreateManyDisciplinaInputEnvelope
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
  }

  export type ChamadaUncheckedCreateNestedManyWithoutDisciplinaInput = {
    create?: XOR<ChamadaCreateWithoutDisciplinaInput, ChamadaUncheckedCreateWithoutDisciplinaInput> | ChamadaCreateWithoutDisciplinaInput[] | ChamadaUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutDisciplinaInput | ChamadaCreateOrConnectWithoutDisciplinaInput[]
    createMany?: ChamadaCreateManyDisciplinaInputEnvelope
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
  }

  export type SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutDisciplinaInput, SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput> | SemestreProfessorDisciplinasCreateWithoutDisciplinaInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput | SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput[]
    createMany?: SemestreProfessorDisciplinasCreateManyDisciplinaInputEnvelope
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
  }

  export type CursoUpdateOneRequiredWithoutDisciplinaNestedInput = {
    create?: XOR<CursoCreateWithoutDisciplinaInput, CursoUncheckedCreateWithoutDisciplinaInput>
    connectOrCreate?: CursoCreateOrConnectWithoutDisciplinaInput
    upsert?: CursoUpsertWithoutDisciplinaInput
    connect?: CursoWhereUniqueInput
    update?: XOR<XOR<CursoUpdateToOneWithWhereWithoutDisciplinaInput, CursoUpdateWithoutDisciplinaInput>, CursoUncheckedUpdateWithoutDisciplinaInput>
  }

  export type TurmaDisciplinasUpdateManyWithoutDisciplinaNestedInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutDisciplinaInput, TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput> | TurmaDisciplinasCreateWithoutDisciplinaInput[] | TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput | TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput[]
    upsert?: TurmaDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput | TurmaDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput[]
    createMany?: TurmaDisciplinasCreateManyDisciplinaInputEnvelope
    set?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    disconnect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    delete?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    update?: TurmaDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput | TurmaDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput[]
    updateMany?: TurmaDisciplinasUpdateManyWithWhereWithoutDisciplinaInput | TurmaDisciplinasUpdateManyWithWhereWithoutDisciplinaInput[]
    deleteMany?: TurmaDisciplinasScalarWhereInput | TurmaDisciplinasScalarWhereInput[]
  }

  export type ChamadaUpdateManyWithoutDisciplinaNestedInput = {
    create?: XOR<ChamadaCreateWithoutDisciplinaInput, ChamadaUncheckedCreateWithoutDisciplinaInput> | ChamadaCreateWithoutDisciplinaInput[] | ChamadaUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutDisciplinaInput | ChamadaCreateOrConnectWithoutDisciplinaInput[]
    upsert?: ChamadaUpsertWithWhereUniqueWithoutDisciplinaInput | ChamadaUpsertWithWhereUniqueWithoutDisciplinaInput[]
    createMany?: ChamadaCreateManyDisciplinaInputEnvelope
    set?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    disconnect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    delete?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    update?: ChamadaUpdateWithWhereUniqueWithoutDisciplinaInput | ChamadaUpdateWithWhereUniqueWithoutDisciplinaInput[]
    updateMany?: ChamadaUpdateManyWithWhereWithoutDisciplinaInput | ChamadaUpdateManyWithWhereWithoutDisciplinaInput[]
    deleteMany?: ChamadaScalarWhereInput | ChamadaScalarWhereInput[]
  }

  export type SemestreProfessorDisciplinasUpdateManyWithoutDisciplinaNestedInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutDisciplinaInput, SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput> | SemestreProfessorDisciplinasCreateWithoutDisciplinaInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput | SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput[]
    upsert?: SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput | SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput[]
    createMany?: SemestreProfessorDisciplinasCreateManyDisciplinaInputEnvelope
    set?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    disconnect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    delete?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    update?: SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput | SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput[]
    updateMany?: SemestreProfessorDisciplinasUpdateManyWithWhereWithoutDisciplinaInput | SemestreProfessorDisciplinasUpdateManyWithWhereWithoutDisciplinaInput[]
    deleteMany?: SemestreProfessorDisciplinasScalarWhereInput | SemestreProfessorDisciplinasScalarWhereInput[]
  }

  export type TurmaDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutDisciplinaInput, TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput> | TurmaDisciplinasCreateWithoutDisciplinaInput[] | TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput | TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput[]
    upsert?: TurmaDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput | TurmaDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput[]
    createMany?: TurmaDisciplinasCreateManyDisciplinaInputEnvelope
    set?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    disconnect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    delete?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    update?: TurmaDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput | TurmaDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput[]
    updateMany?: TurmaDisciplinasUpdateManyWithWhereWithoutDisciplinaInput | TurmaDisciplinasUpdateManyWithWhereWithoutDisciplinaInput[]
    deleteMany?: TurmaDisciplinasScalarWhereInput | TurmaDisciplinasScalarWhereInput[]
  }

  export type ChamadaUncheckedUpdateManyWithoutDisciplinaNestedInput = {
    create?: XOR<ChamadaCreateWithoutDisciplinaInput, ChamadaUncheckedCreateWithoutDisciplinaInput> | ChamadaCreateWithoutDisciplinaInput[] | ChamadaUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: ChamadaCreateOrConnectWithoutDisciplinaInput | ChamadaCreateOrConnectWithoutDisciplinaInput[]
    upsert?: ChamadaUpsertWithWhereUniqueWithoutDisciplinaInput | ChamadaUpsertWithWhereUniqueWithoutDisciplinaInput[]
    createMany?: ChamadaCreateManyDisciplinaInputEnvelope
    set?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    disconnect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    delete?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    connect?: ChamadaWhereUniqueInput | ChamadaWhereUniqueInput[]
    update?: ChamadaUpdateWithWhereUniqueWithoutDisciplinaInput | ChamadaUpdateWithWhereUniqueWithoutDisciplinaInput[]
    updateMany?: ChamadaUpdateManyWithWhereWithoutDisciplinaInput | ChamadaUpdateManyWithWhereWithoutDisciplinaInput[]
    deleteMany?: ChamadaScalarWhereInput | ChamadaScalarWhereInput[]
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput = {
    create?: XOR<SemestreProfessorDisciplinasCreateWithoutDisciplinaInput, SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput> | SemestreProfessorDisciplinasCreateWithoutDisciplinaInput[] | SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput[]
    connectOrCreate?: SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput | SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput[]
    upsert?: SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput | SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput[]
    createMany?: SemestreProfessorDisciplinasCreateManyDisciplinaInputEnvelope
    set?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    disconnect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    delete?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    connect?: SemestreProfessorDisciplinasWhereUniqueInput | SemestreProfessorDisciplinasWhereUniqueInput[]
    update?: SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput | SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput[]
    updateMany?: SemestreProfessorDisciplinasUpdateManyWithWhereWithoutDisciplinaInput | SemestreProfessorDisciplinasUpdateManyWithWhereWithoutDisciplinaInput[]
    deleteMany?: SemestreProfessorDisciplinasScalarWhereInput | SemestreProfessorDisciplinasScalarWhereInput[]
  }

  export type CursoCreateNestedOneWithoutTurmaInput = {
    create?: XOR<CursoCreateWithoutTurmaInput, CursoUncheckedCreateWithoutTurmaInput>
    connectOrCreate?: CursoCreateOrConnectWithoutTurmaInput
    connect?: CursoWhereUniqueInput
  }

  export type TurmaDisciplinasCreateNestedManyWithoutTurmaInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutTurmaInput, TurmaDisciplinasUncheckedCreateWithoutTurmaInput> | TurmaDisciplinasCreateWithoutTurmaInput[] | TurmaDisciplinasUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutTurmaInput | TurmaDisciplinasCreateOrConnectWithoutTurmaInput[]
    createMany?: TurmaDisciplinasCreateManyTurmaInputEnvelope
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
  }

  export type TurmaAlunosCreateNestedManyWithoutTurmaInput = {
    create?: XOR<TurmaAlunosCreateWithoutTurmaInput, TurmaAlunosUncheckedCreateWithoutTurmaInput> | TurmaAlunosCreateWithoutTurmaInput[] | TurmaAlunosUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaAlunosCreateOrConnectWithoutTurmaInput | TurmaAlunosCreateOrConnectWithoutTurmaInput[]
    createMany?: TurmaAlunosCreateManyTurmaInputEnvelope
    connect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
  }

  export type TurmaDisciplinasUncheckedCreateNestedManyWithoutTurmaInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutTurmaInput, TurmaDisciplinasUncheckedCreateWithoutTurmaInput> | TurmaDisciplinasCreateWithoutTurmaInput[] | TurmaDisciplinasUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutTurmaInput | TurmaDisciplinasCreateOrConnectWithoutTurmaInput[]
    createMany?: TurmaDisciplinasCreateManyTurmaInputEnvelope
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
  }

  export type TurmaAlunosUncheckedCreateNestedManyWithoutTurmaInput = {
    create?: XOR<TurmaAlunosCreateWithoutTurmaInput, TurmaAlunosUncheckedCreateWithoutTurmaInput> | TurmaAlunosCreateWithoutTurmaInput[] | TurmaAlunosUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaAlunosCreateOrConnectWithoutTurmaInput | TurmaAlunosCreateOrConnectWithoutTurmaInput[]
    createMany?: TurmaAlunosCreateManyTurmaInputEnvelope
    connect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
  }

  export type CursoUpdateOneRequiredWithoutTurmaNestedInput = {
    create?: XOR<CursoCreateWithoutTurmaInput, CursoUncheckedCreateWithoutTurmaInput>
    connectOrCreate?: CursoCreateOrConnectWithoutTurmaInput
    upsert?: CursoUpsertWithoutTurmaInput
    connect?: CursoWhereUniqueInput
    update?: XOR<XOR<CursoUpdateToOneWithWhereWithoutTurmaInput, CursoUpdateWithoutTurmaInput>, CursoUncheckedUpdateWithoutTurmaInput>
  }

  export type TurmaDisciplinasUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutTurmaInput, TurmaDisciplinasUncheckedCreateWithoutTurmaInput> | TurmaDisciplinasCreateWithoutTurmaInput[] | TurmaDisciplinasUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutTurmaInput | TurmaDisciplinasCreateOrConnectWithoutTurmaInput[]
    upsert?: TurmaDisciplinasUpsertWithWhereUniqueWithoutTurmaInput | TurmaDisciplinasUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: TurmaDisciplinasCreateManyTurmaInputEnvelope
    set?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    disconnect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    delete?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    update?: TurmaDisciplinasUpdateWithWhereUniqueWithoutTurmaInput | TurmaDisciplinasUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: TurmaDisciplinasUpdateManyWithWhereWithoutTurmaInput | TurmaDisciplinasUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: TurmaDisciplinasScalarWhereInput | TurmaDisciplinasScalarWhereInput[]
  }

  export type TurmaAlunosUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<TurmaAlunosCreateWithoutTurmaInput, TurmaAlunosUncheckedCreateWithoutTurmaInput> | TurmaAlunosCreateWithoutTurmaInput[] | TurmaAlunosUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaAlunosCreateOrConnectWithoutTurmaInput | TurmaAlunosCreateOrConnectWithoutTurmaInput[]
    upsert?: TurmaAlunosUpsertWithWhereUniqueWithoutTurmaInput | TurmaAlunosUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: TurmaAlunosCreateManyTurmaInputEnvelope
    set?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    disconnect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    delete?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    connect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    update?: TurmaAlunosUpdateWithWhereUniqueWithoutTurmaInput | TurmaAlunosUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: TurmaAlunosUpdateManyWithWhereWithoutTurmaInput | TurmaAlunosUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: TurmaAlunosScalarWhereInput | TurmaAlunosScalarWhereInput[]
  }

  export type TurmaDisciplinasUncheckedUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<TurmaDisciplinasCreateWithoutTurmaInput, TurmaDisciplinasUncheckedCreateWithoutTurmaInput> | TurmaDisciplinasCreateWithoutTurmaInput[] | TurmaDisciplinasUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaDisciplinasCreateOrConnectWithoutTurmaInput | TurmaDisciplinasCreateOrConnectWithoutTurmaInput[]
    upsert?: TurmaDisciplinasUpsertWithWhereUniqueWithoutTurmaInput | TurmaDisciplinasUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: TurmaDisciplinasCreateManyTurmaInputEnvelope
    set?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    disconnect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    delete?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    connect?: TurmaDisciplinasWhereUniqueInput | TurmaDisciplinasWhereUniqueInput[]
    update?: TurmaDisciplinasUpdateWithWhereUniqueWithoutTurmaInput | TurmaDisciplinasUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: TurmaDisciplinasUpdateManyWithWhereWithoutTurmaInput | TurmaDisciplinasUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: TurmaDisciplinasScalarWhereInput | TurmaDisciplinasScalarWhereInput[]
  }

  export type TurmaAlunosUncheckedUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<TurmaAlunosCreateWithoutTurmaInput, TurmaAlunosUncheckedCreateWithoutTurmaInput> | TurmaAlunosCreateWithoutTurmaInput[] | TurmaAlunosUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: TurmaAlunosCreateOrConnectWithoutTurmaInput | TurmaAlunosCreateOrConnectWithoutTurmaInput[]
    upsert?: TurmaAlunosUpsertWithWhereUniqueWithoutTurmaInput | TurmaAlunosUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: TurmaAlunosCreateManyTurmaInputEnvelope
    set?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    disconnect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    delete?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    connect?: TurmaAlunosWhereUniqueInput | TurmaAlunosWhereUniqueInput[]
    update?: TurmaAlunosUpdateWithWhereUniqueWithoutTurmaInput | TurmaAlunosUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: TurmaAlunosUpdateManyWithWhereWithoutTurmaInput | TurmaAlunosUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: TurmaAlunosScalarWhereInput | TurmaAlunosScalarWhereInput[]
  }

  export type DisciplinaCreateNestedOneWithoutTurmaDisciplinasInput = {
    create?: XOR<DisciplinaCreateWithoutTurmaDisciplinasInput, DisciplinaUncheckedCreateWithoutTurmaDisciplinasInput>
    connectOrCreate?: DisciplinaCreateOrConnectWithoutTurmaDisciplinasInput
    connect?: DisciplinaWhereUniqueInput
  }

  export type SemestreCreateNestedOneWithoutTurmaDisciplinasInput = {
    create?: XOR<SemestreCreateWithoutTurmaDisciplinasInput, SemestreUncheckedCreateWithoutTurmaDisciplinasInput>
    connectOrCreate?: SemestreCreateOrConnectWithoutTurmaDisciplinasInput
    connect?: SemestreWhereUniqueInput
  }

  export type TurmaCreateNestedOneWithoutTurmaDisciplinasInput = {
    create?: XOR<TurmaCreateWithoutTurmaDisciplinasInput, TurmaUncheckedCreateWithoutTurmaDisciplinasInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutTurmaDisciplinasInput
    connect?: TurmaWhereUniqueInput
  }

  export type DisciplinaUpdateOneRequiredWithoutTurmaDisciplinasNestedInput = {
    create?: XOR<DisciplinaCreateWithoutTurmaDisciplinasInput, DisciplinaUncheckedCreateWithoutTurmaDisciplinasInput>
    connectOrCreate?: DisciplinaCreateOrConnectWithoutTurmaDisciplinasInput
    upsert?: DisciplinaUpsertWithoutTurmaDisciplinasInput
    connect?: DisciplinaWhereUniqueInput
    update?: XOR<XOR<DisciplinaUpdateToOneWithWhereWithoutTurmaDisciplinasInput, DisciplinaUpdateWithoutTurmaDisciplinasInput>, DisciplinaUncheckedUpdateWithoutTurmaDisciplinasInput>
  }

  export type SemestreUpdateOneRequiredWithoutTurmaDisciplinasNestedInput = {
    create?: XOR<SemestreCreateWithoutTurmaDisciplinasInput, SemestreUncheckedCreateWithoutTurmaDisciplinasInput>
    connectOrCreate?: SemestreCreateOrConnectWithoutTurmaDisciplinasInput
    upsert?: SemestreUpsertWithoutTurmaDisciplinasInput
    connect?: SemestreWhereUniqueInput
    update?: XOR<XOR<SemestreUpdateToOneWithWhereWithoutTurmaDisciplinasInput, SemestreUpdateWithoutTurmaDisciplinasInput>, SemestreUncheckedUpdateWithoutTurmaDisciplinasInput>
  }

  export type TurmaUpdateOneRequiredWithoutTurmaDisciplinasNestedInput = {
    create?: XOR<TurmaCreateWithoutTurmaDisciplinasInput, TurmaUncheckedCreateWithoutTurmaDisciplinasInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutTurmaDisciplinasInput
    upsert?: TurmaUpsertWithoutTurmaDisciplinasInput
    connect?: TurmaWhereUniqueInput
    update?: XOR<XOR<TurmaUpdateToOneWithWhereWithoutTurmaDisciplinasInput, TurmaUpdateWithoutTurmaDisciplinasInput>, TurmaUncheckedUpdateWithoutTurmaDisciplinasInput>
  }

  export type UsuarioCreateNestedOneWithoutTurmaAlunoInput = {
    create?: XOR<UsuarioCreateWithoutTurmaAlunoInput, UsuarioUncheckedCreateWithoutTurmaAlunoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTurmaAlunoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type TurmaCreateNestedOneWithoutTurmaAlunoInput = {
    create?: XOR<TurmaCreateWithoutTurmaAlunoInput, TurmaUncheckedCreateWithoutTurmaAlunoInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutTurmaAlunoInput
    connect?: TurmaWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutTurmaAlunoNestedInput = {
    create?: XOR<UsuarioCreateWithoutTurmaAlunoInput, UsuarioUncheckedCreateWithoutTurmaAlunoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTurmaAlunoInput
    upsert?: UsuarioUpsertWithoutTurmaAlunoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTurmaAlunoInput, UsuarioUpdateWithoutTurmaAlunoInput>, UsuarioUncheckedUpdateWithoutTurmaAlunoInput>
  }

  export type TurmaUpdateOneRequiredWithoutTurmaAlunoNestedInput = {
    create?: XOR<TurmaCreateWithoutTurmaAlunoInput, TurmaUncheckedCreateWithoutTurmaAlunoInput>
    connectOrCreate?: TurmaCreateOrConnectWithoutTurmaAlunoInput
    upsert?: TurmaUpsertWithoutTurmaAlunoInput
    connect?: TurmaWhereUniqueInput
    update?: XOR<XOR<TurmaUpdateToOneWithWhereWithoutTurmaAlunoInput, TurmaUpdateWithoutTurmaAlunoInput>, TurmaUncheckedUpdateWithoutTurmaAlunoInput>
  }

  export type UsuarioCreateNestedOneWithoutChamadaProfessorInput = {
    create?: XOR<UsuarioCreateWithoutChamadaProfessorInput, UsuarioUncheckedCreateWithoutChamadaProfessorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutChamadaProfessorInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DisciplinaCreateNestedOneWithoutChamadaInput = {
    create?: XOR<DisciplinaCreateWithoutChamadaInput, DisciplinaUncheckedCreateWithoutChamadaInput>
    connectOrCreate?: DisciplinaCreateOrConnectWithoutChamadaInput
    connect?: DisciplinaWhereUniqueInput
  }

  export type SemestreCreateNestedOneWithoutChamadaInput = {
    create?: XOR<SemestreCreateWithoutChamadaInput, SemestreUncheckedCreateWithoutChamadaInput>
    connectOrCreate?: SemestreCreateOrConnectWithoutChamadaInput
    connect?: SemestreWhereUniqueInput
  }

  export type ChamadaAlunosCreateNestedManyWithoutChamadaInput = {
    create?: XOR<ChamadaAlunosCreateWithoutChamadaInput, ChamadaAlunosUncheckedCreateWithoutChamadaInput> | ChamadaAlunosCreateWithoutChamadaInput[] | ChamadaAlunosUncheckedCreateWithoutChamadaInput[]
    connectOrCreate?: ChamadaAlunosCreateOrConnectWithoutChamadaInput | ChamadaAlunosCreateOrConnectWithoutChamadaInput[]
    createMany?: ChamadaAlunosCreateManyChamadaInputEnvelope
    connect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
  }

  export type ChamadaAlunosUncheckedCreateNestedManyWithoutChamadaInput = {
    create?: XOR<ChamadaAlunosCreateWithoutChamadaInput, ChamadaAlunosUncheckedCreateWithoutChamadaInput> | ChamadaAlunosCreateWithoutChamadaInput[] | ChamadaAlunosUncheckedCreateWithoutChamadaInput[]
    connectOrCreate?: ChamadaAlunosCreateOrConnectWithoutChamadaInput | ChamadaAlunosCreateOrConnectWithoutChamadaInput[]
    createMany?: ChamadaAlunosCreateManyChamadaInputEnvelope
    connect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutChamadaProfessorNestedInput = {
    create?: XOR<UsuarioCreateWithoutChamadaProfessorInput, UsuarioUncheckedCreateWithoutChamadaProfessorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutChamadaProfessorInput
    upsert?: UsuarioUpsertWithoutChamadaProfessorInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutChamadaProfessorInput, UsuarioUpdateWithoutChamadaProfessorInput>, UsuarioUncheckedUpdateWithoutChamadaProfessorInput>
  }

  export type DisciplinaUpdateOneRequiredWithoutChamadaNestedInput = {
    create?: XOR<DisciplinaCreateWithoutChamadaInput, DisciplinaUncheckedCreateWithoutChamadaInput>
    connectOrCreate?: DisciplinaCreateOrConnectWithoutChamadaInput
    upsert?: DisciplinaUpsertWithoutChamadaInput
    connect?: DisciplinaWhereUniqueInput
    update?: XOR<XOR<DisciplinaUpdateToOneWithWhereWithoutChamadaInput, DisciplinaUpdateWithoutChamadaInput>, DisciplinaUncheckedUpdateWithoutChamadaInput>
  }

  export type SemestreUpdateOneRequiredWithoutChamadaNestedInput = {
    create?: XOR<SemestreCreateWithoutChamadaInput, SemestreUncheckedCreateWithoutChamadaInput>
    connectOrCreate?: SemestreCreateOrConnectWithoutChamadaInput
    upsert?: SemestreUpsertWithoutChamadaInput
    connect?: SemestreWhereUniqueInput
    update?: XOR<XOR<SemestreUpdateToOneWithWhereWithoutChamadaInput, SemestreUpdateWithoutChamadaInput>, SemestreUncheckedUpdateWithoutChamadaInput>
  }

  export type ChamadaAlunosUpdateManyWithoutChamadaNestedInput = {
    create?: XOR<ChamadaAlunosCreateWithoutChamadaInput, ChamadaAlunosUncheckedCreateWithoutChamadaInput> | ChamadaAlunosCreateWithoutChamadaInput[] | ChamadaAlunosUncheckedCreateWithoutChamadaInput[]
    connectOrCreate?: ChamadaAlunosCreateOrConnectWithoutChamadaInput | ChamadaAlunosCreateOrConnectWithoutChamadaInput[]
    upsert?: ChamadaAlunosUpsertWithWhereUniqueWithoutChamadaInput | ChamadaAlunosUpsertWithWhereUniqueWithoutChamadaInput[]
    createMany?: ChamadaAlunosCreateManyChamadaInputEnvelope
    set?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    disconnect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    delete?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    connect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    update?: ChamadaAlunosUpdateWithWhereUniqueWithoutChamadaInput | ChamadaAlunosUpdateWithWhereUniqueWithoutChamadaInput[]
    updateMany?: ChamadaAlunosUpdateManyWithWhereWithoutChamadaInput | ChamadaAlunosUpdateManyWithWhereWithoutChamadaInput[]
    deleteMany?: ChamadaAlunosScalarWhereInput | ChamadaAlunosScalarWhereInput[]
  }

  export type ChamadaAlunosUncheckedUpdateManyWithoutChamadaNestedInput = {
    create?: XOR<ChamadaAlunosCreateWithoutChamadaInput, ChamadaAlunosUncheckedCreateWithoutChamadaInput> | ChamadaAlunosCreateWithoutChamadaInput[] | ChamadaAlunosUncheckedCreateWithoutChamadaInput[]
    connectOrCreate?: ChamadaAlunosCreateOrConnectWithoutChamadaInput | ChamadaAlunosCreateOrConnectWithoutChamadaInput[]
    upsert?: ChamadaAlunosUpsertWithWhereUniqueWithoutChamadaInput | ChamadaAlunosUpsertWithWhereUniqueWithoutChamadaInput[]
    createMany?: ChamadaAlunosCreateManyChamadaInputEnvelope
    set?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    disconnect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    delete?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    connect?: ChamadaAlunosWhereUniqueInput | ChamadaAlunosWhereUniqueInput[]
    update?: ChamadaAlunosUpdateWithWhereUniqueWithoutChamadaInput | ChamadaAlunosUpdateWithWhereUniqueWithoutChamadaInput[]
    updateMany?: ChamadaAlunosUpdateManyWithWhereWithoutChamadaInput | ChamadaAlunosUpdateManyWithWhereWithoutChamadaInput[]
    deleteMany?: ChamadaAlunosScalarWhereInput | ChamadaAlunosScalarWhereInput[]
  }

  export type ChamadaCreateNestedOneWithoutChamadaAlunoInput = {
    create?: XOR<ChamadaCreateWithoutChamadaAlunoInput, ChamadaUncheckedCreateWithoutChamadaAlunoInput>
    connectOrCreate?: ChamadaCreateOrConnectWithoutChamadaAlunoInput
    connect?: ChamadaWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutChamadaAlunoInput = {
    create?: XOR<UsuarioCreateWithoutChamadaAlunoInput, UsuarioUncheckedCreateWithoutChamadaAlunoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutChamadaAlunoInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ChamadaUpdateOneRequiredWithoutChamadaAlunoNestedInput = {
    create?: XOR<ChamadaCreateWithoutChamadaAlunoInput, ChamadaUncheckedCreateWithoutChamadaAlunoInput>
    connectOrCreate?: ChamadaCreateOrConnectWithoutChamadaAlunoInput
    upsert?: ChamadaUpsertWithoutChamadaAlunoInput
    connect?: ChamadaWhereUniqueInput
    update?: XOR<XOR<ChamadaUpdateToOneWithWhereWithoutChamadaAlunoInput, ChamadaUpdateWithoutChamadaAlunoInput>, ChamadaUncheckedUpdateWithoutChamadaAlunoInput>
  }

  export type UsuarioUpdateOneRequiredWithoutChamadaAlunoNestedInput = {
    create?: XOR<UsuarioCreateWithoutChamadaAlunoInput, UsuarioUncheckedCreateWithoutChamadaAlunoInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutChamadaAlunoInput
    upsert?: UsuarioUpsertWithoutChamadaAlunoInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutChamadaAlunoInput, UsuarioUpdateWithoutChamadaAlunoInput>, UsuarioUncheckedUpdateWithoutChamadaAlunoInput>
  }

  export type DisciplinaCreateNestedOneWithoutSemestreDisciplinaProfessorInput = {
    create?: XOR<DisciplinaCreateWithoutSemestreDisciplinaProfessorInput, DisciplinaUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    connectOrCreate?: DisciplinaCreateOrConnectWithoutSemestreDisciplinaProfessorInput
    connect?: DisciplinaWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutSemestreDisciplinaProfessorInput = {
    create?: XOR<UsuarioCreateWithoutSemestreDisciplinaProfessorInput, UsuarioUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSemestreDisciplinaProfessorInput
    connect?: UsuarioWhereUniqueInput
  }

  export type SemestreCreateNestedOneWithoutSemestreDisciplinaProfessorInput = {
    create?: XOR<SemestreCreateWithoutSemestreDisciplinaProfessorInput, SemestreUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    connectOrCreate?: SemestreCreateOrConnectWithoutSemestreDisciplinaProfessorInput
    connect?: SemestreWhereUniqueInput
  }

  export type DisciplinaUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput = {
    create?: XOR<DisciplinaCreateWithoutSemestreDisciplinaProfessorInput, DisciplinaUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    connectOrCreate?: DisciplinaCreateOrConnectWithoutSemestreDisciplinaProfessorInput
    upsert?: DisciplinaUpsertWithoutSemestreDisciplinaProfessorInput
    connect?: DisciplinaWhereUniqueInput
    update?: XOR<XOR<DisciplinaUpdateToOneWithWhereWithoutSemestreDisciplinaProfessorInput, DisciplinaUpdateWithoutSemestreDisciplinaProfessorInput>, DisciplinaUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
  }

  export type UsuarioUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput = {
    create?: XOR<UsuarioCreateWithoutSemestreDisciplinaProfessorInput, UsuarioUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSemestreDisciplinaProfessorInput
    upsert?: UsuarioUpsertWithoutSemestreDisciplinaProfessorInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutSemestreDisciplinaProfessorInput, UsuarioUpdateWithoutSemestreDisciplinaProfessorInput>, UsuarioUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
  }

  export type SemestreUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput = {
    create?: XOR<SemestreCreateWithoutSemestreDisciplinaProfessorInput, SemestreUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    connectOrCreate?: SemestreCreateOrConnectWithoutSemestreDisciplinaProfessorInput
    upsert?: SemestreUpsertWithoutSemestreDisciplinaProfessorInput
    connect?: SemestreWhereUniqueInput
    update?: XOR<XOR<SemestreUpdateToOneWithWhereWithoutSemestreDisciplinaProfessorInput, SemestreUpdateWithoutSemestreDisciplinaProfessorInput>, SemestreUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TurmaAlunosCreateWithoutUsuarioInput = {
    Turma: TurmaCreateNestedOneWithoutTurmaAlunoInput
  }

  export type TurmaAlunosUncheckedCreateWithoutUsuarioInput = {
    id?: number
    id_turma: number
  }

  export type TurmaAlunosCreateOrConnectWithoutUsuarioInput = {
    where: TurmaAlunosWhereUniqueInput
    create: XOR<TurmaAlunosCreateWithoutUsuarioInput, TurmaAlunosUncheckedCreateWithoutUsuarioInput>
  }

  export type TurmaAlunosCreateManyUsuarioInputEnvelope = {
    data: TurmaAlunosCreateManyUsuarioInput | TurmaAlunosCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ChamadaCreateWithoutProfessorInput = {
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    Disciplina: DisciplinaCreateNestedOneWithoutChamadaInput
    Semestre: SemestreCreateNestedOneWithoutChamadaInput
    ChamadaAluno?: ChamadaAlunosCreateNestedManyWithoutChamadaInput
  }

  export type ChamadaUncheckedCreateWithoutProfessorInput = {
    id?: number
    id_disciplina: number
    id_semestre: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    ChamadaAluno?: ChamadaAlunosUncheckedCreateNestedManyWithoutChamadaInput
  }

  export type ChamadaCreateOrConnectWithoutProfessorInput = {
    where: ChamadaWhereUniqueInput
    create: XOR<ChamadaCreateWithoutProfessorInput, ChamadaUncheckedCreateWithoutProfessorInput>
  }

  export type ChamadaCreateManyProfessorInputEnvelope = {
    data: ChamadaCreateManyProfessorInput | ChamadaCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type ChamadaAlunosCreateWithoutUsuarioInput = {
    Chamada: ChamadaCreateNestedOneWithoutChamadaAlunoInput
  }

  export type ChamadaAlunosUncheckedCreateWithoutUsuarioInput = {
    id?: number
    id_chamada: number
  }

  export type ChamadaAlunosCreateOrConnectWithoutUsuarioInput = {
    where: ChamadaAlunosWhereUniqueInput
    create: XOR<ChamadaAlunosCreateWithoutUsuarioInput, ChamadaAlunosUncheckedCreateWithoutUsuarioInput>
  }

  export type ChamadaAlunosCreateManyUsuarioInputEnvelope = {
    data: ChamadaAlunosCreateManyUsuarioInput | ChamadaAlunosCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type SemestreProfessorDisciplinasCreateWithoutProfessorInput = {
    Disciplina: DisciplinaCreateNestedOneWithoutSemestreDisciplinaProfessorInput
    Semestre: SemestreCreateNestedOneWithoutSemestreDisciplinaProfessorInput
  }

  export type SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput = {
    id?: number
    id_disciplina: number
    id_semestre: number
  }

  export type SemestreProfessorDisciplinasCreateOrConnectWithoutProfessorInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    create: XOR<SemestreProfessorDisciplinasCreateWithoutProfessorInput, SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput>
  }

  export type SemestreProfessorDisciplinasCreateManyProfessorInputEnvelope = {
    data: SemestreProfessorDisciplinasCreateManyProfessorInput | SemestreProfessorDisciplinasCreateManyProfessorInput[]
    skipDuplicates?: boolean
  }

  export type TurmaAlunosUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: TurmaAlunosWhereUniqueInput
    update: XOR<TurmaAlunosUpdateWithoutUsuarioInput, TurmaAlunosUncheckedUpdateWithoutUsuarioInput>
    create: XOR<TurmaAlunosCreateWithoutUsuarioInput, TurmaAlunosUncheckedCreateWithoutUsuarioInput>
  }

  export type TurmaAlunosUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: TurmaAlunosWhereUniqueInput
    data: XOR<TurmaAlunosUpdateWithoutUsuarioInput, TurmaAlunosUncheckedUpdateWithoutUsuarioInput>
  }

  export type TurmaAlunosUpdateManyWithWhereWithoutUsuarioInput = {
    where: TurmaAlunosScalarWhereInput
    data: XOR<TurmaAlunosUpdateManyMutationInput, TurmaAlunosUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type TurmaAlunosScalarWhereInput = {
    AND?: TurmaAlunosScalarWhereInput | TurmaAlunosScalarWhereInput[]
    OR?: TurmaAlunosScalarWhereInput[]
    NOT?: TurmaAlunosScalarWhereInput | TurmaAlunosScalarWhereInput[]
    id?: IntFilter<"TurmaAlunos"> | number
    id_aluno?: IntFilter<"TurmaAlunos"> | number
    id_turma?: IntFilter<"TurmaAlunos"> | number
  }

  export type ChamadaUpsertWithWhereUniqueWithoutProfessorInput = {
    where: ChamadaWhereUniqueInput
    update: XOR<ChamadaUpdateWithoutProfessorInput, ChamadaUncheckedUpdateWithoutProfessorInput>
    create: XOR<ChamadaCreateWithoutProfessorInput, ChamadaUncheckedCreateWithoutProfessorInput>
  }

  export type ChamadaUpdateWithWhereUniqueWithoutProfessorInput = {
    where: ChamadaWhereUniqueInput
    data: XOR<ChamadaUpdateWithoutProfessorInput, ChamadaUncheckedUpdateWithoutProfessorInput>
  }

  export type ChamadaUpdateManyWithWhereWithoutProfessorInput = {
    where: ChamadaScalarWhereInput
    data: XOR<ChamadaUpdateManyMutationInput, ChamadaUncheckedUpdateManyWithoutProfessorInput>
  }

  export type ChamadaScalarWhereInput = {
    AND?: ChamadaScalarWhereInput | ChamadaScalarWhereInput[]
    OR?: ChamadaScalarWhereInput[]
    NOT?: ChamadaScalarWhereInput | ChamadaScalarWhereInput[]
    id?: IntFilter<"Chamada"> | number
    id_professor?: IntFilter<"Chamada"> | number
    id_disciplina?: IntFilter<"Chamada"> | number
    id_semestre?: IntFilter<"Chamada"> | number
    data_hora_inicio?: DateTimeNullableFilter<"Chamada"> | Date | string | null
    data_hora_final?: DateTimeNullableFilter<"Chamada"> | Date | string | null
  }

  export type ChamadaAlunosUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ChamadaAlunosWhereUniqueInput
    update: XOR<ChamadaAlunosUpdateWithoutUsuarioInput, ChamadaAlunosUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ChamadaAlunosCreateWithoutUsuarioInput, ChamadaAlunosUncheckedCreateWithoutUsuarioInput>
  }

  export type ChamadaAlunosUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ChamadaAlunosWhereUniqueInput
    data: XOR<ChamadaAlunosUpdateWithoutUsuarioInput, ChamadaAlunosUncheckedUpdateWithoutUsuarioInput>
  }

  export type ChamadaAlunosUpdateManyWithWhereWithoutUsuarioInput = {
    where: ChamadaAlunosScalarWhereInput
    data: XOR<ChamadaAlunosUpdateManyMutationInput, ChamadaAlunosUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ChamadaAlunosScalarWhereInput = {
    AND?: ChamadaAlunosScalarWhereInput | ChamadaAlunosScalarWhereInput[]
    OR?: ChamadaAlunosScalarWhereInput[]
    NOT?: ChamadaAlunosScalarWhereInput | ChamadaAlunosScalarWhereInput[]
    id?: IntFilter<"ChamadaAlunos"> | number
    id_chamada?: IntFilter<"ChamadaAlunos"> | number
    id_aluno?: IntFilter<"ChamadaAlunos"> | number
  }

  export type SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutProfessorInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    update: XOR<SemestreProfessorDisciplinasUpdateWithoutProfessorInput, SemestreProfessorDisciplinasUncheckedUpdateWithoutProfessorInput>
    create: XOR<SemestreProfessorDisciplinasCreateWithoutProfessorInput, SemestreProfessorDisciplinasUncheckedCreateWithoutProfessorInput>
  }

  export type SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutProfessorInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    data: XOR<SemestreProfessorDisciplinasUpdateWithoutProfessorInput, SemestreProfessorDisciplinasUncheckedUpdateWithoutProfessorInput>
  }

  export type SemestreProfessorDisciplinasUpdateManyWithWhereWithoutProfessorInput = {
    where: SemestreProfessorDisciplinasScalarWhereInput
    data: XOR<SemestreProfessorDisciplinasUpdateManyMutationInput, SemestreProfessorDisciplinasUncheckedUpdateManyWithoutProfessorInput>
  }

  export type SemestreProfessorDisciplinasScalarWhereInput = {
    AND?: SemestreProfessorDisciplinasScalarWhereInput | SemestreProfessorDisciplinasScalarWhereInput[]
    OR?: SemestreProfessorDisciplinasScalarWhereInput[]
    NOT?: SemestreProfessorDisciplinasScalarWhereInput | SemestreProfessorDisciplinasScalarWhereInput[]
    id?: IntFilter<"SemestreProfessorDisciplinas"> | number
    id_disciplina?: IntFilter<"SemestreProfessorDisciplinas"> | number
    id_professor?: IntFilter<"SemestreProfessorDisciplinas"> | number
    id_semestre?: IntFilter<"SemestreProfessorDisciplinas"> | number
  }

  export type TurmaDisciplinasCreateWithoutSemestreInput = {
    semestre_curso: number
    Disciplina: DisciplinaCreateNestedOneWithoutTurmaDisciplinasInput
    Turma: TurmaCreateNestedOneWithoutTurmaDisciplinasInput
  }

  export type TurmaDisciplinasUncheckedCreateWithoutSemestreInput = {
    id?: number
    id_disciplina: number
    id_turma: number
    semestre_curso: number
  }

  export type TurmaDisciplinasCreateOrConnectWithoutSemestreInput = {
    where: TurmaDisciplinasWhereUniqueInput
    create: XOR<TurmaDisciplinasCreateWithoutSemestreInput, TurmaDisciplinasUncheckedCreateWithoutSemestreInput>
  }

  export type TurmaDisciplinasCreateManySemestreInputEnvelope = {
    data: TurmaDisciplinasCreateManySemestreInput | TurmaDisciplinasCreateManySemestreInput[]
    skipDuplicates?: boolean
  }

  export type ChamadaCreateWithoutSemestreInput = {
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    Professor: UsuarioCreateNestedOneWithoutChamadaProfessorInput
    Disciplina: DisciplinaCreateNestedOneWithoutChamadaInput
    ChamadaAluno?: ChamadaAlunosCreateNestedManyWithoutChamadaInput
  }

  export type ChamadaUncheckedCreateWithoutSemestreInput = {
    id?: number
    id_professor: number
    id_disciplina: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    ChamadaAluno?: ChamadaAlunosUncheckedCreateNestedManyWithoutChamadaInput
  }

  export type ChamadaCreateOrConnectWithoutSemestreInput = {
    where: ChamadaWhereUniqueInput
    create: XOR<ChamadaCreateWithoutSemestreInput, ChamadaUncheckedCreateWithoutSemestreInput>
  }

  export type ChamadaCreateManySemestreInputEnvelope = {
    data: ChamadaCreateManySemestreInput | ChamadaCreateManySemestreInput[]
    skipDuplicates?: boolean
  }

  export type SemestreProfessorDisciplinasCreateWithoutSemestreInput = {
    Disciplina: DisciplinaCreateNestedOneWithoutSemestreDisciplinaProfessorInput
    Professor: UsuarioCreateNestedOneWithoutSemestreDisciplinaProfessorInput
  }

  export type SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput = {
    id?: number
    id_disciplina: number
    id_professor: number
  }

  export type SemestreProfessorDisciplinasCreateOrConnectWithoutSemestreInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    create: XOR<SemestreProfessorDisciplinasCreateWithoutSemestreInput, SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput>
  }

  export type SemestreProfessorDisciplinasCreateManySemestreInputEnvelope = {
    data: SemestreProfessorDisciplinasCreateManySemestreInput | SemestreProfessorDisciplinasCreateManySemestreInput[]
    skipDuplicates?: boolean
  }

  export type TurmaDisciplinasUpsertWithWhereUniqueWithoutSemestreInput = {
    where: TurmaDisciplinasWhereUniqueInput
    update: XOR<TurmaDisciplinasUpdateWithoutSemestreInput, TurmaDisciplinasUncheckedUpdateWithoutSemestreInput>
    create: XOR<TurmaDisciplinasCreateWithoutSemestreInput, TurmaDisciplinasUncheckedCreateWithoutSemestreInput>
  }

  export type TurmaDisciplinasUpdateWithWhereUniqueWithoutSemestreInput = {
    where: TurmaDisciplinasWhereUniqueInput
    data: XOR<TurmaDisciplinasUpdateWithoutSemestreInput, TurmaDisciplinasUncheckedUpdateWithoutSemestreInput>
  }

  export type TurmaDisciplinasUpdateManyWithWhereWithoutSemestreInput = {
    where: TurmaDisciplinasScalarWhereInput
    data: XOR<TurmaDisciplinasUpdateManyMutationInput, TurmaDisciplinasUncheckedUpdateManyWithoutSemestreInput>
  }

  export type TurmaDisciplinasScalarWhereInput = {
    AND?: TurmaDisciplinasScalarWhereInput | TurmaDisciplinasScalarWhereInput[]
    OR?: TurmaDisciplinasScalarWhereInput[]
    NOT?: TurmaDisciplinasScalarWhereInput | TurmaDisciplinasScalarWhereInput[]
    id?: IntFilter<"TurmaDisciplinas"> | number
    id_disciplina?: IntFilter<"TurmaDisciplinas"> | number
    id_semestre?: IntFilter<"TurmaDisciplinas"> | number
    id_turma?: IntFilter<"TurmaDisciplinas"> | number
    semestre_curso?: IntFilter<"TurmaDisciplinas"> | number
  }

  export type ChamadaUpsertWithWhereUniqueWithoutSemestreInput = {
    where: ChamadaWhereUniqueInput
    update: XOR<ChamadaUpdateWithoutSemestreInput, ChamadaUncheckedUpdateWithoutSemestreInput>
    create: XOR<ChamadaCreateWithoutSemestreInput, ChamadaUncheckedCreateWithoutSemestreInput>
  }

  export type ChamadaUpdateWithWhereUniqueWithoutSemestreInput = {
    where: ChamadaWhereUniqueInput
    data: XOR<ChamadaUpdateWithoutSemestreInput, ChamadaUncheckedUpdateWithoutSemestreInput>
  }

  export type ChamadaUpdateManyWithWhereWithoutSemestreInput = {
    where: ChamadaScalarWhereInput
    data: XOR<ChamadaUpdateManyMutationInput, ChamadaUncheckedUpdateManyWithoutSemestreInput>
  }

  export type SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutSemestreInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    update: XOR<SemestreProfessorDisciplinasUpdateWithoutSemestreInput, SemestreProfessorDisciplinasUncheckedUpdateWithoutSemestreInput>
    create: XOR<SemestreProfessorDisciplinasCreateWithoutSemestreInput, SemestreProfessorDisciplinasUncheckedCreateWithoutSemestreInput>
  }

  export type SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutSemestreInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    data: XOR<SemestreProfessorDisciplinasUpdateWithoutSemestreInput, SemestreProfessorDisciplinasUncheckedUpdateWithoutSemestreInput>
  }

  export type SemestreProfessorDisciplinasUpdateManyWithWhereWithoutSemestreInput = {
    where: SemestreProfessorDisciplinasScalarWhereInput
    data: XOR<SemestreProfessorDisciplinasUpdateManyMutationInput, SemestreProfessorDisciplinasUncheckedUpdateManyWithoutSemestreInput>
  }

  export type DisciplinaCreateWithoutCursoInput = {
    descricao: string
    carga_horario: number
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutDisciplinaInput
    Chamada?: ChamadaCreateNestedManyWithoutDisciplinaInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaUncheckedCreateWithoutCursoInput = {
    id?: number
    descricao: string
    carga_horario: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput
    Chamada?: ChamadaUncheckedCreateNestedManyWithoutDisciplinaInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaCreateOrConnectWithoutCursoInput = {
    where: DisciplinaWhereUniqueInput
    create: XOR<DisciplinaCreateWithoutCursoInput, DisciplinaUncheckedCreateWithoutCursoInput>
  }

  export type DisciplinaCreateManyCursoInputEnvelope = {
    data: DisciplinaCreateManyCursoInput | DisciplinaCreateManyCursoInput[]
    skipDuplicates?: boolean
  }

  export type TurmaCreateWithoutCursoInput = {
    semestre_curso: number
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutTurmaInput
    TurmaAluno?: TurmaAlunosCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateWithoutCursoInput = {
    id?: number
    semestre_curso: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutTurmaInput
    TurmaAluno?: TurmaAlunosUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaCreateOrConnectWithoutCursoInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutCursoInput, TurmaUncheckedCreateWithoutCursoInput>
  }

  export type TurmaCreateManyCursoInputEnvelope = {
    data: TurmaCreateManyCursoInput | TurmaCreateManyCursoInput[]
    skipDuplicates?: boolean
  }

  export type DisciplinaUpsertWithWhereUniqueWithoutCursoInput = {
    where: DisciplinaWhereUniqueInput
    update: XOR<DisciplinaUpdateWithoutCursoInput, DisciplinaUncheckedUpdateWithoutCursoInput>
    create: XOR<DisciplinaCreateWithoutCursoInput, DisciplinaUncheckedCreateWithoutCursoInput>
  }

  export type DisciplinaUpdateWithWhereUniqueWithoutCursoInput = {
    where: DisciplinaWhereUniqueInput
    data: XOR<DisciplinaUpdateWithoutCursoInput, DisciplinaUncheckedUpdateWithoutCursoInput>
  }

  export type DisciplinaUpdateManyWithWhereWithoutCursoInput = {
    where: DisciplinaScalarWhereInput
    data: XOR<DisciplinaUpdateManyMutationInput, DisciplinaUncheckedUpdateManyWithoutCursoInput>
  }

  export type DisciplinaScalarWhereInput = {
    AND?: DisciplinaScalarWhereInput | DisciplinaScalarWhereInput[]
    OR?: DisciplinaScalarWhereInput[]
    NOT?: DisciplinaScalarWhereInput | DisciplinaScalarWhereInput[]
    id?: IntFilter<"Disciplina"> | number
    descricao?: StringFilter<"Disciplina"> | string
    id_curso?: IntFilter<"Disciplina"> | number
    carga_horario?: IntFilter<"Disciplina"> | number
  }

  export type TurmaUpsertWithWhereUniqueWithoutCursoInput = {
    where: TurmaWhereUniqueInput
    update: XOR<TurmaUpdateWithoutCursoInput, TurmaUncheckedUpdateWithoutCursoInput>
    create: XOR<TurmaCreateWithoutCursoInput, TurmaUncheckedCreateWithoutCursoInput>
  }

  export type TurmaUpdateWithWhereUniqueWithoutCursoInput = {
    where: TurmaWhereUniqueInput
    data: XOR<TurmaUpdateWithoutCursoInput, TurmaUncheckedUpdateWithoutCursoInput>
  }

  export type TurmaUpdateManyWithWhereWithoutCursoInput = {
    where: TurmaScalarWhereInput
    data: XOR<TurmaUpdateManyMutationInput, TurmaUncheckedUpdateManyWithoutCursoInput>
  }

  export type TurmaScalarWhereInput = {
    AND?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
    OR?: TurmaScalarWhereInput[]
    NOT?: TurmaScalarWhereInput | TurmaScalarWhereInput[]
    id?: IntFilter<"Turma"> | number
    semestre_curso?: IntFilter<"Turma"> | number
    id_curso?: IntFilter<"Turma"> | number
  }

  export type CursoCreateWithoutDisciplinaInput = {
    descricao: string
    Turma?: TurmaCreateNestedManyWithoutCursoInput
  }

  export type CursoUncheckedCreateWithoutDisciplinaInput = {
    id?: number
    descricao: string
    Turma?: TurmaUncheckedCreateNestedManyWithoutCursoInput
  }

  export type CursoCreateOrConnectWithoutDisciplinaInput = {
    where: CursoWhereUniqueInput
    create: XOR<CursoCreateWithoutDisciplinaInput, CursoUncheckedCreateWithoutDisciplinaInput>
  }

  export type TurmaDisciplinasCreateWithoutDisciplinaInput = {
    semestre_curso: number
    Semestre: SemestreCreateNestedOneWithoutTurmaDisciplinasInput
    Turma: TurmaCreateNestedOneWithoutTurmaDisciplinasInput
  }

  export type TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput = {
    id?: number
    id_semestre: number
    id_turma: number
    semestre_curso: number
  }

  export type TurmaDisciplinasCreateOrConnectWithoutDisciplinaInput = {
    where: TurmaDisciplinasWhereUniqueInput
    create: XOR<TurmaDisciplinasCreateWithoutDisciplinaInput, TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput>
  }

  export type TurmaDisciplinasCreateManyDisciplinaInputEnvelope = {
    data: TurmaDisciplinasCreateManyDisciplinaInput | TurmaDisciplinasCreateManyDisciplinaInput[]
    skipDuplicates?: boolean
  }

  export type ChamadaCreateWithoutDisciplinaInput = {
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    Professor: UsuarioCreateNestedOneWithoutChamadaProfessorInput
    Semestre: SemestreCreateNestedOneWithoutChamadaInput
    ChamadaAluno?: ChamadaAlunosCreateNestedManyWithoutChamadaInput
  }

  export type ChamadaUncheckedCreateWithoutDisciplinaInput = {
    id?: number
    id_professor: number
    id_semestre: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    ChamadaAluno?: ChamadaAlunosUncheckedCreateNestedManyWithoutChamadaInput
  }

  export type ChamadaCreateOrConnectWithoutDisciplinaInput = {
    where: ChamadaWhereUniqueInput
    create: XOR<ChamadaCreateWithoutDisciplinaInput, ChamadaUncheckedCreateWithoutDisciplinaInput>
  }

  export type ChamadaCreateManyDisciplinaInputEnvelope = {
    data: ChamadaCreateManyDisciplinaInput | ChamadaCreateManyDisciplinaInput[]
    skipDuplicates?: boolean
  }

  export type SemestreProfessorDisciplinasCreateWithoutDisciplinaInput = {
    Professor: UsuarioCreateNestedOneWithoutSemestreDisciplinaProfessorInput
    Semestre: SemestreCreateNestedOneWithoutSemestreDisciplinaProfessorInput
  }

  export type SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput = {
    id?: number
    id_professor: number
    id_semestre: number
  }

  export type SemestreProfessorDisciplinasCreateOrConnectWithoutDisciplinaInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    create: XOR<SemestreProfessorDisciplinasCreateWithoutDisciplinaInput, SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput>
  }

  export type SemestreProfessorDisciplinasCreateManyDisciplinaInputEnvelope = {
    data: SemestreProfessorDisciplinasCreateManyDisciplinaInput | SemestreProfessorDisciplinasCreateManyDisciplinaInput[]
    skipDuplicates?: boolean
  }

  export type CursoUpsertWithoutDisciplinaInput = {
    update: XOR<CursoUpdateWithoutDisciplinaInput, CursoUncheckedUpdateWithoutDisciplinaInput>
    create: XOR<CursoCreateWithoutDisciplinaInput, CursoUncheckedCreateWithoutDisciplinaInput>
    where?: CursoWhereInput
  }

  export type CursoUpdateToOneWithWhereWithoutDisciplinaInput = {
    where?: CursoWhereInput
    data: XOR<CursoUpdateWithoutDisciplinaInput, CursoUncheckedUpdateWithoutDisciplinaInput>
  }

  export type CursoUpdateWithoutDisciplinaInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    Turma?: TurmaUpdateManyWithoutCursoNestedInput
  }

  export type CursoUncheckedUpdateWithoutDisciplinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    Turma?: TurmaUncheckedUpdateManyWithoutCursoNestedInput
  }

  export type TurmaDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput = {
    where: TurmaDisciplinasWhereUniqueInput
    update: XOR<TurmaDisciplinasUpdateWithoutDisciplinaInput, TurmaDisciplinasUncheckedUpdateWithoutDisciplinaInput>
    create: XOR<TurmaDisciplinasCreateWithoutDisciplinaInput, TurmaDisciplinasUncheckedCreateWithoutDisciplinaInput>
  }

  export type TurmaDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput = {
    where: TurmaDisciplinasWhereUniqueInput
    data: XOR<TurmaDisciplinasUpdateWithoutDisciplinaInput, TurmaDisciplinasUncheckedUpdateWithoutDisciplinaInput>
  }

  export type TurmaDisciplinasUpdateManyWithWhereWithoutDisciplinaInput = {
    where: TurmaDisciplinasScalarWhereInput
    data: XOR<TurmaDisciplinasUpdateManyMutationInput, TurmaDisciplinasUncheckedUpdateManyWithoutDisciplinaInput>
  }

  export type ChamadaUpsertWithWhereUniqueWithoutDisciplinaInput = {
    where: ChamadaWhereUniqueInput
    update: XOR<ChamadaUpdateWithoutDisciplinaInput, ChamadaUncheckedUpdateWithoutDisciplinaInput>
    create: XOR<ChamadaCreateWithoutDisciplinaInput, ChamadaUncheckedCreateWithoutDisciplinaInput>
  }

  export type ChamadaUpdateWithWhereUniqueWithoutDisciplinaInput = {
    where: ChamadaWhereUniqueInput
    data: XOR<ChamadaUpdateWithoutDisciplinaInput, ChamadaUncheckedUpdateWithoutDisciplinaInput>
  }

  export type ChamadaUpdateManyWithWhereWithoutDisciplinaInput = {
    where: ChamadaScalarWhereInput
    data: XOR<ChamadaUpdateManyMutationInput, ChamadaUncheckedUpdateManyWithoutDisciplinaInput>
  }

  export type SemestreProfessorDisciplinasUpsertWithWhereUniqueWithoutDisciplinaInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    update: XOR<SemestreProfessorDisciplinasUpdateWithoutDisciplinaInput, SemestreProfessorDisciplinasUncheckedUpdateWithoutDisciplinaInput>
    create: XOR<SemestreProfessorDisciplinasCreateWithoutDisciplinaInput, SemestreProfessorDisciplinasUncheckedCreateWithoutDisciplinaInput>
  }

  export type SemestreProfessorDisciplinasUpdateWithWhereUniqueWithoutDisciplinaInput = {
    where: SemestreProfessorDisciplinasWhereUniqueInput
    data: XOR<SemestreProfessorDisciplinasUpdateWithoutDisciplinaInput, SemestreProfessorDisciplinasUncheckedUpdateWithoutDisciplinaInput>
  }

  export type SemestreProfessorDisciplinasUpdateManyWithWhereWithoutDisciplinaInput = {
    where: SemestreProfessorDisciplinasScalarWhereInput
    data: XOR<SemestreProfessorDisciplinasUpdateManyMutationInput, SemestreProfessorDisciplinasUncheckedUpdateManyWithoutDisciplinaInput>
  }

  export type CursoCreateWithoutTurmaInput = {
    descricao: string
    Disciplina?: DisciplinaCreateNestedManyWithoutCursoInput
  }

  export type CursoUncheckedCreateWithoutTurmaInput = {
    id?: number
    descricao: string
    Disciplina?: DisciplinaUncheckedCreateNestedManyWithoutCursoInput
  }

  export type CursoCreateOrConnectWithoutTurmaInput = {
    where: CursoWhereUniqueInput
    create: XOR<CursoCreateWithoutTurmaInput, CursoUncheckedCreateWithoutTurmaInput>
  }

  export type TurmaDisciplinasCreateWithoutTurmaInput = {
    semestre_curso: number
    Disciplina: DisciplinaCreateNestedOneWithoutTurmaDisciplinasInput
    Semestre: SemestreCreateNestedOneWithoutTurmaDisciplinasInput
  }

  export type TurmaDisciplinasUncheckedCreateWithoutTurmaInput = {
    id?: number
    id_disciplina: number
    id_semestre: number
    semestre_curso: number
  }

  export type TurmaDisciplinasCreateOrConnectWithoutTurmaInput = {
    where: TurmaDisciplinasWhereUniqueInput
    create: XOR<TurmaDisciplinasCreateWithoutTurmaInput, TurmaDisciplinasUncheckedCreateWithoutTurmaInput>
  }

  export type TurmaDisciplinasCreateManyTurmaInputEnvelope = {
    data: TurmaDisciplinasCreateManyTurmaInput | TurmaDisciplinasCreateManyTurmaInput[]
    skipDuplicates?: boolean
  }

  export type TurmaAlunosCreateWithoutTurmaInput = {
    Usuario: UsuarioCreateNestedOneWithoutTurmaAlunoInput
  }

  export type TurmaAlunosUncheckedCreateWithoutTurmaInput = {
    id?: number
    id_aluno: number
  }

  export type TurmaAlunosCreateOrConnectWithoutTurmaInput = {
    where: TurmaAlunosWhereUniqueInput
    create: XOR<TurmaAlunosCreateWithoutTurmaInput, TurmaAlunosUncheckedCreateWithoutTurmaInput>
  }

  export type TurmaAlunosCreateManyTurmaInputEnvelope = {
    data: TurmaAlunosCreateManyTurmaInput | TurmaAlunosCreateManyTurmaInput[]
    skipDuplicates?: boolean
  }

  export type CursoUpsertWithoutTurmaInput = {
    update: XOR<CursoUpdateWithoutTurmaInput, CursoUncheckedUpdateWithoutTurmaInput>
    create: XOR<CursoCreateWithoutTurmaInput, CursoUncheckedCreateWithoutTurmaInput>
    where?: CursoWhereInput
  }

  export type CursoUpdateToOneWithWhereWithoutTurmaInput = {
    where?: CursoWhereInput
    data: XOR<CursoUpdateWithoutTurmaInput, CursoUncheckedUpdateWithoutTurmaInput>
  }

  export type CursoUpdateWithoutTurmaInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    Disciplina?: DisciplinaUpdateManyWithoutCursoNestedInput
  }

  export type CursoUncheckedUpdateWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    Disciplina?: DisciplinaUncheckedUpdateManyWithoutCursoNestedInput
  }

  export type TurmaDisciplinasUpsertWithWhereUniqueWithoutTurmaInput = {
    where: TurmaDisciplinasWhereUniqueInput
    update: XOR<TurmaDisciplinasUpdateWithoutTurmaInput, TurmaDisciplinasUncheckedUpdateWithoutTurmaInput>
    create: XOR<TurmaDisciplinasCreateWithoutTurmaInput, TurmaDisciplinasUncheckedCreateWithoutTurmaInput>
  }

  export type TurmaDisciplinasUpdateWithWhereUniqueWithoutTurmaInput = {
    where: TurmaDisciplinasWhereUniqueInput
    data: XOR<TurmaDisciplinasUpdateWithoutTurmaInput, TurmaDisciplinasUncheckedUpdateWithoutTurmaInput>
  }

  export type TurmaDisciplinasUpdateManyWithWhereWithoutTurmaInput = {
    where: TurmaDisciplinasScalarWhereInput
    data: XOR<TurmaDisciplinasUpdateManyMutationInput, TurmaDisciplinasUncheckedUpdateManyWithoutTurmaInput>
  }

  export type TurmaAlunosUpsertWithWhereUniqueWithoutTurmaInput = {
    where: TurmaAlunosWhereUniqueInput
    update: XOR<TurmaAlunosUpdateWithoutTurmaInput, TurmaAlunosUncheckedUpdateWithoutTurmaInput>
    create: XOR<TurmaAlunosCreateWithoutTurmaInput, TurmaAlunosUncheckedCreateWithoutTurmaInput>
  }

  export type TurmaAlunosUpdateWithWhereUniqueWithoutTurmaInput = {
    where: TurmaAlunosWhereUniqueInput
    data: XOR<TurmaAlunosUpdateWithoutTurmaInput, TurmaAlunosUncheckedUpdateWithoutTurmaInput>
  }

  export type TurmaAlunosUpdateManyWithWhereWithoutTurmaInput = {
    where: TurmaAlunosScalarWhereInput
    data: XOR<TurmaAlunosUpdateManyMutationInput, TurmaAlunosUncheckedUpdateManyWithoutTurmaInput>
  }

  export type DisciplinaCreateWithoutTurmaDisciplinasInput = {
    descricao: string
    carga_horario: number
    Curso: CursoCreateNestedOneWithoutDisciplinaInput
    Chamada?: ChamadaCreateNestedManyWithoutDisciplinaInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaUncheckedCreateWithoutTurmaDisciplinasInput = {
    id?: number
    descricao: string
    id_curso: number
    carga_horario: number
    Chamada?: ChamadaUncheckedCreateNestedManyWithoutDisciplinaInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaCreateOrConnectWithoutTurmaDisciplinasInput = {
    where: DisciplinaWhereUniqueInput
    create: XOR<DisciplinaCreateWithoutTurmaDisciplinasInput, DisciplinaUncheckedCreateWithoutTurmaDisciplinasInput>
  }

  export type SemestreCreateWithoutTurmaDisciplinasInput = {
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
    Chamada?: ChamadaCreateNestedManyWithoutSemestreInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutSemestreInput
  }

  export type SemestreUncheckedCreateWithoutTurmaDisciplinasInput = {
    id?: number
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
    Chamada?: ChamadaUncheckedCreateNestedManyWithoutSemestreInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutSemestreInput
  }

  export type SemestreCreateOrConnectWithoutTurmaDisciplinasInput = {
    where: SemestreWhereUniqueInput
    create: XOR<SemestreCreateWithoutTurmaDisciplinasInput, SemestreUncheckedCreateWithoutTurmaDisciplinasInput>
  }

  export type TurmaCreateWithoutTurmaDisciplinasInput = {
    semestre_curso: number
    Curso: CursoCreateNestedOneWithoutTurmaInput
    TurmaAluno?: TurmaAlunosCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateWithoutTurmaDisciplinasInput = {
    id?: number
    semestre_curso: number
    id_curso: number
    TurmaAluno?: TurmaAlunosUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaCreateOrConnectWithoutTurmaDisciplinasInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutTurmaDisciplinasInput, TurmaUncheckedCreateWithoutTurmaDisciplinasInput>
  }

  export type DisciplinaUpsertWithoutTurmaDisciplinasInput = {
    update: XOR<DisciplinaUpdateWithoutTurmaDisciplinasInput, DisciplinaUncheckedUpdateWithoutTurmaDisciplinasInput>
    create: XOR<DisciplinaCreateWithoutTurmaDisciplinasInput, DisciplinaUncheckedCreateWithoutTurmaDisciplinasInput>
    where?: DisciplinaWhereInput
  }

  export type DisciplinaUpdateToOneWithWhereWithoutTurmaDisciplinasInput = {
    where?: DisciplinaWhereInput
    data: XOR<DisciplinaUpdateWithoutTurmaDisciplinasInput, DisciplinaUncheckedUpdateWithoutTurmaDisciplinasInput>
  }

  export type DisciplinaUpdateWithoutTurmaDisciplinasInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    carga_horario?: IntFieldUpdateOperationsInput | number
    Curso?: CursoUpdateOneRequiredWithoutDisciplinaNestedInput
    Chamada?: ChamadaUpdateManyWithoutDisciplinaNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateWithoutTurmaDisciplinasInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    id_curso?: IntFieldUpdateOperationsInput | number
    carga_horario?: IntFieldUpdateOperationsInput | number
    Chamada?: ChamadaUncheckedUpdateManyWithoutDisciplinaNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput
  }

  export type SemestreUpsertWithoutTurmaDisciplinasInput = {
    update: XOR<SemestreUpdateWithoutTurmaDisciplinasInput, SemestreUncheckedUpdateWithoutTurmaDisciplinasInput>
    create: XOR<SemestreCreateWithoutTurmaDisciplinasInput, SemestreUncheckedCreateWithoutTurmaDisciplinasInput>
    where?: SemestreWhereInput
  }

  export type SemestreUpdateToOneWithWhereWithoutTurmaDisciplinasInput = {
    where?: SemestreWhereInput
    data: XOR<SemestreUpdateWithoutTurmaDisciplinasInput, SemestreUncheckedUpdateWithoutTurmaDisciplinasInput>
  }

  export type SemestreUpdateWithoutTurmaDisciplinasInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
    Chamada?: ChamadaUpdateManyWithoutSemestreNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutSemestreNestedInput
  }

  export type SemestreUncheckedUpdateWithoutTurmaDisciplinasInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
    Chamada?: ChamadaUncheckedUpdateManyWithoutSemestreNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutSemestreNestedInput
  }

  export type TurmaUpsertWithoutTurmaDisciplinasInput = {
    update: XOR<TurmaUpdateWithoutTurmaDisciplinasInput, TurmaUncheckedUpdateWithoutTurmaDisciplinasInput>
    create: XOR<TurmaCreateWithoutTurmaDisciplinasInput, TurmaUncheckedCreateWithoutTurmaDisciplinasInput>
    where?: TurmaWhereInput
  }

  export type TurmaUpdateToOneWithWhereWithoutTurmaDisciplinasInput = {
    where?: TurmaWhereInput
    data: XOR<TurmaUpdateWithoutTurmaDisciplinasInput, TurmaUncheckedUpdateWithoutTurmaDisciplinasInput>
  }

  export type TurmaUpdateWithoutTurmaDisciplinasInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
    Curso?: CursoUpdateOneRequiredWithoutTurmaNestedInput
    TurmaAluno?: TurmaAlunosUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateWithoutTurmaDisciplinasInput = {
    id?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
    id_curso?: IntFieldUpdateOperationsInput | number
    TurmaAluno?: TurmaAlunosUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type UsuarioCreateWithoutTurmaAlunoInput = {
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    ChamadaProfessor?: ChamadaCreateNestedManyWithoutProfessorInput
    ChamadaAluno?: ChamadaAlunosCreateNestedManyWithoutUsuarioInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutProfessorInput
  }

  export type UsuarioUncheckedCreateWithoutTurmaAlunoInput = {
    id?: number
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    ChamadaProfessor?: ChamadaUncheckedCreateNestedManyWithoutProfessorInput
    ChamadaAluno?: ChamadaAlunosUncheckedCreateNestedManyWithoutUsuarioInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type UsuarioCreateOrConnectWithoutTurmaAlunoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTurmaAlunoInput, UsuarioUncheckedCreateWithoutTurmaAlunoInput>
  }

  export type TurmaCreateWithoutTurmaAlunoInput = {
    semestre_curso: number
    Curso: CursoCreateNestedOneWithoutTurmaInput
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutTurmaInput
  }

  export type TurmaUncheckedCreateWithoutTurmaAlunoInput = {
    id?: number
    semestre_curso: number
    id_curso: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type TurmaCreateOrConnectWithoutTurmaAlunoInput = {
    where: TurmaWhereUniqueInput
    create: XOR<TurmaCreateWithoutTurmaAlunoInput, TurmaUncheckedCreateWithoutTurmaAlunoInput>
  }

  export type UsuarioUpsertWithoutTurmaAlunoInput = {
    update: XOR<UsuarioUpdateWithoutTurmaAlunoInput, UsuarioUncheckedUpdateWithoutTurmaAlunoInput>
    create: XOR<UsuarioCreateWithoutTurmaAlunoInput, UsuarioUncheckedCreateWithoutTurmaAlunoInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTurmaAlunoInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTurmaAlunoInput, UsuarioUncheckedUpdateWithoutTurmaAlunoInput>
  }

  export type UsuarioUpdateWithoutTurmaAlunoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    ChamadaProfessor?: ChamadaUpdateManyWithoutProfessorNestedInput
    ChamadaAluno?: ChamadaAlunosUpdateManyWithoutUsuarioNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutProfessorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTurmaAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    ChamadaProfessor?: ChamadaUncheckedUpdateManyWithoutProfessorNestedInput
    ChamadaAluno?: ChamadaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type TurmaUpsertWithoutTurmaAlunoInput = {
    update: XOR<TurmaUpdateWithoutTurmaAlunoInput, TurmaUncheckedUpdateWithoutTurmaAlunoInput>
    create: XOR<TurmaCreateWithoutTurmaAlunoInput, TurmaUncheckedCreateWithoutTurmaAlunoInput>
    where?: TurmaWhereInput
  }

  export type TurmaUpdateToOneWithWhereWithoutTurmaAlunoInput = {
    where?: TurmaWhereInput
    data: XOR<TurmaUpdateWithoutTurmaAlunoInput, TurmaUncheckedUpdateWithoutTurmaAlunoInput>
  }

  export type TurmaUpdateWithoutTurmaAlunoInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
    Curso?: CursoUpdateOneRequiredWithoutTurmaNestedInput
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateWithoutTurmaAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
    id_curso?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type UsuarioCreateWithoutChamadaProfessorInput = {
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    TurmaAluno?: TurmaAlunosCreateNestedManyWithoutUsuarioInput
    ChamadaAluno?: ChamadaAlunosCreateNestedManyWithoutUsuarioInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutProfessorInput
  }

  export type UsuarioUncheckedCreateWithoutChamadaProfessorInput = {
    id?: number
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    TurmaAluno?: TurmaAlunosUncheckedCreateNestedManyWithoutUsuarioInput
    ChamadaAluno?: ChamadaAlunosUncheckedCreateNestedManyWithoutUsuarioInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type UsuarioCreateOrConnectWithoutChamadaProfessorInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutChamadaProfessorInput, UsuarioUncheckedCreateWithoutChamadaProfessorInput>
  }

  export type DisciplinaCreateWithoutChamadaInput = {
    descricao: string
    carga_horario: number
    Curso: CursoCreateNestedOneWithoutDisciplinaInput
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutDisciplinaInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaUncheckedCreateWithoutChamadaInput = {
    id?: number
    descricao: string
    id_curso: number
    carga_horario: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaCreateOrConnectWithoutChamadaInput = {
    where: DisciplinaWhereUniqueInput
    create: XOR<DisciplinaCreateWithoutChamadaInput, DisciplinaUncheckedCreateWithoutChamadaInput>
  }

  export type SemestreCreateWithoutChamadaInput = {
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutSemestreInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutSemestreInput
  }

  export type SemestreUncheckedCreateWithoutChamadaInput = {
    id?: number
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutSemestreInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutSemestreInput
  }

  export type SemestreCreateOrConnectWithoutChamadaInput = {
    where: SemestreWhereUniqueInput
    create: XOR<SemestreCreateWithoutChamadaInput, SemestreUncheckedCreateWithoutChamadaInput>
  }

  export type ChamadaAlunosCreateWithoutChamadaInput = {
    Usuario: UsuarioCreateNestedOneWithoutChamadaAlunoInput
  }

  export type ChamadaAlunosUncheckedCreateWithoutChamadaInput = {
    id?: number
    id_aluno: number
  }

  export type ChamadaAlunosCreateOrConnectWithoutChamadaInput = {
    where: ChamadaAlunosWhereUniqueInput
    create: XOR<ChamadaAlunosCreateWithoutChamadaInput, ChamadaAlunosUncheckedCreateWithoutChamadaInput>
  }

  export type ChamadaAlunosCreateManyChamadaInputEnvelope = {
    data: ChamadaAlunosCreateManyChamadaInput | ChamadaAlunosCreateManyChamadaInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutChamadaProfessorInput = {
    update: XOR<UsuarioUpdateWithoutChamadaProfessorInput, UsuarioUncheckedUpdateWithoutChamadaProfessorInput>
    create: XOR<UsuarioCreateWithoutChamadaProfessorInput, UsuarioUncheckedCreateWithoutChamadaProfessorInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutChamadaProfessorInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutChamadaProfessorInput, UsuarioUncheckedUpdateWithoutChamadaProfessorInput>
  }

  export type UsuarioUpdateWithoutChamadaProfessorInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    TurmaAluno?: TurmaAlunosUpdateManyWithoutUsuarioNestedInput
    ChamadaAluno?: ChamadaAlunosUpdateManyWithoutUsuarioNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutProfessorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutChamadaProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    TurmaAluno?: TurmaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput
    ChamadaAluno?: ChamadaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type DisciplinaUpsertWithoutChamadaInput = {
    update: XOR<DisciplinaUpdateWithoutChamadaInput, DisciplinaUncheckedUpdateWithoutChamadaInput>
    create: XOR<DisciplinaCreateWithoutChamadaInput, DisciplinaUncheckedCreateWithoutChamadaInput>
    where?: DisciplinaWhereInput
  }

  export type DisciplinaUpdateToOneWithWhereWithoutChamadaInput = {
    where?: DisciplinaWhereInput
    data: XOR<DisciplinaUpdateWithoutChamadaInput, DisciplinaUncheckedUpdateWithoutChamadaInput>
  }

  export type DisciplinaUpdateWithoutChamadaInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    carga_horario?: IntFieldUpdateOperationsInput | number
    Curso?: CursoUpdateOneRequiredWithoutDisciplinaNestedInput
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutDisciplinaNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateWithoutChamadaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    id_curso?: IntFieldUpdateOperationsInput | number
    carga_horario?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput
  }

  export type SemestreUpsertWithoutChamadaInput = {
    update: XOR<SemestreUpdateWithoutChamadaInput, SemestreUncheckedUpdateWithoutChamadaInput>
    create: XOR<SemestreCreateWithoutChamadaInput, SemestreUncheckedCreateWithoutChamadaInput>
    where?: SemestreWhereInput
  }

  export type SemestreUpdateToOneWithWhereWithoutChamadaInput = {
    where?: SemestreWhereInput
    data: XOR<SemestreUpdateWithoutChamadaInput, SemestreUncheckedUpdateWithoutChamadaInput>
  }

  export type SemestreUpdateWithoutChamadaInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutSemestreNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutSemestreNestedInput
  }

  export type SemestreUncheckedUpdateWithoutChamadaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutSemestreNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutSemestreNestedInput
  }

  export type ChamadaAlunosUpsertWithWhereUniqueWithoutChamadaInput = {
    where: ChamadaAlunosWhereUniqueInput
    update: XOR<ChamadaAlunosUpdateWithoutChamadaInput, ChamadaAlunosUncheckedUpdateWithoutChamadaInput>
    create: XOR<ChamadaAlunosCreateWithoutChamadaInput, ChamadaAlunosUncheckedCreateWithoutChamadaInput>
  }

  export type ChamadaAlunosUpdateWithWhereUniqueWithoutChamadaInput = {
    where: ChamadaAlunosWhereUniqueInput
    data: XOR<ChamadaAlunosUpdateWithoutChamadaInput, ChamadaAlunosUncheckedUpdateWithoutChamadaInput>
  }

  export type ChamadaAlunosUpdateManyWithWhereWithoutChamadaInput = {
    where: ChamadaAlunosScalarWhereInput
    data: XOR<ChamadaAlunosUpdateManyMutationInput, ChamadaAlunosUncheckedUpdateManyWithoutChamadaInput>
  }

  export type ChamadaCreateWithoutChamadaAlunoInput = {
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
    Professor: UsuarioCreateNestedOneWithoutChamadaProfessorInput
    Disciplina: DisciplinaCreateNestedOneWithoutChamadaInput
    Semestre: SemestreCreateNestedOneWithoutChamadaInput
  }

  export type ChamadaUncheckedCreateWithoutChamadaAlunoInput = {
    id?: number
    id_professor: number
    id_disciplina: number
    id_semestre: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
  }

  export type ChamadaCreateOrConnectWithoutChamadaAlunoInput = {
    where: ChamadaWhereUniqueInput
    create: XOR<ChamadaCreateWithoutChamadaAlunoInput, ChamadaUncheckedCreateWithoutChamadaAlunoInput>
  }

  export type UsuarioCreateWithoutChamadaAlunoInput = {
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    TurmaAluno?: TurmaAlunosCreateNestedManyWithoutUsuarioInput
    ChamadaProfessor?: ChamadaCreateNestedManyWithoutProfessorInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasCreateNestedManyWithoutProfessorInput
  }

  export type UsuarioUncheckedCreateWithoutChamadaAlunoInput = {
    id?: number
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    TurmaAluno?: TurmaAlunosUncheckedCreateNestedManyWithoutUsuarioInput
    ChamadaProfessor?: ChamadaUncheckedCreateNestedManyWithoutProfessorInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedCreateNestedManyWithoutProfessorInput
  }

  export type UsuarioCreateOrConnectWithoutChamadaAlunoInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutChamadaAlunoInput, UsuarioUncheckedCreateWithoutChamadaAlunoInput>
  }

  export type ChamadaUpsertWithoutChamadaAlunoInput = {
    update: XOR<ChamadaUpdateWithoutChamadaAlunoInput, ChamadaUncheckedUpdateWithoutChamadaAlunoInput>
    create: XOR<ChamadaCreateWithoutChamadaAlunoInput, ChamadaUncheckedCreateWithoutChamadaAlunoInput>
    where?: ChamadaWhereInput
  }

  export type ChamadaUpdateToOneWithWhereWithoutChamadaAlunoInput = {
    where?: ChamadaWhereInput
    data: XOR<ChamadaUpdateWithoutChamadaAlunoInput, ChamadaUncheckedUpdateWithoutChamadaAlunoInput>
  }

  export type ChamadaUpdateWithoutChamadaAlunoInput = {
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Professor?: UsuarioUpdateOneRequiredWithoutChamadaProfessorNestedInput
    Disciplina?: DisciplinaUpdateOneRequiredWithoutChamadaNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutChamadaNestedInput
  }

  export type ChamadaUncheckedUpdateWithoutChamadaAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUpsertWithoutChamadaAlunoInput = {
    update: XOR<UsuarioUpdateWithoutChamadaAlunoInput, UsuarioUncheckedUpdateWithoutChamadaAlunoInput>
    create: XOR<UsuarioCreateWithoutChamadaAlunoInput, UsuarioUncheckedCreateWithoutChamadaAlunoInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutChamadaAlunoInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutChamadaAlunoInput, UsuarioUncheckedUpdateWithoutChamadaAlunoInput>
  }

  export type UsuarioUpdateWithoutChamadaAlunoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    TurmaAluno?: TurmaAlunosUpdateManyWithoutUsuarioNestedInput
    ChamadaProfessor?: ChamadaUpdateManyWithoutProfessorNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutProfessorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutChamadaAlunoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    TurmaAluno?: TurmaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput
    ChamadaProfessor?: ChamadaUncheckedUpdateManyWithoutProfessorNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutProfessorNestedInput
  }

  export type DisciplinaCreateWithoutSemestreDisciplinaProfessorInput = {
    descricao: string
    carga_horario: number
    Curso: CursoCreateNestedOneWithoutDisciplinaInput
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutDisciplinaInput
    Chamada?: ChamadaCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaUncheckedCreateWithoutSemestreDisciplinaProfessorInput = {
    id?: number
    descricao: string
    id_curso: number
    carga_horario: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutDisciplinaInput
    Chamada?: ChamadaUncheckedCreateNestedManyWithoutDisciplinaInput
  }

  export type DisciplinaCreateOrConnectWithoutSemestreDisciplinaProfessorInput = {
    where: DisciplinaWhereUniqueInput
    create: XOR<DisciplinaCreateWithoutSemestreDisciplinaProfessorInput, DisciplinaUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
  }

  export type UsuarioCreateWithoutSemestreDisciplinaProfessorInput = {
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    TurmaAluno?: TurmaAlunosCreateNestedManyWithoutUsuarioInput
    ChamadaProfessor?: ChamadaCreateNestedManyWithoutProfessorInput
    ChamadaAluno?: ChamadaAlunosCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutSemestreDisciplinaProfessorInput = {
    id?: number
    nome: string
    ra?: string | null
    cpf: string
    senha: string
    email: string
    imei?: string | null
    tipo?: number
    status?: number
    data_cadastro?: Date | string
    TurmaAluno?: TurmaAlunosUncheckedCreateNestedManyWithoutUsuarioInput
    ChamadaProfessor?: ChamadaUncheckedCreateNestedManyWithoutProfessorInput
    ChamadaAluno?: ChamadaAlunosUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutSemestreDisciplinaProfessorInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutSemestreDisciplinaProfessorInput, UsuarioUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
  }

  export type SemestreCreateWithoutSemestreDisciplinaProfessorInput = {
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
    TurmaDisciplinas?: TurmaDisciplinasCreateNestedManyWithoutSemestreInput
    Chamada?: ChamadaCreateNestedManyWithoutSemestreInput
  }

  export type SemestreUncheckedCreateWithoutSemestreDisciplinaProfessorInput = {
    id?: number
    descricao: string
    data_inicio?: Date | string | null
    data_final?: Date | string | null
    padrao: number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedCreateNestedManyWithoutSemestreInput
    Chamada?: ChamadaUncheckedCreateNestedManyWithoutSemestreInput
  }

  export type SemestreCreateOrConnectWithoutSemestreDisciplinaProfessorInput = {
    where: SemestreWhereUniqueInput
    create: XOR<SemestreCreateWithoutSemestreDisciplinaProfessorInput, SemestreUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
  }

  export type DisciplinaUpsertWithoutSemestreDisciplinaProfessorInput = {
    update: XOR<DisciplinaUpdateWithoutSemestreDisciplinaProfessorInput, DisciplinaUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
    create: XOR<DisciplinaCreateWithoutSemestreDisciplinaProfessorInput, DisciplinaUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    where?: DisciplinaWhereInput
  }

  export type DisciplinaUpdateToOneWithWhereWithoutSemestreDisciplinaProfessorInput = {
    where?: DisciplinaWhereInput
    data: XOR<DisciplinaUpdateWithoutSemestreDisciplinaProfessorInput, DisciplinaUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
  }

  export type DisciplinaUpdateWithoutSemestreDisciplinaProfessorInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    carga_horario?: IntFieldUpdateOperationsInput | number
    Curso?: CursoUpdateOneRequiredWithoutDisciplinaNestedInput
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutDisciplinaNestedInput
    Chamada?: ChamadaUpdateManyWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateWithoutSemestreDisciplinaProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    id_curso?: IntFieldUpdateOperationsInput | number
    carga_horario?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput
    Chamada?: ChamadaUncheckedUpdateManyWithoutDisciplinaNestedInput
  }

  export type UsuarioUpsertWithoutSemestreDisciplinaProfessorInput = {
    update: XOR<UsuarioUpdateWithoutSemestreDisciplinaProfessorInput, UsuarioUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
    create: XOR<UsuarioCreateWithoutSemestreDisciplinaProfessorInput, UsuarioUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutSemestreDisciplinaProfessorInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutSemestreDisciplinaProfessorInput, UsuarioUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
  }

  export type UsuarioUpdateWithoutSemestreDisciplinaProfessorInput = {
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    TurmaAluno?: TurmaAlunosUpdateManyWithoutUsuarioNestedInput
    ChamadaProfessor?: ChamadaUpdateManyWithoutProfessorNestedInput
    ChamadaAluno?: ChamadaAlunosUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutSemestreDisciplinaProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    ra?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    imei?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    data_cadastro?: DateTimeFieldUpdateOperationsInput | Date | string
    TurmaAluno?: TurmaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput
    ChamadaProfessor?: ChamadaUncheckedUpdateManyWithoutProfessorNestedInput
    ChamadaAluno?: ChamadaAlunosUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type SemestreUpsertWithoutSemestreDisciplinaProfessorInput = {
    update: XOR<SemestreUpdateWithoutSemestreDisciplinaProfessorInput, SemestreUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
    create: XOR<SemestreCreateWithoutSemestreDisciplinaProfessorInput, SemestreUncheckedCreateWithoutSemestreDisciplinaProfessorInput>
    where?: SemestreWhereInput
  }

  export type SemestreUpdateToOneWithWhereWithoutSemestreDisciplinaProfessorInput = {
    where?: SemestreWhereInput
    data: XOR<SemestreUpdateWithoutSemestreDisciplinaProfessorInput, SemestreUncheckedUpdateWithoutSemestreDisciplinaProfessorInput>
  }

  export type SemestreUpdateWithoutSemestreDisciplinaProfessorInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutSemestreNestedInput
    Chamada?: ChamadaUpdateManyWithoutSemestreNestedInput
  }

  export type SemestreUncheckedUpdateWithoutSemestreDisciplinaProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    padrao?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutSemestreNestedInput
    Chamada?: ChamadaUncheckedUpdateManyWithoutSemestreNestedInput
  }

  export type TurmaAlunosCreateManyUsuarioInput = {
    id?: number
    id_turma: number
  }

  export type ChamadaCreateManyProfessorInput = {
    id?: number
    id_disciplina: number
    id_semestre: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
  }

  export type ChamadaAlunosCreateManyUsuarioInput = {
    id?: number
    id_chamada: number
  }

  export type SemestreProfessorDisciplinasCreateManyProfessorInput = {
    id?: number
    id_disciplina: number
    id_semestre: number
  }

  export type TurmaAlunosUpdateWithoutUsuarioInput = {
    Turma?: TurmaUpdateOneRequiredWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunosUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaAlunosUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
  }

  export type ChamadaUpdateWithoutProfessorInput = {
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Disciplina?: DisciplinaUpdateOneRequiredWithoutChamadaNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutChamadaNestedInput
    ChamadaAluno?: ChamadaAlunosUpdateManyWithoutChamadaNestedInput
  }

  export type ChamadaUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ChamadaAluno?: ChamadaAlunosUncheckedUpdateManyWithoutChamadaNestedInput
  }

  export type ChamadaUncheckedUpdateManyWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChamadaAlunosUpdateWithoutUsuarioInput = {
    Chamada?: ChamadaUpdateOneRequiredWithoutChamadaAlunoNestedInput
  }

  export type ChamadaAlunosUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_chamada?: IntFieldUpdateOperationsInput | number
  }

  export type ChamadaAlunosUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_chamada?: IntFieldUpdateOperationsInput | number
  }

  export type SemestreProfessorDisciplinasUpdateWithoutProfessorInput = {
    Disciplina?: DisciplinaUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateManyWithoutProfessorInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasCreateManySemestreInput = {
    id?: number
    id_disciplina: number
    id_turma: number
    semestre_curso: number
  }

  export type ChamadaCreateManySemestreInput = {
    id?: number
    id_professor: number
    id_disciplina: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
  }

  export type SemestreProfessorDisciplinasCreateManySemestreInput = {
    id?: number
    id_disciplina: number
    id_professor: number
  }

  export type TurmaDisciplinasUpdateWithoutSemestreInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
    Disciplina?: DisciplinaUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
    Turma?: TurmaUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
  }

  export type TurmaDisciplinasUncheckedUpdateWithoutSemestreInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasUncheckedUpdateManyWithoutSemestreInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type ChamadaUpdateWithoutSemestreInput = {
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Professor?: UsuarioUpdateOneRequiredWithoutChamadaProfessorNestedInput
    Disciplina?: DisciplinaUpdateOneRequiredWithoutChamadaNestedInput
    ChamadaAluno?: ChamadaAlunosUpdateManyWithoutChamadaNestedInput
  }

  export type ChamadaUncheckedUpdateWithoutSemestreInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ChamadaAluno?: ChamadaAlunosUncheckedUpdateManyWithoutChamadaNestedInput
  }

  export type ChamadaUncheckedUpdateManyWithoutSemestreInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SemestreProfessorDisciplinasUpdateWithoutSemestreInput = {
    Disciplina?: DisciplinaUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
    Professor?: UsuarioUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateWithoutSemestreInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateManyWithoutSemestreInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinaCreateManyCursoInput = {
    id?: number
    descricao: string
    carga_horario: number
  }

  export type TurmaCreateManyCursoInput = {
    id?: number
    semestre_curso: number
  }

  export type DisciplinaUpdateWithoutCursoInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    carga_horario?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutDisciplinaNestedInput
    Chamada?: ChamadaUpdateManyWithoutDisciplinaNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUpdateManyWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateWithoutCursoInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    carga_horario?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput
    Chamada?: ChamadaUncheckedUpdateManyWithoutDisciplinaNestedInput
    SemestreDisciplinaProfessor?: SemestreProfessorDisciplinasUncheckedUpdateManyWithoutDisciplinaNestedInput
  }

  export type DisciplinaUncheckedUpdateManyWithoutCursoInput = {
    id?: IntFieldUpdateOperationsInput | number
    descricao?: StringFieldUpdateOperationsInput | string
    carga_horario?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaUpdateWithoutCursoInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUpdateManyWithoutTurmaNestedInput
    TurmaAluno?: TurmaAlunosUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateWithoutCursoInput = {
    id?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
    TurmaDisciplinas?: TurmaDisciplinasUncheckedUpdateManyWithoutTurmaNestedInput
    TurmaAluno?: TurmaAlunosUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type TurmaUncheckedUpdateManyWithoutCursoInput = {
    id?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasCreateManyDisciplinaInput = {
    id?: number
    id_semestre: number
    id_turma: number
    semestre_curso: number
  }

  export type ChamadaCreateManyDisciplinaInput = {
    id?: number
    id_professor: number
    id_semestre: number
    data_hora_inicio?: Date | string | null
    data_hora_final?: Date | string | null
  }

  export type SemestreProfessorDisciplinasCreateManyDisciplinaInput = {
    id?: number
    id_professor: number
    id_semestre: number
  }

  export type TurmaDisciplinasUpdateWithoutDisciplinaInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
    Semestre?: SemestreUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
    Turma?: TurmaUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
  }

  export type TurmaDisciplinasUncheckedUpdateWithoutDisciplinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasUncheckedUpdateManyWithoutDisciplinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    id_turma?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type ChamadaUpdateWithoutDisciplinaInput = {
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Professor?: UsuarioUpdateOneRequiredWithoutChamadaProfessorNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutChamadaNestedInput
    ChamadaAluno?: ChamadaAlunosUpdateManyWithoutChamadaNestedInput
  }

  export type ChamadaUncheckedUpdateWithoutDisciplinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ChamadaAluno?: ChamadaAlunosUncheckedUpdateManyWithoutChamadaNestedInput
  }

  export type ChamadaUncheckedUpdateManyWithoutDisciplinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    data_hora_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    data_hora_final?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SemestreProfessorDisciplinasUpdateWithoutDisciplinaInput = {
    Professor?: UsuarioUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutSemestreDisciplinaProfessorNestedInput
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateWithoutDisciplinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
  }

  export type SemestreProfessorDisciplinasUncheckedUpdateManyWithoutDisciplinaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_professor?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasCreateManyTurmaInput = {
    id?: number
    id_disciplina: number
    id_semestre: number
    semestre_curso: number
  }

  export type TurmaAlunosCreateManyTurmaInput = {
    id?: number
    id_aluno: number
  }

  export type TurmaDisciplinasUpdateWithoutTurmaInput = {
    semestre_curso?: IntFieldUpdateOperationsInput | number
    Disciplina?: DisciplinaUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
    Semestre?: SemestreUpdateOneRequiredWithoutTurmaDisciplinasNestedInput
  }

  export type TurmaDisciplinasUncheckedUpdateWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaDisciplinasUncheckedUpdateManyWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_disciplina?: IntFieldUpdateOperationsInput | number
    id_semestre?: IntFieldUpdateOperationsInput | number
    semestre_curso?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaAlunosUpdateWithoutTurmaInput = {
    Usuario?: UsuarioUpdateOneRequiredWithoutTurmaAlunoNestedInput
  }

  export type TurmaAlunosUncheckedUpdateWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_aluno?: IntFieldUpdateOperationsInput | number
  }

  export type TurmaAlunosUncheckedUpdateManyWithoutTurmaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_aluno?: IntFieldUpdateOperationsInput | number
  }

  export type ChamadaAlunosCreateManyChamadaInput = {
    id?: number
    id_aluno: number
  }

  export type ChamadaAlunosUpdateWithoutChamadaInput = {
    Usuario?: UsuarioUpdateOneRequiredWithoutChamadaAlunoNestedInput
  }

  export type ChamadaAlunosUncheckedUpdateWithoutChamadaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_aluno?: IntFieldUpdateOperationsInput | number
  }

  export type ChamadaAlunosUncheckedUpdateManyWithoutChamadaInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_aluno?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SemestreCountOutputTypeDefaultArgs instead
     */
    export type SemestreCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SemestreCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CursoCountOutputTypeDefaultArgs instead
     */
    export type CursoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CursoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisciplinaCountOutputTypeDefaultArgs instead
     */
    export type DisciplinaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisciplinaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaCountOutputTypeDefaultArgs instead
     */
    export type TurmaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChamadaCountOutputTypeDefaultArgs instead
     */
    export type ChamadaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChamadaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SemestreDefaultArgs instead
     */
    export type SemestreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SemestreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CursoDefaultArgs instead
     */
    export type CursoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CursoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DisciplinaDefaultArgs instead
     */
    export type DisciplinaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DisciplinaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaDefaultArgs instead
     */
    export type TurmaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaDisciplinasDefaultArgs instead
     */
    export type TurmaDisciplinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmaDisciplinasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurmaAlunosDefaultArgs instead
     */
    export type TurmaAlunosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmaAlunosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChamadaDefaultArgs instead
     */
    export type ChamadaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChamadaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChamadaAlunosDefaultArgs instead
     */
    export type ChamadaAlunosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChamadaAlunosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SemestreProfessorDisciplinasDefaultArgs instead
     */
    export type SemestreProfessorDisciplinasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SemestreProfessorDisciplinasDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}